/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.postgres.extensions.bindings.CitextBinding

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.indexes.IDX_USERS_EMAIL_TRGM
import run.galley.cloud.db.generated.keys.API_KEYS__FK_API_KEYS_USER
import run.galley.cloud.db.generated.keys.CHARTERS__FK_CHARTERS_USER
import run.galley.cloud.db.generated.keys.CREW__FK_CREW_USER
import run.galley.cloud.db.generated.keys.EMAIL_LOGIN_TOKENS__FK_EMAIL_LOGIN_USER
import run.galley.cloud.db.generated.keys.LOGBOOK__FK_LOGBOOK_USER
import run.galley.cloud.db.generated.keys.SESSIONS__SESSIONS_USER_ID_FKEY
import run.galley.cloud.db.generated.keys.SIGN_UP_INQUIRIES__FK_SIGNUPS_USER
import run.galley.cloud.db.generated.keys.USERS_EMAIL_KEY
import run.galley.cloud.db.generated.keys.USERS_PKEY
import run.galley.cloud.db.generated.keys.USER_IDENTITIES__FK_USER_IDENTITIES_USER
import run.galley.cloud.db.generated.keys.VESSELS__FK_VESSELS_USER
import run.galley.cloud.db.generated.keys.WEBAUTHN_CREDENTIALS__FK_WEBAUTHN_USER
import run.galley.cloud.db.generated.tables.ApiKeys.ApiKeysPath
import run.galley.cloud.db.generated.tables.Charters.ChartersPath
import run.galley.cloud.db.generated.tables.Crew.CrewPath
import run.galley.cloud.db.generated.tables.EmailLoginTokens.EmailLoginTokensPath
import run.galley.cloud.db.generated.tables.Logbook.LogbookPath
import run.galley.cloud.db.generated.tables.Sessions.SessionsPath
import run.galley.cloud.db.generated.tables.SignUpInquiries.SignUpInquiriesPath
import run.galley.cloud.db.generated.tables.UserIdentities.UserIdentitiesPath
import run.galley.cloud.db.generated.tables.Vessels.VesselsPath
import run.galley.cloud.db.generated.tables.WebauthnCredentials.WebauthnCredentialsPath
import run.galley.cloud.db.generated.tables.records.UsersRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Users(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UsersRecord>?,
    parentPath: InverseForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UsersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.users</code>
         */
        val USERS: Users = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>public.users.id</code>.
     */
    val ID: TableField<UsersRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.users.email</code>.
     */
    val EMAIL: TableField<UsersRecord, String?> = createField(DSL.name("email"), DefaultDataType.getDefaultDataType("\"public\".\"citext\"").nullable(false), this, "", CitextBinding())

    /**
     * The column <code>public.users.first_name</code>.
     */
    val FIRST_NAME: TableField<UsersRecord, String?> = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.users.last_name</code>.
     */
    val LAST_NAME: TableField<UsersRecord, String?> = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.users.created_at</code>.
     */
    val CREATED_AT: TableField<UsersRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UsersRecord>?, parentPath: InverseForeignKey<out Record, UsersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class UsersPath : Users, Path<UsersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UsersRecord>?, parentPath: InverseForeignKey<out Record, UsersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UsersRecord>): super(alias, aliased)
        override fun `as`(alias: String): UsersPath = UsersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UsersPath = UsersPath(alias, this)
        override fun `as`(alias: Table<*>): UsersPath = UsersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_USERS_EMAIL_TRGM)
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = USERS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<UsersRecord>> = listOf(USERS_EMAIL_KEY)

    private lateinit var _apiKeys: ApiKeysPath

    /**
     * Get the implicit to-many join path to the <code>public.api_keys</code>
     * table
     */
    fun apiKeys(): ApiKeysPath {
        if (!this::_apiKeys.isInitialized)
            _apiKeys = ApiKeysPath(this, null, API_KEYS__FK_API_KEYS_USER.inverseKey)

        return _apiKeys;
    }

    val apiKeys: ApiKeysPath
        get(): ApiKeysPath = apiKeys()

    private lateinit var _charters: ChartersPath

    /**
     * Get the implicit to-many join path to the <code>public.charters</code>
     * table
     */
    fun charters(): ChartersPath {
        if (!this::_charters.isInitialized)
            _charters = ChartersPath(this, null, CHARTERS__FK_CHARTERS_USER.inverseKey)

        return _charters;
    }

    val charters: ChartersPath
        get(): ChartersPath = charters()

    private lateinit var _crew: CrewPath

    /**
     * Get the implicit to-many join path to the <code>public.crew</code> table
     */
    fun crew(): CrewPath {
        if (!this::_crew.isInitialized)
            _crew = CrewPath(this, null, CREW__FK_CREW_USER.inverseKey)

        return _crew;
    }

    val crew: CrewPath
        get(): CrewPath = crew()

    private lateinit var _emailLoginTokens: EmailLoginTokensPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.email_login_tokens</code> table
     */
    fun emailLoginTokens(): EmailLoginTokensPath {
        if (!this::_emailLoginTokens.isInitialized)
            _emailLoginTokens = EmailLoginTokensPath(this, null, EMAIL_LOGIN_TOKENS__FK_EMAIL_LOGIN_USER.inverseKey)

        return _emailLoginTokens;
    }

    val emailLoginTokens: EmailLoginTokensPath
        get(): EmailLoginTokensPath = emailLoginTokens()

    private lateinit var _logbook: LogbookPath

    /**
     * Get the implicit to-many join path to the <code>public.logbook</code>
     * table
     */
    fun logbook(): LogbookPath {
        if (!this::_logbook.isInitialized)
            _logbook = LogbookPath(this, null, LOGBOOK__FK_LOGBOOK_USER.inverseKey)

        return _logbook;
    }

    val logbook: LogbookPath
        get(): LogbookPath = logbook()

    private lateinit var _signUpInquiries: SignUpInquiriesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.sign_up_inquiries</code> table
     */
    fun signUpInquiries(): SignUpInquiriesPath {
        if (!this::_signUpInquiries.isInitialized)
            _signUpInquiries = SignUpInquiriesPath(this, null, SIGN_UP_INQUIRIES__FK_SIGNUPS_USER.inverseKey)

        return _signUpInquiries;
    }

    val signUpInquiries: SignUpInquiriesPath
        get(): SignUpInquiriesPath = signUpInquiries()

    private lateinit var _userIdentities: UserIdentitiesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_identities</code> table
     */
    fun userIdentities(): UserIdentitiesPath {
        if (!this::_userIdentities.isInitialized)
            _userIdentities = UserIdentitiesPath(this, null, USER_IDENTITIES__FK_USER_IDENTITIES_USER.inverseKey)

        return _userIdentities;
    }

    val userIdentities: UserIdentitiesPath
        get(): UserIdentitiesPath = userIdentities()

    private lateinit var _vessels: VesselsPath

    /**
     * Get the implicit to-many join path to the <code>public.vessels</code>
     * table
     */
    fun vessels(): VesselsPath {
        if (!this::_vessels.isInitialized)
            _vessels = VesselsPath(this, null, VESSELS__FK_VESSELS_USER.inverseKey)

        return _vessels;
    }

    val vessels: VesselsPath
        get(): VesselsPath = vessels()

    private lateinit var _webauthnCredentials: WebauthnCredentialsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.webauthn_credentials</code> table
     */
    fun webauthnCredentials(): WebauthnCredentialsPath {
        if (!this::_webauthnCredentials.isInitialized)
            _webauthnCredentials = WebauthnCredentialsPath(this, null, WEBAUTHN_CREDENTIALS__FK_WEBAUTHN_USER.inverseKey)

        return _webauthnCredentials;
    }

    val webauthnCredentials: WebauthnCredentialsPath
        get(): WebauthnCredentialsPath = webauthnCredentials()

    private lateinit var _sessions: SessionsPath

    /**
     * Get the implicit to-many join path to the <code>public.sessions</code>
     * table
     */
    fun sessions(): SessionsPath {
        if (!this::_sessions.isInitialized)
            _sessions = SessionsPath(this, null, SESSIONS__SESSIONS_USER_ID_FKEY.inverseKey)

        return _sessions;
    }

    val sessions: SessionsPath
        get(): SessionsPath = sessions()
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)
    override fun `as`(alias: Table<*>): Users = Users(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Users = Users(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Users = Users(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Users = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Users = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Users = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Users = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Users = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Users = where(DSL.notExists(select))
}
