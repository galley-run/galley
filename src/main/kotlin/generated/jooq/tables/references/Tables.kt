@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.references


import generated.jooq.tables.ApiKeys
import generated.jooq.tables.CharterBillingProfile
import generated.jooq.tables.CharterProjects
import generated.jooq.tables.Charters
import generated.jooq.tables.Crew
import generated.jooq.tables.CrewCharterMember
import generated.jooq.tables.EmailLoginTokens
import generated.jooq.tables.Locker
import generated.jooq.tables.Logbook
import generated.jooq.tables.MvLogbookRecent
import generated.jooq.tables.MvOutboxReady
import generated.jooq.tables.OutboxEvents
import generated.jooq.tables.PgpArmorHeaders
import generated.jooq.tables.ProjectApiGateway
import generated.jooq.tables.ProjectApplications
import generated.jooq.tables.ProjectConfigs
import generated.jooq.tables.ProjectDatabases
import generated.jooq.tables.ProjectSecrets
import generated.jooq.tables.RegexpMatches
import generated.jooq.tables.RegexpSplitToTable
import generated.jooq.tables.Sessions
import generated.jooq.tables.SignUpInquiries
import generated.jooq.tables.UserIdentities
import generated.jooq.tables.Users
import generated.jooq.tables.VLogbookRecent
import generated.jooq.tables.VOutboxAudit
import generated.jooq.tables.VesselBillingProfile
import generated.jooq.tables.VesselEngineNodes
import generated.jooq.tables.VesselEngineRegions
import generated.jooq.tables.VesselEngines
import generated.jooq.tables.Vessels
import generated.jooq.tables.WebauthnCredentials
import generated.jooq.tables.WebhookDeliveries
import generated.jooq.tables.WebhookSubscriptions
import generated.jooq.tables.records.PgpArmorHeadersRecord
import generated.jooq.tables.records.RegexpMatchesRecord
import generated.jooq.tables.records.RegexpSplitToTableRecord

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result



/**
 * The table <code>public.api_keys</code>.
 */
val API_KEYS: ApiKeys = ApiKeys.API_KEYS

/**
 * The table <code>public.charter_billing_profile</code>.
 */
val CHARTER_BILLING_PROFILE: CharterBillingProfile = CharterBillingProfile.CHARTER_BILLING_PROFILE

/**
 * The table <code>public.charter_projects</code>.
 */
val CHARTER_PROJECTS: CharterProjects = CharterProjects.CHARTER_PROJECTS

/**
 * The table <code>public.charters</code>.
 */
val CHARTERS: Charters = Charters.CHARTERS

/**
 * The table <code>public.crew</code>.
 */
val CREW: Crew = Crew.CREW

/**
 * The table <code>public.crew_charter_member</code>.
 */
val CREW_CHARTER_MEMBER: CrewCharterMember = CrewCharterMember.CREW_CHARTER_MEMBER

/**
 * The table <code>public.email_login_tokens</code>.
 */
val EMAIL_LOGIN_TOKENS: EmailLoginTokens = EmailLoginTokens.EMAIL_LOGIN_TOKENS

/**
 * The table <code>public.locker</code>.
 */
val LOCKER: Locker = Locker.LOCKER

/**
 * The table <code>public.logbook</code>.
 */
val LOGBOOK: Logbook = Logbook.LOGBOOK

/**
 * The table <code>public.mv_logbook_recent</code>.
 */
val MV_LOGBOOK_RECENT: MvLogbookRecent = MvLogbookRecent.MV_LOGBOOK_RECENT

/**
 * The table <code>public.mv_outbox_ready</code>.
 */
val MV_OUTBOX_READY: MvOutboxReady = MvOutboxReady.MV_OUTBOX_READY

/**
 * The table <code>public.outbox_events</code>.
 */
val OUTBOX_EVENTS: OutboxEvents = OutboxEvents.OUTBOX_EVENTS

/**
 * The table <code>public.pgp_armor_headers</code>.
 */
val PGP_ARMOR_HEADERS: PgpArmorHeaders = PgpArmorHeaders.PGP_ARMOR_HEADERS

/**
 * Call <code>public.pgp_armor_headers</code>.
 */
fun PGP_ARMOR_HEADERS(
      configuration: Configuration
    , __1: String?
): Result<PgpArmorHeadersRecord> = configuration.dsl().selectFrom(generated.jooq.tables.PgpArmorHeaders.PGP_ARMOR_HEADERS.call(
      __1
)).fetch()

/**
 * Get <code>public.pgp_armor_headers</code> as a table.
 */
fun PGP_ARMOR_HEADERS(
      __1: String?
): PgpArmorHeaders = generated.jooq.tables.PgpArmorHeaders.PGP_ARMOR_HEADERS.call(
    __1
)

/**
 * Get <code>public.pgp_armor_headers</code> as a table.
 */
fun PGP_ARMOR_HEADERS(
      __1: Field<String?>
): PgpArmorHeaders = generated.jooq.tables.PgpArmorHeaders.PGP_ARMOR_HEADERS.call(
    __1
)

/**
 * The table <code>public.project_api_gateway</code>.
 */
val PROJECT_API_GATEWAY: ProjectApiGateway = ProjectApiGateway.PROJECT_API_GATEWAY

/**
 * The table <code>public.project_applications</code>.
 */
val PROJECT_APPLICATIONS: ProjectApplications = ProjectApplications.PROJECT_APPLICATIONS

/**
 * The table <code>public.project_configs</code>.
 */
val PROJECT_CONFIGS: ProjectConfigs = ProjectConfigs.PROJECT_CONFIGS

/**
 * The table <code>public.project_databases</code>.
 */
val PROJECT_DATABASES: ProjectDatabases = ProjectDatabases.PROJECT_DATABASES

/**
 * The table <code>public.project_secrets</code>.
 */
val PROJECT_SECRETS: ProjectSecrets = ProjectSecrets.PROJECT_SECRETS

/**
 * The table <code>public.regexp_matches</code>.
 */
val REGEXP_MATCHES: RegexpMatches = RegexpMatches.REGEXP_MATCHES

/**
 * Call <code>public.regexp_matches</code>.
 */
fun REGEXP_MATCHES(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Result<RegexpMatchesRecord> = configuration.dsl().selectFrom(generated.jooq.tables.RegexpMatches.REGEXP_MATCHES.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>public.regexp_matches</code> as a table.
 */
fun REGEXP_MATCHES(
      __1: String?
    , __2: String?
): RegexpMatches = generated.jooq.tables.RegexpMatches.REGEXP_MATCHES.call(
    __1,
    __2
)

/**
 * Get <code>public.regexp_matches</code> as a table.
 */
fun REGEXP_MATCHES(
      __1: Field<String?>
    , __2: Field<String?>
): RegexpMatches = generated.jooq.tables.RegexpMatches.REGEXP_MATCHES.call(
    __1,
    __2
)

/**
 * The table <code>public.regexp_split_to_table</code>.
 */
val REGEXP_SPLIT_TO_TABLE: RegexpSplitToTable = RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE

/**
 * Call <code>public.regexp_split_to_table</code>.
 */
fun REGEXP_SPLIT_TO_TABLE(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Result<RegexpSplitToTableRecord> = configuration.dsl().selectFrom(generated.jooq.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
      __1
    , __2
)).fetch()

/**
 * Get <code>public.regexp_split_to_table</code> as a table.
 */
fun REGEXP_SPLIT_TO_TABLE(
      __1: String?
    , __2: String?
): RegexpSplitToTable = generated.jooq.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
    __1,
    __2
)

/**
 * Get <code>public.regexp_split_to_table</code> as a table.
 */
fun REGEXP_SPLIT_TO_TABLE(
      __1: Field<String?>
    , __2: Field<String?>
): RegexpSplitToTable = generated.jooq.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
    __1,
    __2
)

/**
 * The table <code>public.sessions</code>.
 */
val SESSIONS: Sessions = Sessions.SESSIONS

/**
 * The table <code>public.sign_up_inquiries</code>.
 */
val SIGN_UP_INQUIRIES: SignUpInquiries = SignUpInquiries.SIGN_UP_INQUIRIES

/**
 * The table <code>public.user_identities</code>.
 */
val USER_IDENTITIES: UserIdentities = UserIdentities.USER_IDENTITIES

/**
 * The table <code>public.users</code>.
 */
val USERS: Users = Users.USERS

/**
 * The table <code>public.v_logbook_recent</code>.
 */
val V_LOGBOOK_RECENT: VLogbookRecent = VLogbookRecent.V_LOGBOOK_RECENT

/**
 * The table <code>public.v_outbox_audit</code>.
 */
val V_OUTBOX_AUDIT: VOutboxAudit = VOutboxAudit.V_OUTBOX_AUDIT

/**
 * The table <code>public.vessel_billing_profile</code>.
 */
val VESSEL_BILLING_PROFILE: VesselBillingProfile = VesselBillingProfile.VESSEL_BILLING_PROFILE

/**
 * The table <code>public.vessel_engine_nodes</code>.
 */
val VESSEL_ENGINE_NODES: VesselEngineNodes = VesselEngineNodes.VESSEL_ENGINE_NODES

/**
 * The table <code>public.vessel_engine_regions</code>.
 */
val VESSEL_ENGINE_REGIONS: VesselEngineRegions = VesselEngineRegions.VESSEL_ENGINE_REGIONS

/**
 * The table <code>public.vessel_engines</code>.
 */
val VESSEL_ENGINES: VesselEngines = VesselEngines.VESSEL_ENGINES

/**
 * The table <code>public.vessels</code>.
 */
val VESSELS: Vessels = Vessels.VESSELS

/**
 * The table <code>public.webauthn_credentials</code>.
 */
val WEBAUTHN_CREDENTIALS: WebauthnCredentials = WebauthnCredentials.WEBAUTHN_CREDENTIALS

/**
 * The table <code>public.webhook_deliveries</code>.
 */
val WEBHOOK_DELIVERIES: WebhookDeliveries = WebhookDeliveries.WEBHOOK_DELIVERIES

/**
 * The table <code>public.webhook_subscriptions</code>.
 */
val WEBHOOK_SUBSCRIPTIONS: WebhookSubscriptions = WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS
