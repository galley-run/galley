/*
 * This file is generated by jOOQ.
 */
package generated.jooq.routines


import generated.jooq.Public

import io.vertx.core.shareddata.ClusterSerializable

import java.util.UUID

import nl.clicqo.data.JooqJsonbObjectBinding

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class GalleyOutboxEnqueue : AbstractRoutine<java.lang.Void>("galley_outbox_enqueue", Public.PUBLIC, DSL.comment("")) {
    companion object {

        /**
         * The parameter
         * <code>public.galley_outbox_enqueue._aggregate_table</code>.
         */
        val _AGGREGATE_TABLE: Parameter<String?> = Internal.createParameter("_aggregate_table", SQLDataType.CLOB, false, false)

        /**
         * The parameter
         * <code>public.galley_outbox_enqueue._aggregate_id</code>.
         */
        val _AGGREGATE_ID: Parameter<UUID?> = Internal.createParameter("_aggregate_id", SQLDataType.UUID, false, false)

        /**
         * The parameter <code>public.galley_outbox_enqueue._event_type</code>.
         */
        val _EVENT_TYPE: Parameter<String?> = Internal.createParameter("_event_type", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>public.galley_outbox_enqueue._payload</code>.
         */
        val _PAYLOAD: Parameter<ClusterSerializable?> = Internal.createParameter("_payload", SQLDataType.JSONB, false, false, JooqJsonbObjectBinding())

        /**
         * The parameter <code>public.galley_outbox_enqueue._vessel_id</code>.
         */
        val _VESSEL_ID: Parameter<UUID?> = Internal.createParameter("_vessel_id", SQLDataType.UUID.defaultValue(DSL.field(DSL.raw("NULL::uuid"), SQLDataType.UUID)), true, false)

        /**
         * The parameter <code>public.galley_outbox_enqueue._charter_id</code>.
         */
        val _CHARTER_ID: Parameter<UUID?> = Internal.createParameter("_charter_id", SQLDataType.UUID.defaultValue(DSL.field(DSL.raw("NULL::uuid"), SQLDataType.UUID)), true, false)

        /**
         * The parameter <code>public.galley_outbox_enqueue._project_id</code>.
         */
        val _PROJECT_ID: Parameter<UUID?> = Internal.createParameter("_project_id", SQLDataType.UUID.defaultValue(DSL.field(DSL.raw("NULL::uuid"), SQLDataType.UUID)), true, false)

        /**
         * The parameter <code>public.galley_outbox_enqueue._event_key</code>.
         */
        val _EVENT_KEY: Parameter<String?> = Internal.createParameter("_event_key", SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)), true, false)
    }

    init {
        addInParameter(GalleyOutboxEnqueue._AGGREGATE_TABLE)
        addInParameter(GalleyOutboxEnqueue._AGGREGATE_ID)
        addInParameter(GalleyOutboxEnqueue._EVENT_TYPE)
        addInParameter(GalleyOutboxEnqueue._PAYLOAD)
        addInParameter(GalleyOutboxEnqueue._VESSEL_ID)
        addInParameter(GalleyOutboxEnqueue._CHARTER_ID)
        addInParameter(GalleyOutboxEnqueue._PROJECT_ID)
        addInParameter(GalleyOutboxEnqueue._EVENT_KEY)
    }

    /**
     * Set the <code>_aggregate_table</code> parameter IN value to the routine
     */
    fun set_AggregateTable(value: String?): Unit = setValue(GalleyOutboxEnqueue._AGGREGATE_TABLE, value)

    /**
     * Set the <code>_aggregate_id</code> parameter IN value to the routine
     */
    fun set_AggregateId(value: UUID?): Unit = setValue(GalleyOutboxEnqueue._AGGREGATE_ID, value)

    /**
     * Set the <code>_event_type</code> parameter IN value to the routine
     */
    fun set_EventType(value: String?): Unit = setValue(GalleyOutboxEnqueue._EVENT_TYPE, value)

    /**
     * Set the <code>_payload</code> parameter IN value to the routine
     */
    fun set_Payload(value: ClusterSerializable?): Unit = setValue(GalleyOutboxEnqueue._PAYLOAD, value)

    /**
     * Set the <code>_vessel_id</code> parameter IN value to the routine
     */
    fun set_VesselId(value: UUID?): Unit = setValue(GalleyOutboxEnqueue._VESSEL_ID, value)

    /**
     * Set the <code>_charter_id</code> parameter IN value to the routine
     */
    fun set_CharterId(value: UUID?): Unit = setValue(GalleyOutboxEnqueue._CHARTER_ID, value)

    /**
     * Set the <code>_project_id</code> parameter IN value to the routine
     */
    fun set_ProjectId(value: UUID?): Unit = setValue(GalleyOutboxEnqueue._PROJECT_ID, value)

    /**
     * Set the <code>_event_key</code> parameter IN value to the routine
     */
    fun set_EventKey(value: String?): Unit = setValue(GalleyOutboxEnqueue._EVENT_KEY, value)
}
