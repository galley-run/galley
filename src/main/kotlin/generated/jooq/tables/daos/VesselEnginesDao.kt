/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.enums.EngineMode
import generated.jooq.tables.VesselEngines
import generated.jooq.tables.records.VesselEnginesRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VesselEnginesDao(configuration: Configuration?) : DAOImpl<VesselEnginesRecord, generated.jooq.tables.pojos.VesselEngines, UUID>(VesselEngines.VESSEL_ENGINES, generated.jooq.tables.pojos.VesselEngines::class.java, configuration) {

    /**
     * Create a new VesselEnginesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.VesselEngines): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.VesselEngines> = fetchRange(VesselEngines.VESSEL_ENGINES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.VesselEngines> = fetch(VesselEngines.VESSEL_ENGINES.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.VesselEngines? = fetchOne(VesselEngines.VESSEL_ENGINES.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.VesselEngines> = fetchRange(VesselEngines.VESSEL_ENGINES.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.VesselEngines> = fetch(VesselEngines.VESSEL_ENGINES.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.VesselEngines> = fetchRange(VesselEngines.VESSEL_ENGINES.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<generated.jooq.tables.pojos.VesselEngines> = fetch(VesselEngines.VESSEL_ENGINES.NAME, *values)

    /**
     * Fetch records that have <code>mode BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfMode(lowerInclusive: EngineMode?, upperInclusive: EngineMode?): List<generated.jooq.tables.pojos.VesselEngines> = fetchRange(VesselEngines.VESSEL_ENGINES.MODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>mode IN (values)</code>
     */
    fun fetchByMode(vararg values: EngineMode): List<generated.jooq.tables.pojos.VesselEngines> = fetch(VesselEngines.VESSEL_ENGINES.MODE, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.VesselEngines> = fetchRange(VesselEngines.VESSEL_ENGINES.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.VesselEngines> = fetch(VesselEngines.VESSEL_ENGINES.CREATED_AT, *values)
}
