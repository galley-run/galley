/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.records

import generated.jooq.tables.WebauthnCredentials
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.OffsetDateTime
import java.util.UUID

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class WebauthnCredentialsRecord() : UpdatableRecordImpl<WebauthnCredentialsRecord>(WebauthnCredentials.WEBAUTHN_CREDENTIALS) {
  open var id: UUID?
    set(value): Unit = set(0, value)
    get(): UUID? = get(0) as UUID?

  open var userId: UUID?
    set(value): Unit = set(1, value)
    get(): UUID? = get(1) as UUID?

  open var credentialId: ByteArray?
    set(value): Unit = set(2, value)
    get(): ByteArray? = get(2) as ByteArray?

  open var publicKey: ByteArray?
    set(value): Unit = set(3, value)
    get(): ByteArray? = get(3) as ByteArray?

  open var aaguid: UUID?
    set(value): Unit = set(4, value)
    get(): UUID? = get(4) as UUID?

  open var signCount: Long?
    set(value): Unit = set(5, value)
    get(): Long? = get(5) as Long?

  open var transports: Array<String?>?
    set(value): Unit = set(6, value)
    get(): Array<String?>? = get(6) as Array<String?>?

  @Suppress("INAPPLICABLE_JVM_NAME")
  @set:JvmName("setIsDiscoverable")
  open var isDiscoverable: Boolean?
    set(value): Unit = set(7, value)
    get(): Boolean? = get(7) as Boolean?

  @Suppress("INAPPLICABLE_JVM_NAME")
  @set:JvmName("setIsBackupEligible")
  open var isBackupEligible: Boolean?
    set(value): Unit = set(8, value)
    get(): Boolean? = get(8) as Boolean?

  open var name: String?
    set(value): Unit = set(9, value)
    get(): String? = get(9) as String?

  open var lastUsedAt: OffsetDateTime?
    set(value): Unit = set(10, value)
    get(): OffsetDateTime? = get(10) as OffsetDateTime?

  open var createdAt: OffsetDateTime?
    set(value): Unit = set(11, value)
    get(): OffsetDateTime? = get(11) as OffsetDateTime?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

  /**
   * Create a detached, initialised WebauthnCredentialsRecord
   */
  constructor(
    id: UUID? = null,
    userId: UUID? = null,
    credentialId: ByteArray? = null,
    publicKey: ByteArray? = null,
    aaguid: UUID? = null,
    signCount: Long? = null,
    transports: Array<String?>? = null,
    isDiscoverable: Boolean? = null,
    isBackupEligible: Boolean? = null,
    name: String? = null,
    lastUsedAt: OffsetDateTime? = null,
    createdAt: OffsetDateTime? = null,
  ) : this() {
    this.id = id
    this.userId = userId
    this.credentialId = credentialId
    this.publicKey = publicKey
    this.aaguid = aaguid
    this.signCount = signCount
    this.transports = transports
    this.isDiscoverable = isDiscoverable
    this.isBackupEligible = isBackupEligible
    this.name = name
    this.lastUsedAt = lastUsedAt
    this.createdAt = createdAt
    resetTouchedOnNotNull()
  }

  /**
   * Create a detached, initialised WebauthnCredentialsRecord
   */
  constructor(value: generated.jooq.tables.pojos.WebauthnCredentials?) : this() {
    if (value != null) {
      this.id = value.id
      this.userId = value.userId
      this.credentialId = value.credentialId
      this.publicKey = value.publicKey
      this.aaguid = value.aaguid
      this.signCount = value.signCount
      this.transports = value.transports
      this.isDiscoverable = value.isDiscoverable
      this.isBackupEligible = value.isBackupEligible
      this.name = value.name
      this.lastUsedAt = value.lastUsedAt
      this.createdAt = value.createdAt
      resetTouchedOnNotNull()
    }
  }
}
