/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.enums.OutboxStatus
import generated.jooq.tables.OutboxEvents
import generated.jooq.tables.records.OutboxEventsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class OutboxEventsDao(configuration: Configuration?) : DAOImpl<OutboxEventsRecord, generated.jooq.tables.pojos.OutboxEvents, UUID>(OutboxEvents.OUTBOX_EVENTS, generated.jooq.tables.pojos.OutboxEvents::class.java, configuration) {

    /**
     * Create a new OutboxEventsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.OutboxEvents): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.OutboxEvents? = fetchOne(OutboxEvents.OUTBOX_EVENTS.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>charter_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCharterId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.CHARTER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>charter_id IN (values)</code>
     */
    fun fetchByCharterId(vararg values: UUID): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.CHARTER_ID, *values)

    /**
     * Fetch records that have <code>project_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProjectId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.PROJECT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>project_id IN (values)</code>
     */
    fun fetchByProjectId(vararg values: UUID): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.PROJECT_ID, *values)

    /**
     * Fetch records that have <code>aggregate_table BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAggregateTable(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.AGGREGATE_TABLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>aggregate_table IN (values)</code>
     */
    fun fetchByAggregateTable(vararg values: String): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.AGGREGATE_TABLE, *values)

    /**
     * Fetch records that have <code>aggregate_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAggregateId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.AGGREGATE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>aggregate_id IN (values)</code>
     */
    fun fetchByAggregateId(vararg values: UUID): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.AGGREGATE_ID, *values)

    /**
     * Fetch records that have <code>event_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEventType(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.EVENT_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>event_type IN (values)</code>
     */
    fun fetchByEventType(vararg values: String): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.EVENT_TYPE, *values)

    /**
     * Fetch records that have <code>event_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEventKey(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.EVENT_KEY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>event_key IN (values)</code>
     */
    fun fetchByEventKey(vararg values: String): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.EVENT_KEY, *values)

    /**
     * Fetch a unique record that has <code>event_key = value</code>
     */
    fun fetchOneByEventKey(value: String): generated.jooq.tables.pojos.OutboxEvents? = fetchOne(OutboxEvents.OUTBOX_EVENTS.EVENT_KEY, value)

    /**
     * Fetch records that have <code>event_version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEventVersion(lowerInclusive: Int?, upperInclusive: Int?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.EVENT_VERSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>event_version IN (values)</code>
     */
    fun fetchByEventVersion(vararg values: Int): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.EVENT_VERSION, *values.toTypedArray())

    /**
     * Fetch records that have <code>payload BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPayload(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.PAYLOAD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>payload IN (values)</code>
     */
    fun fetchByPayload(vararg values: JSONB): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.PAYLOAD, *values)

    /**
     * Fetch records that have <code>metadata BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfMetadata(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.METADATA, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>metadata IN (values)</code>
     */
    fun fetchByMetadata(vararg values: JSONB): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.METADATA, *values)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: OutboxStatus?, upperInclusive: OutboxStatus?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: OutboxStatus): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.STATUS, *values)

    /**
     * Fetch records that have <code>attempts BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAttempts(lowerInclusive: Int?, upperInclusive: Int?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.ATTEMPTS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>attempts IN (values)</code>
     */
    fun fetchByAttempts(vararg values: Int): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.ATTEMPTS, *values.toTypedArray())

    /**
     * Fetch records that have <code>next_attempt_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfNextAttemptAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.NEXT_ATTEMPT_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>next_attempt_at IN (values)</code>
     */
    fun fetchByNextAttemptAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.NEXT_ATTEMPT_AT, *values)

    /**
     * Fetch records that have <code>processed_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProcessedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.PROCESSED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>processed_at IN (values)</code>
     */
    fun fetchByProcessedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.PROCESSED_AT, *values)

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfError(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.ERROR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    fun fetchByError(vararg values: String): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.ERROR, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.OutboxEvents> = fetchRange(OutboxEvents.OUTBOX_EVENTS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.OutboxEvents> = fetch(OutboxEvents.OUTBOX_EVENTS.CREATED_AT, *values)
}
