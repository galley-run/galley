/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables.daos


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import run.galley.cloud.db.generated.tables.ProjectDatabases
import run.galley.cloud.db.generated.tables.records.ProjectDatabasesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectDatabasesDao(configuration: Configuration?) : DAOImpl<ProjectDatabasesRecord, run.galley.cloud.db.generated.tables.pojos.ProjectDatabases, UUID>(ProjectDatabases.PROJECT_DATABASES, run.galley.cloud.db.generated.tables.pojos.ProjectDatabases::class.java, configuration) {

    /**
     * Create a new ProjectDatabasesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: run.galley.cloud.db.generated.tables.pojos.ProjectDatabases): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): run.galley.cloud.db.generated.tables.pojos.ProjectDatabases? = fetchOne(ProjectDatabases.PROJECT_DATABASES.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>charter_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCharterId(lowerInclusive: UUID?, upperInclusive: UUID?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.CHARTER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>charter_id IN (values)</code>
     */
    fun fetchByCharterId(vararg values: UUID): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.CHARTER_ID, *values)

    /**
     * Fetch records that have <code>project_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProjectId(lowerInclusive: UUID?, upperInclusive: UUID?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.PROJECT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>project_id IN (values)</code>
     */
    fun fetchByProjectId(vararg values: UUID): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.PROJECT_ID, *values)

    /**
     * Fetch records that have <code>engine BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEngine(lowerInclusive: String?, upperInclusive: String?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.ENGINE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>engine IN (values)</code>
     */
    fun fetchByEngine(vararg values: String): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.ENGINE, *values)

    /**
     * Fetch records that have <code>plan BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPlan(lowerInclusive: String?, upperInclusive: String?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.PLAN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>plan IN (values)</code>
     */
    fun fetchByPlan(vararg values: String): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.PLAN, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.CREATED_AT, *values)

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDeletedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetchRange(ProjectDatabases.PROJECT_DATABASES.DELETED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    fun fetchByDeletedAt(vararg values: OffsetDateTime): List<run.galley.cloud.db.generated.tables.pojos.ProjectDatabases> = fetch(ProjectDatabases.PROJECT_DATABASES.DELETED_AT, *values)
}
