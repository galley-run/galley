/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.pojos


import java.io.Serializable
import java.time.OffsetDateTime
import java.util.Arrays
import java.util.UUID

import org.jooq.postgres.extensions.types.Inet

import run.galley.cloud.model.BaseModel


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
data class EmailLoginTokens(
    var id: UUID? = null,
    var userId: UUID? = null,
    var email: String? = null,
    var tokenHash: ByteArray? = null,
    var purpose: String? = null,
    var ip: Inet? = null,
    var userAgent: String? = null,
    var expiresAt: OffsetDateTime? = null,
    var usedAt: OffsetDateTime? = null,
    var createdAt: OffsetDateTime? = null
): BaseModel, Serializable {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: EmailLoginTokens = other as EmailLoginTokens
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.userId == null) {
            if (o.userId != null)
                return false
        }
        else if (this.userId != o.userId)
            return false
        if (this.email == null) {
            if (o.email != null)
                return false
        }
        else if (this.email != o.email)
            return false
        if (this.tokenHash == null) {
            if (o.tokenHash != null)
                return false
        }
        else if (!Arrays.equals(this.tokenHash, o.tokenHash))
            return false
        if (this.purpose == null) {
            if (o.purpose != null)
                return false
        }
        else if (this.purpose != o.purpose)
            return false
        if (this.ip == null) {
            if (o.ip != null)
                return false
        }
        else if (this.ip != o.ip)
            return false
        if (this.userAgent == null) {
            if (o.userAgent != null)
                return false
        }
        else if (this.userAgent != o.userAgent)
            return false
        if (this.expiresAt == null) {
            if (o.expiresAt != null)
                return false
        }
        else if (this.expiresAt != o.expiresAt)
            return false
        if (this.usedAt == null) {
            if (o.usedAt != null)
                return false
        }
        else if (this.usedAt != o.usedAt)
            return false
        if (this.createdAt == null) {
            if (o.createdAt != null)
                return false
        }
        else if (this.createdAt != o.createdAt)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + (if (this.userId == null) 0 else this.userId.hashCode())
        result = prime * result + (if (this.email == null) 0 else this.email.hashCode())
        result = prime * result + (if (this.tokenHash == null) 0 else Arrays.hashCode(this.tokenHash))
        result = prime * result + (if (this.purpose == null) 0 else this.purpose.hashCode())
        result = prime * result + (if (this.ip == null) 0 else this.ip.hashCode())
        result = prime * result + (if (this.userAgent == null) 0 else this.userAgent.hashCode())
        result = prime * result + (if (this.expiresAt == null) 0 else this.expiresAt.hashCode())
        result = prime * result + (if (this.usedAt == null) 0 else this.usedAt.hashCode())
        result = prime * result + (if (this.createdAt == null) 0 else this.createdAt.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("EmailLoginTokens (")

        sb.append(id)
        sb.append(", ").append(userId)
        sb.append(", ").append(email)
        sb.append(", ").append("[binary...]")
        sb.append(", ").append(purpose)
        sb.append(", ").append(ip)
        sb.append(", ").append(userAgent)
        sb.append(", ").append(expiresAt)
        sb.append(", ").append(usedAt)
        sb.append(", ").append(createdAt)

        sb.append(")")
        return sb.toString()
    }
}
