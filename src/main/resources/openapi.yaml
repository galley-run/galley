openapi: 3.1.0
info:
  title: Galley API
  version: 0.1.0
  description: The main Galley API spec where the Galley UI will be built upon
  license:
    name: Business Source License
    identifier: BUSL-1.1
servers:
  - url: https://api.galley.run
    description: Hosted Platform - Production
tags:
  - description: Manage vessel
    name: vessel
  - description: Manage the vessel engine
    name: vessel/engine
  - description: Manage vessel billing profile
    name: vessel/billing-profile
  - description: Manage vessel logbook
    name: vessel/logbook
  - description: Manage the vessel's SSH keys and other secrets shared accross tenants
    name: vessel/locker
  - description: Managing the crew of the vessel
    name: vessel/crew
  - description: Manage charters within a vessel
    name: charter
  - description: Manage charter billing profile
    name: charter/billing-profile
  - description: Manage charter logbook
    name: charter/logbook
  - description: Managing the crew of the charter
    name: charter/crew
  - description: Manage projects within a charter
    name: project
  - description: Manage applications within a project
    name: project/applications
  - description: Manage databases within a project
    name: project/databases
  - description: Manage secrets within a project
    name: project/secrets
  - description: Manage configs within a project
    name: project/configs
  - description: Manage API Gateway within a project
    name: project/api-gateway
  - description: Current user profile
    name: users/me
  - description: Manage API keys for the current user
    name: users/me/api-keys
  - description: Manage WebAuthn credentials for the current user
    name: users/me/webauthn
  - description: Authentication endpoints
    name: auth
  - description: The Chef AI Agent which can guide you through Galley and can give you recommendations specific to your needs on Vessel scope
    name: chef
paths:
  /vessels:
    get:
      tags:
        - vessel
      summary: List vessels
      operationId: listVessels
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListVessels
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VesselSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - vessel
      summary: Create vessel
      operationId: createVessel
      security:
        - vesselCaptain: []
      requestBody:
        required: true
        description: Vessel creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/VesselCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Vessel'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel
      summary: Get vessel by ID
      operationId: getVessel
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Vessel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - vessel
      summary: Update vessel
      operationId: updateVessel
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Vessel update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/VesselUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the updated resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Vessel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - vessel
      summary: Delete vessel (placeholder)
      operationId: deleteVessel
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel/engine
      summary: Get vessel engine overview
      operationId: getVesselEngineOverview
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/VesselEngine'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/billing-profile:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel/billing-profile
      summary: Get vessel billing profile
      operationId: getVesselBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - vessel/billing-profile
      summary: Create vessel billing profile
      operationId: createVesselBillingProfile
      security:
        - vesselCaptain: []
      requestBody:
        required: true
        description: Billing profile information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/BillingProfileCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - vessel/billing-profile
      summary: Update vessel billing profile
      operationId: updateVesselBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Updated billing profile information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/BillingProfileUpdate'
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - vessel/billing-profile
      summary: Delete vessel billing profile
      operationId: deleteVesselBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/billing-profile:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
    get:
      tags:
        - charter/billing-profile
      summary: Get charter billing profile
      operationId: getCharterBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - charter/billing-profile
      summary: Create charter billing profile
      operationId: createCharterBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Billing profile information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/BillingProfileCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - charter/billing-profile
      summary: Update charter billing profile
      operationId: updateCharterBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Updated billing profile information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/BillingProfileUpdate'
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - charter/billing-profile
      summary: Delete charter billing profile
      operationId: deleteCharterBillingProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine/nodes:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel/engine
      summary: List nodes within the engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListNodesInEngine
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: listNodesWithinTheEngine
    post:
      summary: Create a node within the engine
      operationId: createANodeWithinTheEngine
      description: Creates a new record of type Node.
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Node information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/NodeCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Node'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine/nodes/{node_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/node_id'
    get:
      summary: Get single node within the engine
      operationId: getSingleNodeWithinTheEngine
      description: Returns a record of type Node.
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Node'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a node within the engine
      operationId: updateANodeWithinTheEngine
      description: Partially updates a record of type Node.
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Updated node information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/NodePartialUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Node'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a node within the engine, may be refused if there are still applications and/or databases running on the node
      operationId: deleteANodeWithinTheEngine
      description: Deletes a record of type Node.
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine/nodes/{node_id}/security-updates:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/node_id'
    post:
      summary: Schedule a new update schedule for an engine node
      operationId: createScheduledUpdate
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScheduledUpdate'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine/nodes/{node_id}/security-updates/{scheduled_update_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/node_id'
      - $ref: '#/components/parameters/scheduled_update_id'
    delete:
      operationId: deleteAScheduledUpdateFromANode
      tags:
        - vessel/engine
      summary: Delete a scheduled update from a node
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine/regions:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel/engine
      summary: List registered regions within the engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListRegionsWithinTheEngine
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegionSummary'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      operationId: listRegionsWithinTheEngine
    post:
      summary: Create a region within the engine
      operationId: createRegion
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/RegionCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Region'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/engine/regions/{region_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/region_id'
    get:
      summary: Get single region within the engine
      operationId: getSingleRegionWithinTheEngine
      description: Returns a record of type Region.
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a region within the engine
      operationId: updateRegion
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/RegionPartialUpdate'
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Region'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a region from the engine, may be refused if there are still nodes running in the region
      operationId: deleteRegion
      tags:
        - vessel/engine
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/locker/private-keys:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      summary: List all private keys in the locker
      operationId: listPrivateKeys
      tags:
        - vessel/locker
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListPrivateKeysInLocker
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PrivateKeySummary'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create and store a new private key in the locker
      operationId: createPrivateKey
      tags:
        - vessel/locker
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/PrivateKey'
      responses:
        '201':
          description: The request was successful and the private key is stored in the Locker.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: CreatedPrivateKey
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/PrivateKeySummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/locker/private-keys/{private_key_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/private_key_id'
    patch:
      summary: Update the name of a private key in the locker.
      operationId: patchPrivateKey
      tags:
        - vessel/locker
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Updated private key information
        content:
          application/vnd.galley.v1+json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the private key
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/PrivateKeySummary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a private key from the locker, may be refused if the private key is still in use by a node
      operationId: deletePrivateKey
      tags:
        - vessel/locker
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/logbook:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel/logbook
      summary: List vessel logbook entries
      operationId: listVesselLogbookEntries
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogbookEntrySummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/logbook/{logbook_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/logbook_id'
    get:
      tags:
        - vessel/logbook
      summary: Get vessel logbook entry
      operationId: getVesselLogbookEntry
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/LogbookEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/logbook:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
    get:
      tags:
        - charter/logbook
      summary: List charter logbook entries
      operationId: listCharterLogbookEntries
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogbookEntrySummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/logbook/{logbook_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/logbook_id'
    get:
      tags:
        - charter/logbook
      summary: Get charter logbook entry
      operationId: getCharterLogbookEntry
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/LogbookEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/crew:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - vessel/crew
      summary: List crew within this vessel where the charter is part of. Charter Captains and Pursers can only see the Vessel Captains of the Vessel they're part of.
      operationId: listCrewMembers
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListCrewMembers
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CrewSummary'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Invite a crew member to a vessel
      operationId: inviteCrewMemberToVessel
      description: Creates a new record of type Crew
      tags:
        - vessel/crew
      security:
        - vesselCaptain: []
      requestBody:
        required: true
        description: Crew member information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CrewCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/crew/{crew_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/crew_id'
    get:
      tags:
        - vessel/crew
      summary: View a Vessel crew member. Charter Captains and Pursers can only see the Vessel Captains of the Vessel they're part of.
      operationId: getCrewMember
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: SingleCrewMember
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a crew member
      operationId: updateCrewMember
      description: This endpoint is limited to updating name, email of user object and update the vessel and charter role
      tags:
        - vessel/crew
      security:
        - vesselCaptain: []
      requestBody:
        required: true
        description: Updated crew member information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CrewUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a crew member or captain
      operationId: deleteCrewMemberOrCaptain
      description: Delete a crew member from a vessel. The last Captain of a Vessel cannot be deleted. This person can only be removed by deleting the entire vessel, which automatically removes the last Captain of the Vessel. This endpoint can delete either a crew member of crew captain.
      tags:
        - vessel/crew
      security:
        - vesselCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/crew/{crew_id}/accept:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/crew_id'
    patch:
      summary: Accept a crew invitation
      operationId: acceptCrewInvitation
      description: Accepts a crew invitation that was sent via email, activating the crew member's access to the vessel
      tags:
        - vessel/crew
      security:
        - vesselCaptain: []
      responses:
        '200':
          description: The request was successful, and the invitation has been accepted. The crew member now has active access to the vessel.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    get:
      tags:
        - charter
      summary: List charters within this vessel. Will list all charters in vessel for vessel captains, will list a limited set of charters vessel members.
      operationId: listCharters
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterDeckhand: []
        - charterSteward: []
        - charterPurser: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListCharters
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharterSummary'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a charter to the vessel
      operationId: addCharterToVessel
      description: Creates a new record of type Charter
      tags:
        - charter
      security:
        - vesselCaptain: []
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - data
                  properties:
                    data:
                      $ref: '#/components/schemas/Charter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        description: Charter creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CharterCreate'
  /vessels/{vessel_id}/charters/{charter_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
    get:
      tags:
        - charter
      summary: View a Charter within a Vessel. Charter Captains and Pursers can only see details of their own charter. Vessel Captains can see any charter within their vessel.
      operationId: getCharter
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: SingleCharter
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Charter'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a Charter
      operationId: updateCharter
      description: Partially updates a record of type Charter
      tags:
        - charter
      security:
        - vesselCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Charter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        description: Charter update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CharterUpdate'
    delete:
      summary: Delete a Charter
      operationId: deleteCharter
      description: Deletes a record of type Charter.
      tags:
        - charter
      security:
        - vesselCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
    get:
      tags:
        - project
      summary: List projects for charter
      operationId: listProjectsForCharter
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListProjects
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project
      summary: Create project
      operationId: createProject
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Project creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - project
      summary: Get project by ID
      operationId: getProject
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - project
      summary: Update project
      operationId: updateProject
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Project update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project
      summary: Delete project
      operationId: deleteProject
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/applications:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - project/applications
      summary: List applications for project
      operationId: listApplicationsForProject
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListApplications
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project/applications
      summary: Create application
      operationId: createApplication
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Application creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ApplicationCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/applications/{application_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/application_id'
    get:
      tags:
        - project/applications
      summary: Get application by ID
      operationId: getApplication
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - project/applications
      summary: Update application
      operationId: updateApplication
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Application update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ApplicationUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the updated resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project/applications
      summary: Delete application (placeholder)
      operationId: deleteApplication
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/databases:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - project/databases
      summary: List databases for project
      operationId: listDatabasesForProject
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListDatabases
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatabaseSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project/databases
      summary: Create database
      operationId: createDatabase
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Database creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/DatabaseCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Database'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/databases/{database_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/database_id'
    get:
      tags:
        - project/databases
      summary: Get database by ID
      operationId: getDatabase
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Database'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - project/databases
      summary: Update database
      operationId: updateDatabase
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Database update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/DatabaseUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the updated resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Database'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project/databases
      summary: Delete database (placeholder)
      operationId: deleteDatabase
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/api-gateway:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - project/api-gateway
      summary: Get API Gateway config for project
      operationId: getProjectApiGateway
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ApiGateway'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - project/api-gateway
      summary: Update API Gateway config for project
      operationId: updateProjectApiGateway
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
      requestBody:
        required: true
        description: Updated API Gateway configuration
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ApiGatewayUpdate'
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ApiGateway'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/secrets:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - project/secrets
      summary: List secrets for project
      operationId: listProjectSecrets
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListProjectSecrets
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SecretSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project/secrets
      summary: Create secret
      operationId: createProjectSecret
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Secret information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/SecretCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/secrets/{secret_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/secret_id'
    get:
      tags:
        - project/secrets
      summary: Get project secret
      operationId: getProjectSecret
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - project/secrets
      summary: Update project secret
      operationId: updateProjectSecret
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Updated secret information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/SecretUpdate'
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project/secrets
      summary: Delete project secret
      operationId: deleteProjectSecret
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/configs:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - project/configs
      summary: List configs for project
      operationId: listProjectConfigs
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListProjectConfigs
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConfigSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project/configs
      summary: Create config
      operationId: createProjectConfig
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Config information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Config'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/configs/{config_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/config_id'
    get:
      tags:
        - project/configs
      summary: Get project config
      operationId: getProjectConfig
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - project/configs
      summary: Update project config
      operationId: updateProjectConfig
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
      requestBody:
        required: true
        description: Updated config information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdate'
      responses:
        '200':
          description: The request was successful, and the resource was updated.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project/configs
      summary: Delete project config
      operationId: deleteProjectConfig
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/crew:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
    get:
      tags:
        - charter/crew
      summary: List crew within this vessel where the charter is part of. Vessel owner/captains can view crew members of all charters accross the vessel. Charter owners/captains and pursers can only view crew members of their own charter.
      operationId: listCrewMembersOfACharter
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListCrewMembers
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharterCrewSummary'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Invite a crew member to charter
      operationId: inviteCrewMemberToCharter
      description: Creates a new record of type Crew
      tags:
        - charter/crew
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Crew member information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CrewCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/crew/{crew_id}:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/crew_id'
    get:
      summary: Get single crew member
      operationId: getCharterCrewMember
      description: Returns a record of type Crew.
      tags:
        - charter/crew
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a crew member of a Charter
      operationId: updateCharterCrewMember
      description: This endpoint is limited to updating name, email of user object and update of the charter role
      tags:
        - charter/crew
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      requestBody:
        required: true
        description: Updated crew member information
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CrewUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a crew member from a charter
      operationId: deleteCharterCrewMember
      description: 'Delete a crew member from a charter. This endpoint can only delete crew members which are tied to the charter via the `crew_charter_member` table. Therefor it can only remove crew members with `vessel_role: member`'
      tags:
        - charter/crew
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/crew/{crew_id}/accept:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/crew_id'
    patch:
      summary: Accept a charter crew invitation
      operationId: acceptCharterCrewInvitation
      description: Accepts a charter crew invitation that was sent via email, activating the crew member's access to the charter
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterPurser: []
        - charterDeckhand: []
        - charterSteward: []
      tags:
        - charter/crew
      responses:
        '200':
          description: The request was successful, and the invitation has been accepted. The crew member now has active access to the charter.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Crew'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/chef/chat:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
    post:
      tags:
        - chef
      operationId: chatWithChefVesselContext
      summary: Chat with The Chef in Vessel-wide context
      security:
        - vesselCaptain: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: The message to send to The Chef
      responses:
        '200':
          description: Stream of chat responses from The Chef
          content:
            application/json:
              schema:
                type: object
                required:
                  - type
                  - content
                properties:
                  type:
                    type: string
                    enum:
                      - message
                      - error
                      - complete
                  content:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/chef/chat:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
    post:
      tags:
        - chef
      operationId: chatWithChefCharterContext
      summary: Chat with The Chef in Charter context
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterDeckhand: []
        - charterSteward: []
        - charterPurser: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: The message to send to The Chef
      responses:
        '200':
          description: Stream of chat responses from The Chef
          content:
            application/json:
              schema:
                type: object
                required:
                  - type
                  - content
                properties:
                  type:
                    type: string
                    enum:
                      - message
                      - error
                      - complete
                  content:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vessel_id}/charters/{charter_id}/projects/{project_id}/chef/chat:
    parameters:
      - $ref: '#/components/parameters/vessel_id'
      - $ref: '#/components/parameters/charter_id'
      - $ref: '#/components/parameters/project_id'
    post:
      summary: Chef chat for project scope (placeholder)
      tags:
        - chef
      operationId: chatWithChefProjectContext
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterDeckhand: []
        - charterSteward: []
        - charterPurser: []
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/me:
    get:
      tags:
        - users/me
      summary: Get current user profile (placeholder)
      operationId: getMyProfile
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
        - charterPurser: []
        - charterDeckhand: []
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/me/api-keys:
    get:
      tags:
        - users/me/api-keys
      summary: List API keys for current user
      operationId: listMyApiKeys
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
        - charterPurser: []
        - charterDeckhand: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKeySummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - users/me/api-keys
      summary: Create API key for current user
      operationId: createMyApiKey
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
        - charterPurser: []
        - charterDeckhand: []
      requestBody:
        required: true
        description: API key information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/me/api-keys/{api_key_id}:
    parameters:
      - $ref: '#/components/parameters/api_key_id'
    get:
      tags:
        - users/me/api-keys
      summary: Get API key by ID
      operationId: getMyApiKey
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
        - charterPurser: []
        - charterDeckhand: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/me/webauthn/credentials:
    get:
      tags:
        - users/me/webauthn
      summary: List WebAuthn credentials for current user
      operationId: listMyWebAuthnCredentials
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
        - charterPurser: []
        - charterDeckhand: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebAuthnCredentialSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/me/webauthn/credentials/{credential_id}:
    parameters:
      - $ref: '#/components/parameters/credential_id'
    get:
      tags:
        - users/me/webauthn
      summary: Get WebAuthn credential by ID
      operationId: getMyWebAuthnCredential
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterSteward: []
        - charterPurser: []
        - charterDeckhand: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/WebAuthnCredential'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/sign-up:
    post:
      tags:
        - auth
      summary: Sign up
      operationId: signUp
      security: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: Sign in
      operationId: signIn
      security: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/sign-out:
    post:
      tags:
        - auth
      summary: Sign out
      operationId: signOut
      security: []
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    vesselCaptain:
      type: http
      scheme: bearer
      description: Role Vessel Captain Acts as Charter Captain and is able to manage anything above the charter level.
      bearerFormat: JWT
      x-vessel-role: captain
    charterCaptain:
      type: http
      scheme: bearer
      description: Role Charter Captain Consider this role the Charter Admin, may do and see all project, charter and vessel related stuff where the charter is part of.
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: captain
    charterPurser:
      type: http
      scheme: bearer
      description: Role Charter Purser May access charter billing and crew management but only view projects details
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: purser
    charterBoatswain:
      type: http
      scheme: bearer
      description: Role Charter Boatswain May do and see all project related stuff
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: boatswain
    charterDeckhand:
      type: http
      scheme: bearer
      description: Role Charter Deckhand May deploy but can not view secrets or project settings.
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: deckhand
    charterSteward:
      type: http
      scheme: bearer
      description: Role Charter Steward This is a supporting role, may only view and monitor deploys.
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: steward
  schemas:
    VesselSummary:
      type: object
      required:
        - id
        - name
        - created_at
      properties:
        id:
          type: string
          description: Vessel ID (UUID)
        name:
          type: string
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
      description: A simplified representation of a Vessel, typically used in list views.
    VesselCreate:
      type: object
      required:
        - name
      description: Request body for POST /vessels.
      properties:
        name:
          type: string
          description: Vessel name
          minLength: 1
          maxLength: 255
          examples:
            - My Vessel
      additionalProperties: false
    Vessel:
      type: object
      required:
        - id
        - name
        - user_id
        - created_at
      properties:
        id:
          type: string
          description: Vessel ID (UUID)
        name:
          type: string
        user_id:
          type: string
          description: Owner User ID (UUID)
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
      description: Full Vessel entity as stored in the database.
    VesselUpdate:
      type: object
      description: Request body for PATCH /vessels/{id}.
      properties:
        name:
          type: string
          description: Vessel name
          minLength: 1
          maxLength: 255
          examples:
            - My Updated Vessel
      additionalProperties: false
    VesselEngine:
      type: object
      required:
        - id
        - vessel_id
        - name
        - mode
      description: Full VesselEngine entity representation for Single Get.
      properties:
        id:
          type: string
          format: uuid
          description: Unique engine identifier
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
        vessel_id:
          type: string
          format: uuid
          description: Vessel this engine belongs to
        name:
          type: string
          description: Engine name
          examples:
            - Production Cluster
        mode:
          type: string
          enum:
            - managed_cloud
            - managed_engine
            - controlled_engine
          description: Engine operation mode
          examples:
            - managed_engine
    BillingProfile:
      type: object
      description: A Generic Billing Profile
      required:
        - company_name
      properties:
        company_name:
          type: string
          description: Captures the name of the organization
          example: Clicqo
        billed_to:
          type: string
          description: Captures the name of the billing contact
          example: Jack Sparrow
        address1:
          type: string
          description: Captures the first line of the billing address
          example: 123 Main Street
        address2:
          type: string
          description: Captures the second line of the billing address
        postal_code:
          type: string
          description: Captures the postal code of the billing address
          example: 1234 AB
        city:
          type: string
          description: Captures the city of the billing address
          example: Weesp
        state:
          type: string
          description: Captures the state of the billing address
        country:
          type: string
          description: Captures the country of the billing address in ISO 3166 format
          example: nl
        vat_number:
          type: string
          description: Captures the VAT number of the organization
          example: NL123456789B01
        email:
          type: string
          description: Captures the email address of the billing contact
          example: finance@galley.run
        phone:
          type: string
          description: Captures the phone number of the billing contact
          example: +31 123 456 7890
    BillingProfileUpdate:
      type: object
      description: Request body for PATCH /billing-profiles/{id}.
      properties:
        company_name:
          type: string
          description: Company name
          examples:
            - Updated Corp
        billing_to:
          type: string
          description: Billing recipient name
          examples:
            - Jane Smith
        address1:
          type: string
          description: Address line 1
          examples:
            - 456 New St
        address2:
          type: string
          description: Address line 2
        postal_code:
          type: string
          description: Postal code
          examples:
            - '54321'
        city:
          type: string
          description: City
          examples:
            - Rotterdam
        state:
          type: string
          description: State/province
        country:
          type: string
          description: Country code (ISO 3166-1 alpha-2)
          pattern: ^[A-Z]{2}$
          examples:
            - NL
        email:
          type: string
          format: email
          description: Billing email
          examples:
            - updated@acme.com
        phone:
          type: string
          description: Phone number
        vat_number:
          type: string
          description: VAT number
      additionalProperties: false
    BillingProfileCreate:
      type: object
      description: Request body for POST /billing-profiles.
      properties:
        company_name:
          type: string
          description: Company name
          examples:
            - Acme Corp
        billing_to:
          type: string
          description: Billing recipient name
          examples:
            - John Doe
        address1:
          type: string
          description: Address line 1
          examples:
            - 123 Main St
        address2:
          type: string
          description: Address line 2
          examples:
            - Suite 100
        postal_code:
          type: string
          description: Postal code
          examples:
            - '12345'
        city:
          type: string
          description: City
          examples:
            - Amsterdam
        state:
          type: string
          description: State/province
          examples:
            - North Holland
        country:
          type: string
          description: Country code (ISO 3166-1 alpha-2)
          pattern: ^[A-Z]{2}$
          examples:
            - NL
        email:
          type: string
          format: email
          description: Billing email
          examples:
            - billing@acme.com
        phone:
          type: string
          description: Phone number
          examples:
            - '+31201234567'
        vat_number:
          type: string
          description: VAT number
          examples:
            - NL123456789B01
      additionalProperties: false
    Region:
      type: object
      required:
        - id
        - name
        - location
        - provider
      properties:
        id:
          type: string
        name:
          type: string
          examples:
            - AMS1
        location:
          type: object
          required:
            - city
            - country
          properties:
            city:
              type: string
              examples:
                - Amsterdam
            country:
              type: string
              examples:
                - nl
              description: ISO 3166 formatted country code
        provider:
          type: string
          examples:
            - mijn.host
      description: A simplified representation of a Region, typically used in list views.
    ScheduledUpdate:
      type: object
      required:
        - cron
        - type
        - execution
      properties:
        cron:
          type: string
          examples:
            - 0 1 * * *
        type:
          enum:
            - security-updates
            - bugfix-updates
            - minor-updates
            - kernel-updates
          type: string
          default: security-updates
        execution:
          type: boolean
          examples:
            - true
            - false
          description: |-
            If marked true, the ScheduledUpdate is automaticlly applied to the node.
            If marked false, the ScheduledUpdate will check periodically (see `cron` value) and notices in the UI (and via email) whenever an update is available
      description: A simplified representation of a ScheduledUpdate, typically used in list views.
    Node:
      type: object
      required:
        - region
        - type
        - id
        - provisioning
        - deploy_target
        - ssh_key
        - scheduled_updates
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        ipv4:
          type: string
          examples:
            - 5.254.32.75
        ipv6:
          type: string
          examples:
            - 2001:db8:85a3::1319:8a2e:370:7344
        name:
          type: string
          examples:
            - app1.cloud.clicqo.nl
        type:
          enum:
            - controller
            - worker
            - controller+worker
          type: string
          default: worker
        region:
          $ref: '#/components/schemas/Region'
        ssh_key:
          type: string
        provisioning:
          enum:
            - managed
            - controlled
          type: string
          default: controlled
          description: |-
            When provisioning is set to managed, Galley is allowed to fully manage and provision the node.
            When provisioning is set to controller, Galley is only allowed to control the node by deploying onto the cluster
        deploy_target:
          enum:
            - applications
            - databases
            - any
          type: string
          default: any
        scheduled_updates:
          type: array
          items:
            $ref: '#/components/schemas/ScheduledUpdate'
      description: A simplified representation of a Node, typically used in list views.
    NodeCreate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      description: Data transfer object for creating a new Node.
    NodePartialUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      description: Data transfer object for partially updating an existing Node (PATCH operation).
    RegionSummary:
      type: object
      required:
        - id
        - name
        - location
        - provider
      properties:
        id:
          type: string
        name:
          type: string
          examples:
            - AMS1
        location:
          type: object
          required:
            - city
            - country
          properties:
            city:
              type: string
              examples:
                - Amsterdam
            country:
              type: string
              examples:
                - nl
              description: ISO 3166 formatted country code
        provider:
          type: string
          examples:
            - mijn.host
      description: A simplified representation of a Region, typically used in list views.
    RegionCreate:
      type: object
      required:
        - name
        - location
        - provider
      properties:
        name:
          type: string
        location:
          type: object
          required:
            - city
            - country
          properties:
            city:
              type: string
            country:
              type: string
        provider:
          type: string
      description: Data transfer object for creating a new Region.
    RegionPartialUpdate:
      type: object
      required:
        - id
        - name
        - location
        - provider
      properties:
        id:
          type: string
        name:
          type: string
        location:
          type: object
          required:
            - city
            - country
          properties:
            city:
              type: string
            country:
              type: string
        provider:
          type: string
      description: Data transfer object for partially updating an existing Region (PATCH operation).
    PrivateKeySummary:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        name:
          type: string
          examples:
            - app1.cloud.clicqo.nl SSH Key
      description: A simplified representation of a Node, typically used in list views.
    PrivateKey:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        name:
          type: string
          examples:
            - app1.cloud.clicqo.nl SSH Key
        type:
          type: string
          examples:
            - ed25519
            - rsa
        private_key:
          type: string
        public_key:
          type: string
      description: A representation of a Private Key, typically used in request bodies.
    LogbookEntrySummary:
      type: object
      required:
        - id
        - vessel_id
        - action
        - object_type
        - created_at
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        user_id:
          type: string
        action:
          type: string
        object_type:
          type: string
        object_id:
          type: string
        details:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
    LogbookEntry:
      type: object
      required:
        - id
        - vessel_id
        - action
        - object_type
      description: Full LogbookEntry entity representation for Single Get.
      properties:
        id:
          type: string
          format: uuid
          description: Unique logbook entry identifier
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
        vessel_id:
          type: string
          format: uuid
          description: Vessel this entry belongs to
        charter_id:
          type: string
          format: uuid
          description: Charter this entry is related to
        action:
          type: string
          description: Action performed
          examples:
            - CREATE_APP
            - UPDATE_PLAN
            - DELETE_DATABASE
        object_type:
          type: string
          description: Type of object affected
          examples:
            - application
            - database
            - charter
        object_id:
          type: string
          format: uuid
          description: ID of affected object
        details:
          type: object
          description: Additional details about the action
          additionalProperties: true
          examples:
            - old_plan: s-1vcpu-2gb
              new_plan: m-2vcpu-4gb
    UserSummary:
      type: object
      required:
        - id
        - first_name
        - email
      description: A simplified representation of a User, typically used in list views.
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        first_name:
          type: string
          examples:
            - Patrick
        last_name:
          type: string
          examples:
            - van Marsbergen
        email:
          type: string
          examples:
            - patrick@galley.run
    VesselRole:
      type: string
      enum:
        - owner
        - captain
        - member
      examples:
        - captain
    CrewSummary:
      type: object
      required:
        - id
        - user
      description: A simplified representation of a Crew member, typically used in list views.
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        user:
          $ref: '#/components/schemas/UserSummary'
        vessel_role:
          $ref: '#/components/schemas/VesselRole'
    CharterRole:
      type: string
      enum:
        - owner
        - captain
        - boatswain
        - deckhand
        - steward
        - purser
      examples:
        - captain
    CrewCreate:
      type: object
      required:
        - id
        - first_name
        - email
        - charter_role
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        charter_id:
          type: string
        charter_role:
          $ref: '#/components/schemas/CharterRole'
        vessel_role:
          $ref: '#/components/schemas/VesselRole'
      description: Data transfer object for creating a new Crew member. When vessel_role is set to captain or owner, charter_role is ignored. When charter_role is set, Vessel_role will be forced to member
    Crew:
      type: object
      required:
        - id
      description: A simplified representation of a Crew member, typically used in list views.
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        user:
          $ref: '#/components/schemas/UserSummary'
        charters:
          type: array
          items:
            type: object
            required:
              - id
            description: A simplified representation of a Charter, typically used in list views.
            properties:
              id:
                type: string
                examples:
                  - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
              name:
                type: string
                examples:
                  - Clicqo
              charter_role:
                $ref: '#/components/schemas/CharterRole'
              status:
                type: string
                enum:
                  - active
                  - invited
        vessel_role:
          $ref: '#/components/schemas/VesselRole'
    CrewUpdate:
      type: object
      required:
        - first_name
        - email
        - charter_role
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        charter_role:
          $ref: '#/components/schemas/CharterRole'
        vessel_role:
          $ref: '#/components/schemas/VesselRole'
      description: Data transfer object for updating a Crew member and User object. When vessel_role is set to captain or owner, charter_role is ignored. When charter_role is set, Vessel_role will be forced to member
    CharterSummary:
      type: object
      required:
        - id
        - name
        - vessel_id
      description: A simplified representation of a Charter, typically used in list views.
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        name:
          type: string
          examples:
            - Clicqo
        vessel_id:
          type: string
          examples:
            - 972BE567-D652-4A7E-8967-B59C7E68085E
    CharterCreate:
      type: object
      required:
        - name
      description: Data transfer object for creating a new Charter.
      properties:
        name:
          type: string
          examples:
            - Clicqo
        description:
          type: string
          examples:
            - Our company
    Charter:
      type: object
      required:
        - id
        - name
        - description
        - vessel_id
      description: Full Charter entity representation for Single Get.
      properties:
        id:
          type: string
          format: uuid
          description: Unique charter identifier
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        vessel_id:
          type: string
          format: uuid
          description: Vessel this charter belongs to
          examples:
            - 972BE567-D652-4A7E-8967-B59C7E68085E
        name:
          type: string
          description: Charter name
          examples:
            - Clicqo
        description:
          type: string
          description: Charter description
          examples:
            - Our company charter for production workloads
    CharterUpdate:
      type: object
      required:
        - name
      description: Data transfer object for updating a Charter.
      properties:
        name:
          type: string
          examples:
            - Clicqo
    ProjectSummary:
      type: object
      required:
        - id
        - charter_id
        - name
        - environment
      properties:
        id:
          type: string
          description: Project ID (UUID)
        charter_id:
          type: string
          description: Charter ID (UUID)
        name:
          type: string
        environment:
          type: string
          description: Environment name (e.g. production, staging)
        purpose:
          type: string
        deleted_at:
          type: string
          format: date-time
      description: Simplified project representation used for listings.
    ProjectCreate:
      type: object
      required:
        - name
        - environment
        - purpose
      description: Data transfer object for creating a new Project.
      properties:
        name:
          type: string
          examples:
            - Clicqo
        environment:
          type: string
          examples:
            - production
        purpose:
          type: string
          examples:
            - Web application
    Project:
      type: object
      required:
        - id
        - charter_id
        - name
        - environment
      properties:
        id:
          type: string
        charter_id:
          type: string
        name:
          type: string
        environment:
          type: string
        purpose:
          type: string
        deleted_at:
          type: string
          format: date-time
    ProjectUpdate:
      type: object
      description: Request body for PATCH /projects/{id}.
      properties:
        name:
          type: string
          description: Project name
          examples:
            - Updated Project
        environment:
          type: string
          description: Environment name
          examples:
            - production
        purpose:
          type: string
          description: Project purpose
          examples:
            - Updated web application
      additionalProperties: false
    ApplicationSummary:
      type: object
      required:
        - id
        - project_id
        - name
        - slug
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        name:
          type: string
        slug:
          type: string
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    ApplicationCreate:
      type: object
      required:
        - name
        - slug
      description: Request body for POST /applications.
      properties:
        name:
          type: string
          description: Application name
          minLength: 1
          examples:
            - My App
        slug:
          type: string
          description: URL-friendly identifier
          minLength: 1
          pattern: ^[a-z0-9-]+$
          examples:
            - my-app
      additionalProperties: false
    Application:
      type: object
      required:
        - id
        - project_id
        - name
        - slug
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        name:
          type: string
        slug:
          type: string
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    ApplicationUpdate:
      type: object
      description: Request body for PATCH /applications/{id}.
      properties:
        name:
          type: string
          description: Application name
          minLength: 1
          examples:
            - Updated App
        slug:
          type: string
          description: URL-friendly identifier
          minLength: 1
          pattern: ^[a-z0-9-]+$
          examples:
            - updated-app
      additionalProperties: false
    DatabaseSummary:
      type: object
      required:
        - id
        - project_id
        - engine
        - plan
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        engine:
          type: string
        plan:
          type: string
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    DatabaseCreate:
      type: object
      required:
        - engine
        - plan
      description: Request body for POST /databases.
      properties:
        engine:
          type: string
          description: Database engine type
          examples:
            - postgres
            - mongo
            - redis
        plan:
          type: string
          description: Resource plan
          examples:
            - s-1vcpu-2gb
      additionalProperties: false
    Database:
      type: object
      required:
        - id
        - project_id
        - engine
        - plan
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        engine:
          type: string
        plan:
          type: string
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    DatabaseUpdate:
      type: object
      description: Request body for PATCH /databases/{id}.
      properties:
        engine:
          type: string
          description: Database engine type
          examples:
            - postgres
        plan:
          type: string
          description: Resource plan
          examples:
            - m-2vcpu-4gb
      additionalProperties: false
    ApiGateway:
      type: object
      required:
        - id
        - vessel_id
        - charter_id
        - project_id
        - engine
        - configuration
      description: Full ApiGateway entity representation for Single Get.
      properties:
        id:
          type: string
          format: uuid
          description: Unique API gateway identifier
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
        vessel_id:
          type: string
          format: uuid
          description: Vessel this gateway belongs to
        charter_id:
          type: string
          format: uuid
          description: Charter this gateway belongs to
        project_id:
          type: string
          format: uuid
          description: Project this gateway belongs to
        engine:
          type: string
          enum:
            - traefik
          description: Gateway engine
          examples:
            - traefik
        configuration:
          type: object
          description: Gateway configuration (engine-specific)
          additionalProperties: true
          examples:
            - entryPoints:
                web:
                  address: ':80'
    ApiGatewayUpdate:
      type: object
      description: Request body for PATCH /api-gateways/{id}.
      properties:
        configuration:
          type: object
          description: Gateway configuration (engine-specific)
          additionalProperties: true
          examples:
            - entryPoints:
                web:
                  address: ':80'
                websecure:
                  address: ':443'
      additionalProperties: false
    SecretSummary:
      type: object
      required:
        - id
        - project_id
        - key
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        crew_id:
          type: string
        key:
          type: string
        vault_mount:
          type: string
        vault_path:
          type: string
        kv_version:
          type: integer
        key_id:
          type: string
        fingerprint:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    SecretCreate:
      type: object
      required:
        - key
        - vault_mount
        - vault_path
      description: Request body for POST /secrets.
      properties:
        key:
          type: string
          description: Secret key name
          minLength: 1
          examples:
            - DATABASE_PASSWORD
        vault_mount:
          type: string
          description: Vault mount point
          minLength: 1
          examples:
            - secret
        vault_path:
          type: string
          description: Base64 encoded vault path
          minLength: 1
          examples:
            - L2dhbGxleS9wcm9qZWN0L3NlY3JldA==
        kv_version:
          type: integer
          description: KV version (only for KV v2)
          examples:
            - 2
        key_id:
          type: string
          description: SSH cert key ID
        fingerprint:
          type: string
          description: Hash/fingerprint of payload
        expires_at:
          type: string
          format: date-time
          description: Expiration timestamp
      additionalProperties: false
    Secret:
      type: object
      required:
        - id
        - project_id
        - key
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        crew_id:
          type: string
        key:
          type: string
        vault_mount:
          type: string
        vault_path:
          type: string
        kv_version:
          type: integer
        key_id:
          type: string
        fingerprint:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    SecretUpdate:
      type: object
      description: Request body for PATCH /secrets/{id}.
      properties:
        key:
          type: string
          description: Secret key name
          minLength: 1
          examples:
            - UPDATED_SECRET_KEY
        fingerprint:
          type: string
          description: Hash/fingerprint of payload
        expires_at:
          type: string
          format: date-time
          description: Expiration timestamp
      additionalProperties: false
    ConfigSummary:
      type: object
      required:
        - id
        - project_id
        - key
        - value
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        crew_id:
          type: string
        key:
          type: string
        value:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ConfigCreate:
      type: object
      required:
        - key
        - value
      description: Request body for POST /configs.
      properties:
        key:
          type: string
          description: Config key name
          minLength: 1
          examples:
            - LOG_LEVEL
        value:
          type: string
          description: Config value
          minLength: 1
          examples:
            - warning
      additionalProperties: false
    Config:
      type: object
      required:
        - id
        - project_id
        - key
        - value
      properties:
        id:
          type: string
        vessel_id:
          type: string
        charter_id:
          type: string
        project_id:
          type: string
        crew_id:
          type: string
        key:
          type: string
        value:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ConfigUpdate:
      type: object
      description: Request body for PATCH /configs/{id}.
      properties:
        key:
          type: string
          description: Config key name
          minLength: 1
          examples:
            - LOG_LEVEL
        value:
          type: string
          description: Config value
          minLength: 1
          examples:
            - debug
      additionalProperties: false
    CharterCrewSummary:
      type: object
      required:
        - id
        - user
      description: A simplified representation of a Crew member, typically used in list views.
      properties:
        id:
          type: string
          examples:
            - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
        user:
          $ref: '#/components/schemas/UserSummary'
        charter_role:
          $ref: '#/components/schemas/CharterRole'
        status:
          type: string
          enum:
            - active
            - invited
    ApiKeySummary:
      type: object
      required:
        - id
        - user_id
        - name
        - prefix
        - status
        - created_at
      properties:
        id:
          type: string
        user_id:
          type: string
        name:
          type: string
        prefix:
          type: string
          description: Public part of the key
        status:
          type: string
          enum:
            - active
            - revoked
        last_used_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    ApiKeyCreate:
      type: object
      required:
        - name
      description: Request body for POST /api-keys.
      properties:
        name:
          type: string
          description: Friendly name for the API key
          minLength: 1
          examples:
            - Galley CLI on MacBook
      additionalProperties: false
    ApiKey:
      type: object
      required:
        - id
        - name
        - prefix
        - status
      description: Full ApiKey entity representation for Single Get.
      properties:
        id:
          type: string
          format: uuid
          description: Unique API key identifier
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Friendly name for the API key
          examples:
            - Galley CLI on MacBook
        prefix:
          type: string
          description: Public prefix of the API key
          examples:
            - glly_abc123
        status:
          type: string
          enum:
            - active
            - revoked
          description: API key status
          examples:
            - active
        last_used_at:
          type: string
          format: date-time
          description: Last usage timestamp
    WebAuthnCredentialSummary:
      type: object
      required:
        - id
        - user_id
        - credential_id
        - public_key
        - sign_count
        - created_at
      properties:
        id:
          type: string
        user_id:
          type: string
        credential_id:
          type: string
          description: Base64-encoded credential ID
        public_key:
          type: string
          description: Base64-encoded public key
        aaguid:
          type: string
        sign_count:
          type: integer
        transports:
          type: array
          items:
            type: string
        is_discoverable:
          type: boolean
        is_backup_eligible:
          type: boolean
        name:
          type: string
        last_used_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    WebAuthnCredential:
      type: object
      required:
        - id
        - credential_id
        - public_key
        - sign_count
      description: Full WebAuthnCredential entity representation for Single Get.
      properties:
        id:
          type: string
          format: uuid
          description: Unique credential identifier
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
        credential_id:
          type: string
          format: byte
          description: WebAuthn credential ID (base64 encoded)
          examples:
            - dGVzdGNyZWRlbnRpYWxpZA==
        public_key:
          type: string
          format: byte
          description: Public key (base64 encoded)
        aaguid:
          type: string
          format: uuid
          description: Authenticator AAGUID
        sign_count:
          type: integer
          format: int64
          description: Signature counter
          examples:
            - 42
        transports:
          type: array
          items:
            type: string
          description: Available transports
          examples:
            - - usb
              - nfc
        is_discoverable:
          type: boolean
          description: Whether credential is discoverable
        is_backup_eligible:
          type: boolean
          description: Whether credential can be backed up
        name:
          type: string
          description: User-friendly name for credential
          examples:
            - YubiKey 5
        last_used_at:
          type: string
          format: date-time
          description: Last usage timestamp
    SignUp:
      type: object
      required:
        - email
        - first_name
        - last_name
        - inquiry
        - vessel_billing_profile
        - charter
        - project
      properties:
        intent:
          type: string
          enum:
            - exploring
            - business
            - private
          description: This field let's us know what the user's intent is when signing up.
        email:
          type: string
          format: email
          description: User's email address
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        technicalExperience:
          type: string
          enum:
            - non_tech
            - junior_dev
            - experienced
            - tech_leadership
          description: This field let's us know the technical experience of the user.
        inquiry:
          type: object
          description: This field is used to capture any additional information the user provides about their business and intent.
          properties:
            reference:
              type: string
              description: Captures information about how the user discovered Galley
              enum:
                - search_engine
                - social_media
                - word_of_mouth
                - online_community
                - conference_event
                - advertisement
                - partner_referral
                - blog_article
                - other
              example: search_engine
              default: other
            org_role:
              type: string
              description: Captures information about the role of the user in the organization
              enum:
                - tech_leadership
                - developer
                - operations
                - sales
                - marketing
              example: tech_leadership
            org_industry:
              type: string
              description: Captures information about the industry of the user's organization
              enum:
                - finance
                - healthcare
                - insurance
                - manufacturing
                - retail
                - technology
                - other
            org_team_size:
              type: string
              description: Captures information about the size of the user's organization
              enum:
                - '1'
                - 2-5
                - 5-10
                - 10-50
                - 50+
              example: '1'
        vessel_billing_profile:
          anyOf:
            - $ref: '#/components/schemas/BillingProfile'
            - type: string
              example: Boaty McBoatface
        charter:
          $ref: '#/components/schemas/CharterCreate'
        project:
          $ref: '#/components/schemas/ProjectCreate'
  responses:
    BadRequest:
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - message
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
              message:
                type: string
      description: The server could not understand the request due to invalid syntax. The client should modify the request and try again.
    Unauthorized:
      description: Authentication is required to access the requested resource. The client must include the appropriate credentials.
    Forbidden:
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - message
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
              message:
                type: string
      description: The server understood the request, but refuses to authorize it. Ensure the client has appropriate permissions.
    NotFound:
      description: The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist.
    InternalServerError:
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - message
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
              message:
                type: string
      description: The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists.
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the resource.
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
    NoContent:
      description: The server has successfully fulfilled the request and there is no additional content to send in the response payload body.
  parameters:
    vessel_id:
      name: vessel_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    charter_id:
      name: charter_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    node_id:
      name: node_id
      in: path
      required: true
      description: Unique identifier of the node
      schema:
        type: string
        format: uuid
    scheduled_update_id:
      name: scheduled_update_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    region_id:
      name: region_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    private_key_id:
      name: private_key_id
      in: path
      required: true
      description: Unique identifier of the private key
      schema:
        type: string
        format: uuid
    logbook_id:
      name: logbook_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    crew_id:
      name: crew_id
      in: path
      required: true
      description: Unique identifier of the crew member record
      schema:
        type: string
        format: uuid
    project_id:
      name: project_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    application_id:
      name: application_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    database_id:
      name: database_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    secret_id:
      name: secret_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    config_id:
      name: config_id
      in: path
      required: true
      description: Unique identifier of the project config
      schema:
        type: string
        format: uuid
    api_key_id:
      name: api_key_id
      in: path
      required: true
      description: Unique identifier of the API key
      schema:
        type: string
        format: uuid
    credential_id:
      name: credential_id
      in: path
      required: true
      description: Unique identifier of the WebAuthn credential
      schema:
        type: string
        format: uuid
