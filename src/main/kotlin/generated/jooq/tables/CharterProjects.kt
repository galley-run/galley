/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.indexes.IDX_PROJECTS_CHARTER
import generated.jooq.indexes.IDX_PROJECTS_CHARTER_DELETED
import generated.jooq.indexes.UQ_PROJECTS_NAME_ENV
import generated.jooq.keys.CHARTER_PROJECTS_PKEY
import generated.jooq.keys.CHARTER_PROJECTS__FK_PROJECTS_CHARTER
import generated.jooq.keys.OUTBOX_EVENTS__FK_OUTBOX_PROJECT
import generated.jooq.keys.PROJECT_API_GATEWAY__FK_GW_PROJECT
import generated.jooq.keys.PROJECT_APPLICATIONS__FK_APP_PROJECT
import generated.jooq.keys.PROJECT_CONFIGS__FK_CONFIGS_PROJECT
import generated.jooq.keys.PROJECT_DATABASES__FK_DB_PROJECT
import generated.jooq.keys.PROJECT_SECRETS__FK_SECRETS_PROJECT
import generated.jooq.keys.WEBHOOK_SUBSCRIPTIONS__FK_WS_PROJECT
import generated.jooq.tables.Charters.ChartersPath
import generated.jooq.tables.OutboxEvents.OutboxEventsPath
import generated.jooq.tables.ProjectApiGateway.ProjectApiGatewayPath
import generated.jooq.tables.ProjectApplications.ProjectApplicationsPath
import generated.jooq.tables.ProjectConfigs.ProjectConfigsPath
import generated.jooq.tables.ProjectDatabases.ProjectDatabasesPath
import generated.jooq.tables.ProjectSecrets.ProjectSecretsPath
import generated.jooq.tables.WebhookSubscriptions.WebhookSubscriptionsPath
import generated.jooq.tables.records.CharterProjectsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class CharterProjects(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, CharterProjectsRecord>?,
  parentPath: InverseForeignKey<out Record, CharterProjectsRecord>?,
  aliased: Table<CharterProjectsRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<CharterProjectsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.charter_projects</code>
     */
    val CHARTER_PROJECTS: CharterProjects = CharterProjects()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<CharterProjectsRecord> = CharterProjectsRecord::class.java

  /**
   * The column <code>public.charter_projects.id</code>.
   */
  val ID: TableField<CharterProjectsRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /**
   * The column <code>public.charter_projects.charter_id</code>.
   */
  val CHARTER_ID: TableField<CharterProjectsRecord, UUID?> = createField(DSL.name("charter_id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.charter_projects.name</code>.
   */
  val NAME: TableField<CharterProjectsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

  /**
   * The column <code>public.charter_projects.environment</code>.
   */
  val ENVIRONMENT: TableField<CharterProjectsRecord, String?> =
    createField(
      DSL.name("environment"),
      SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'production'::text"), SQLDataType.CLOB)),
      this,
      "",
    )

  /**
   * The column <code>public.charter_projects.purpose</code>.
   */
  val PURPOSE: TableField<CharterProjectsRecord, String?> = createField(DSL.name("purpose"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.charter_projects.deleted_at</code>.
   */
  val DELETED_AT: TableField<CharterProjectsRecord, OffsetDateTime?> =
    createField(DSL.name("deleted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

  private constructor(alias: Name, aliased: Table<CharterProjectsRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<CharterProjectsRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<CharterProjectsRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.charter_projects</code> table reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.charter_projects</code> table reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.charter_projects</code> table reference
   */
  constructor() : this(DSL.name("charter_projects"), null)

  constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CharterProjectsRecord>?, parentPath: InverseForeignKey<out Record, CharterProjectsRecord>?) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    CHARTER_PROJECTS,
    null,
    null,
  )

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  open class CharterProjectsPath :
    CharterProjects,
    Path<CharterProjectsRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, CharterProjectsRecord>?,
      parentPath: InverseForeignKey<out Record, CharterProjectsRecord>?,
    ) : super(path, childPath, parentPath)
    private constructor(alias: Name, aliased: Table<CharterProjectsRecord>) : super(alias, aliased)

    override fun `as`(alias: String): CharterProjectsPath = CharterProjectsPath(DSL.name(alias), this)

    override fun `as`(alias: Name): CharterProjectsPath = CharterProjectsPath(alias, this)

    override fun `as`(alias: Table<*>): CharterProjectsPath = CharterProjectsPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> = listOf(IDX_PROJECTS_CHARTER, IDX_PROJECTS_CHARTER_DELETED, UQ_PROJECTS_NAME_ENV)

  override fun getPrimaryKey(): UniqueKey<CharterProjectsRecord> = CHARTER_PROJECTS_PKEY

  override fun getReferences(): List<ForeignKey<CharterProjectsRecord, *>> = listOf(CHARTER_PROJECTS__FK_PROJECTS_CHARTER)

  /**
   * Get the implicit join path to the <code>public.charters</code> table.
   */
  fun charters(): ChartersPath = charters

  val charters: ChartersPath by lazy { ChartersPath(this, CHARTER_PROJECTS__FK_PROJECTS_CHARTER, null) }

  private lateinit var _projectApplications: ProjectApplicationsPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.project_applications</code> table
   */
  fun projectApplications(): ProjectApplicationsPath {
    if (!this::_projectApplications.isInitialized) {
      _projectApplications = ProjectApplicationsPath(this, null, PROJECT_APPLICATIONS__FK_APP_PROJECT.inverseKey)
    }

    return _projectApplications
  }

  val projectApplications: ProjectApplicationsPath
    get(): ProjectApplicationsPath = projectApplications()

  private lateinit var _projectConfigs: ProjectConfigsPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.project_configs</code> table
   */
  fun projectConfigs(): ProjectConfigsPath {
    if (!this::_projectConfigs.isInitialized) {
      _projectConfigs = ProjectConfigsPath(this, null, PROJECT_CONFIGS__FK_CONFIGS_PROJECT.inverseKey)
    }

    return _projectConfigs
  }

  val projectConfigs: ProjectConfigsPath
    get(): ProjectConfigsPath = projectConfigs()

  private lateinit var _projectDatabases: ProjectDatabasesPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.project_databases</code> table
   */
  fun projectDatabases(): ProjectDatabasesPath {
    if (!this::_projectDatabases.isInitialized) {
      _projectDatabases = ProjectDatabasesPath(this, null, PROJECT_DATABASES__FK_DB_PROJECT.inverseKey)
    }

    return _projectDatabases
  }

  val projectDatabases: ProjectDatabasesPath
    get(): ProjectDatabasesPath = projectDatabases()

  private lateinit var _projectApiGateway: ProjectApiGatewayPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.project_api_gateway</code> table
   */
  fun projectApiGateway(): ProjectApiGatewayPath {
    if (!this::_projectApiGateway.isInitialized) {
      _projectApiGateway = ProjectApiGatewayPath(this, null, PROJECT_API_GATEWAY__FK_GW_PROJECT.inverseKey)
    }

    return _projectApiGateway
  }

  val projectApiGateway: ProjectApiGatewayPath
    get(): ProjectApiGatewayPath = projectApiGateway()

  private lateinit var _outboxEvents: OutboxEventsPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.outbox_events</code> table
   */
  fun outboxEvents(): OutboxEventsPath {
    if (!this::_outboxEvents.isInitialized) {
      _outboxEvents = OutboxEventsPath(this, null, OUTBOX_EVENTS__FK_OUTBOX_PROJECT.inverseKey)
    }

    return _outboxEvents
  }

  val outboxEvents: OutboxEventsPath
    get(): OutboxEventsPath = outboxEvents()

  private lateinit var _projectSecrets: ProjectSecretsPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.project_secrets</code> table
   */
  fun projectSecrets(): ProjectSecretsPath {
    if (!this::_projectSecrets.isInitialized) {
      _projectSecrets = ProjectSecretsPath(this, null, PROJECT_SECRETS__FK_SECRETS_PROJECT.inverseKey)
    }

    return _projectSecrets
  }

  val projectSecrets: ProjectSecretsPath
    get(): ProjectSecretsPath = projectSecrets()

  private lateinit var _webhookSubscriptions: WebhookSubscriptionsPath

  /**
   * Get the implicit to-many join path to the
   * <code>public.webhook_subscriptions</code> table
   */
  fun webhookSubscriptions(): WebhookSubscriptionsPath {
    if (!this::_webhookSubscriptions.isInitialized) {
      _webhookSubscriptions = WebhookSubscriptionsPath(this, null, WEBHOOK_SUBSCRIPTIONS__FK_WS_PROJECT.inverseKey)
    }

    return _webhookSubscriptions
  }

  val webhookSubscriptions: WebhookSubscriptionsPath
    get(): WebhookSubscriptionsPath = webhookSubscriptions()

  override fun `as`(alias: String): CharterProjects = CharterProjects(DSL.name(alias), this)

  override fun `as`(alias: Name): CharterProjects = CharterProjects(alias, this)

  override fun `as`(alias: Table<*>): CharterProjects = CharterProjects(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): CharterProjects = CharterProjects(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): CharterProjects = CharterProjects(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): CharterProjects = CharterProjects(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): CharterProjects = CharterProjects(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): CharterProjects = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): CharterProjects = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): CharterProjects = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): CharterProjects = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): CharterProjects = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): CharterProjects = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): CharterProjects = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): CharterProjects = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): CharterProjects = where(DSL.notExists(select))
}
