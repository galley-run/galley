/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.indexes.IDX_LOGBOOK_CHARTER_TIME
import generated.jooq.indexes.IDX_LOGBOOK_DETAILS_GIN
import generated.jooq.indexes.IDX_LOGBOOK_OBJECT_TIME
import generated.jooq.indexes.IDX_LOGBOOK_USER_TIME
import generated.jooq.indexes.IDX_LOGBOOK_VESSEL_TIME
import generated.jooq.keys.LOGBOOK_PKEY
import generated.jooq.keys.LOGBOOK__FK_LOGBOOK_CHARTER
import generated.jooq.keys.LOGBOOK__FK_LOGBOOK_USER
import generated.jooq.keys.LOGBOOK__FK_LOGBOOK_VESSEL
import generated.jooq.tables.Charters.ChartersPath
import generated.jooq.tables.Users.UsersPath
import generated.jooq.tables.Vessels.VesselsPath
import generated.jooq.tables.records.LogbookRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Logbook(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, LogbookRecord>?,
    parentPath: InverseForeignKey<out Record, LogbookRecord>?,
    aliased: Table<LogbookRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<LogbookRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.logbook</code>
         */
        val LOGBOOK: Logbook = Logbook()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LogbookRecord> = LogbookRecord::class.java

    /**
     * The column <code>public.logbook.id</code>.
     */
    val ID: TableField<LogbookRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.logbook.vessel_id</code>.
     */
    val VESSEL_ID: TableField<LogbookRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.logbook.charter_id</code>.
     */
    val CHARTER_ID: TableField<LogbookRecord, UUID?> = createField(DSL.name("charter_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.logbook.user_id</code>.
     */
    val USER_ID: TableField<LogbookRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.logbook.action</code>.
     */
    val ACTION: TableField<LogbookRecord, String?> = createField(DSL.name("action"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.logbook.object_type</code>.
     */
    val OBJECT_TYPE: TableField<LogbookRecord, String?> = createField(DSL.name("object_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.logbook.object_id</code>.
     */
    val OBJECT_ID: TableField<LogbookRecord, UUID?> = createField(DSL.name("object_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.logbook.details</code>.
     */
    val DETAILS: TableField<LogbookRecord, JSONB?> = createField(DSL.name("details"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.logbook.created_at</code>.
     */
    val CREATED_AT: TableField<LogbookRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<LogbookRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<LogbookRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<LogbookRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.logbook</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.logbook</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.logbook</code> table reference
     */
    constructor(): this(DSL.name("logbook"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LogbookRecord>?, parentPath: InverseForeignKey<out Record, LogbookRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, LOGBOOK, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LogbookPath : Logbook, Path<LogbookRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, LogbookRecord>?, parentPath: InverseForeignKey<out Record, LogbookRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<LogbookRecord>): super(alias, aliased)
        override fun `as`(alias: String): LogbookPath = LogbookPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LogbookPath = LogbookPath(alias, this)
        override fun `as`(alias: Table<*>): LogbookPath = LogbookPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_LOGBOOK_CHARTER_TIME, IDX_LOGBOOK_DETAILS_GIN, IDX_LOGBOOK_OBJECT_TIME, IDX_LOGBOOK_USER_TIME, IDX_LOGBOOK_VESSEL_TIME)
    override fun getPrimaryKey(): UniqueKey<LogbookRecord> = LOGBOOK_PKEY
    override fun getReferences(): List<ForeignKey<LogbookRecord, *>> = listOf(LOGBOOK__FK_LOGBOOK_CHARTER, LOGBOOK__FK_LOGBOOK_USER, LOGBOOK__FK_LOGBOOK_VESSEL)

    /**
     * Get the implicit join path to the <code>public.charters</code> table.
     */
    fun charters(): ChartersPath = charters
    val charters: ChartersPath by lazy { ChartersPath(this, LOGBOOK__FK_LOGBOOK_CHARTER, null) }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, LOGBOOK__FK_LOGBOOK_USER, null) }

    /**
     * Get the implicit join path to the <code>public.vessels</code> table.
     */
    fun vessels(): VesselsPath = vessels
    val vessels: VesselsPath by lazy { VesselsPath(this, LOGBOOK__FK_LOGBOOK_VESSEL, null) }
    override fun `as`(alias: String): Logbook = Logbook(DSL.name(alias), this)
    override fun `as`(alias: Name): Logbook = Logbook(alias, this)
    override fun `as`(alias: Table<*>): Logbook = Logbook(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Logbook = Logbook(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Logbook = Logbook(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Logbook = Logbook(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Logbook = Logbook(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Logbook = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Logbook = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Logbook = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Logbook = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Logbook = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Logbook = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Logbook = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Logbook = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Logbook = where(DSL.notExists(select))
}
