/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.enums.GeoRegion
import generated.jooq.tables.VesselEngineRegions
import generated.jooq.tables.records.VesselEngineRegionsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VesselEngineRegionsDao(configuration: Configuration?) : DAOImpl<VesselEngineRegionsRecord, generated.jooq.tables.pojos.VesselEngineRegions, UUID>(VesselEngineRegions.VESSEL_ENGINE_REGIONS, generated.jooq.tables.pojos.VesselEngineRegions::class.java, configuration) {

    /**
     * Create a new VesselEngineRegionsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.VesselEngineRegions): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.VesselEngineRegions? = fetchOne(VesselEngineRegions.VESSEL_ENGINE_REGIONS.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>vessel_engine_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselEngineId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ENGINE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_engine_id IN (values)</code>
     */
    fun fetchByVesselEngineId(vararg values: UUID): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ENGINE_ID, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.NAME, *values)

    /**
     * Fetch records that have <code>provider_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProviderName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.PROVIDER_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>provider_name IN (values)</code>
     */
    fun fetchByProviderName(vararg values: String): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.PROVIDER_NAME, *values)

    /**
     * Fetch records that have <code>geo_region BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfGeoRegion(lowerInclusive: GeoRegion?, upperInclusive: GeoRegion?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.GEO_REGION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>geo_region IN (values)</code>
     */
    fun fetchByGeoRegion(vararg values: GeoRegion): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.GEO_REGION, *values)

    /**
     * Fetch records that have <code>location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLocation(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.LOCATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    fun fetchByLocation(vararg values: String): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.LOCATION, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetchRange(VesselEngineRegions.VESSEL_ENGINE_REGIONS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.VesselEngineRegions> = fetch(VesselEngineRegions.VESSEL_ENGINE_REGIONS.CREATED_AT, *values)
}
