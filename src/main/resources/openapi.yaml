openapi: 3.1.0
info:
  title: Galley API
  version: 0.1.0
  description: The main Galley API spec where the Galley UI will be built upon
  license:
    name: Business Source License
    identifier: BUSL-1.1
servers:
  - url: https://api.galley.dev
    description: Hosted Platform - Development
  - url: https://api.galley.run
    description: Hosted Platform - Production
tags:
  - description: Manage vessel
    name: vessel
  - description: Manage the vessel engine
    name: vessel/engine
  - description: Manage vessel billing profile
    name: vessel/billing-profile
  - description: Manage vessel logbook
    name: vessel/logbook
  - description: Manage the vessel's SSH keys and other secrets shared accross tenants
    name: vessel/locker
  - description: Managing the crew of the vessel
    name: vessel/crew
  - description: Manage charters within a vessel
    name: charter
  - description: Manage charter billing profile
    name: charter/billing-profile
  - description: Manage charter logbook
    name: charter/logbook
  - description: Managing the crew of the charter
    name: charter/crew
  - description: Manage projects within a charter
    name: project
  - description: Manage applications within a project
    name: project/applications
  - description: Manage databases within a project
    name: project/databases
  - description: Manage secrets within a project
    name: project/secrets
  - description: Manage configs within a project
    name: project/configs
  - description: Manage API Gateway within a project
    name: project/api-gateway
  - description: Current user profile
    name: users/me
  - description: Manage API keys for the current user
    name: users/me/api-keys
  - description: Manage WebAuthn credentials for the current user
    name: users/me/webauthn
  - description: Authentication endpoints
    name: auth
  - description: The Chef AI Agent which can guide you through Galley and can give you recommendations specific to your needs on Vessel scope
    name: chef
paths:
  /vessels/{vesselId}/billing-profile:
    parameters:
      - $ref: '#/components/parameters/vesselId'
    post:
      tags:
        - vessel/billing-profile
      summary: Create vessel billing profile
      operationId: vessel.billingProfile.cmd.create
      security:
        - vesselCaptain: []
      requestBody:
        required: true
        description: Billing profile information to create
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/BillingProfileCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/BillingProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vesselId}/charters:
    parameters:
      - $ref: '#/components/parameters/vesselId'
    get:
      tags:
        - charter
      summary: List charters within this vessel. Will list all charters in vessel for vessel captains, will list a limited set of charters vessel members.
      operationId: charter.query.list
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterDeckhand: []
        - charterSteward: []
        - charterPurser: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListCharters
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharterSummary'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a charter to the vessel
      operationId: charter.cmd.create
      description: Creates a new record of type Charter
      tags:
        - charter
      security:
        - vesselCaptain: []
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Charter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        description: Charter creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CharterCreate'
  /vessels/{vesselId}/charters/{charterId}:
    parameters:
      - $ref: '#/components/parameters/vesselId'
      - $ref: '#/components/parameters/charterId'
    get:
      tags:
        - charter
      summary: View a Charter within a Vessel. Charter Captains and Pursers can only see details of their own charter. Vessel Captains can see any charter within their vessel.
      operationId: charter.query.get
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterPurser: []
      responses:
        '200':
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: SingleCharter
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Charter'
          description: The request was successful, and the server has returned the requested resource in the response body.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a Charter
      operationId: charter.cmd.patch
      description: Partially updates a record of type Charter
      tags:
        - charter
      security:
        - vesselCaptain: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Charter'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        required: true
        description: Charter update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/CharterUpdate'
    delete:
      summary: Delete a Charter
      operationId: charter.cmd.delete
      description: Deletes a record of type Charter.
      tags:
        - charter
      security:
        - vesselCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vesselId}/charters/{charterId}/projects:
    parameters:
      - $ref: '#/components/parameters/vesselId'
      - $ref: '#/components/parameters/charterId'
    get:
      tags:
        - project
      summary: List projects for charter
      operationId: project.query.list
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
        - charterDeckhand: []
        - charterSteward: []
        - charterPurser: []
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                title: ListProjects
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectSummary'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - project
      summary: Create project
      operationId: project.cmd.create
      security:
        - vesselCaptain: []
        - charterCaptain: []
        - charterBoatswain: []
      requestBody:
        required: true
        description: Project creation data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: The request was successful, and a new resource was created.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /vessels/{vesselId}/charters/{charterId}/projects/{projectId}:
    parameters:
      - $ref: '#/components/parameters/vesselId'
      - $ref: '#/components/parameters/charterId'
      - $ref: '#/components/parameters/projectId'
    patch:
      tags:
        - project
      summary: Update project
      operationId: project.cmd.patch
      security:
        - vesselCaptain: []
        - charterCaptain: []
      requestBody:
        required: true
        description: Project update data
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: The request was successful, and the server has returned the requested resource in the response body.
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - project
      summary: Delete project
      operationId: project.cmd.delete
      security:
        - vesselCaptain: []
        - charterCaptain: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Refresh RefreshToken
      description: Rotate RefreshToken and return new RefreshToken. Will extend the RefreshToken's lifetime.
      operationId: auth.refreshToken.cmd.issue
      security: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RefreshToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/access-token:
    post:
      tags:
        - auth
      summary: Refresh AccessToken
      description: Rotate AccessToken and return new AccessToken.
      operationId: auth.accessToken.cmd.issue
      security: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/sign-up:
    post:
      tags:
        - auth
      summary: Sign up
      operationId: auth.cmd.create
      security: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RefreshToken'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: Sign in
      operationId: auth.cmd.issue
      security: []
      requestBody:
        required: true
        content:
          application/vnd.galley.v1+json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: OK
          content:
            application/vnd.galley.v1+json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RefreshToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    vesselCaptain:
      type: http
      scheme: bearer
      description: Role Vessel Captain Acts as Charter Captain and is able to manage anything above the charter level.
      bearerFormat: JWT
      x-vessel-role: captain
    charterCaptain:
      type: http
      scheme: bearer
      description: Role Charter Captain Consider this role the Charter Admin, may do and see all project, charter and vessel related stuff where the charter is part of.
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: captain
    charterPurser:
      type: http
      scheme: bearer
      description: Role Charter Purser May access charter billing and crew management but only view projects details
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: purser
    charterBoatswain:
      type: http
      scheme: bearer
      description: Role Charter Boatswain May do and see all project related stuff
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: boatswain
    charterDeckhand:
      type: http
      scheme: bearer
      description: Role Charter Deckhand May deploy but can not view secrets or project settings.
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: deckhand
    charterSteward:
      type: http
      scheme: bearer
      description: Role Charter Steward This is a supporting role, may only view and monitor deploys.
      bearerFormat: JWT
      x-vessel-role: member
      x-charter-role: steward
  parameters:
    vesselId:
      name: vesselId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    charterId:
      name: charterId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    projectId:
      name: projectId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    BillingProfileCreate:
      type: object
      description: Request body for POST /billing-profiles.
      properties:
        companyName:
          type: string
          description: Company name
          examples:
            - Acme Corp
        billingTo:
          type: string
          description: Billing recipient name
          examples:
            - John Doe
        address1:
          type: string
          description: Address line 1
          examples:
            - 123 Main St
        address2:
          type: string
          description: Address line 2
          examples:
            - Suite 100
        postalCode:
          type: string
          description: Postal code
          examples:
            - '12345'
        city:
          type: string
          description: City
          examples:
            - Amsterdam
        state:
          type: string
          description: State/province
          examples:
            - North Holland
        country:
          type: string
          description: Country code (ISO 3166-1 alpha-2)
          pattern: ^[A-Z]{2}$
          examples:
            - NL
        email:
          type: string
          format: email
          description: Billing email
          examples:
            - billing@acme.com
        phone:
          type: string
          description: Phone number
          examples:
            - '+31201234567'
        vatNumber:
          type: string
          description: VAT number
          examples:
            - NL123456789B01
      additionalProperties: false
    JSONAPIResource:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          description: Resource identifier
        type:
          type: string
          description: Resource type
        attributes:
          type: object
          description: Resource attributes
    BillingProfile:
      allOf:
        - $ref: '#/components/schemas/JSONAPIResource'
        - type: object
          description: A Generic Billing Profile
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              format: uuid
            type:
              type: string
              enum:
                - BillingProfile
              description: Resource type
            attributes:
              type: object
              required:
                - companyName
              properties:
                companyName:
                  type: string
                  description: Captures the name of the organization
                  example: Clicqo
                billedTo:
                  type: string
                  description: Captures the name of the billing contact
                  example: Jack Sparrow
                address1:
                  type: string
                  description: Captures the first line of the billing address
                  example: 123 Main Street
                address2:
                  type: string
                  description: Captures the second line of the billing address
                postalCode:
                  type: string
                  description: Captures the postal code of the billing address
                  example: 1234 AB
                city:
                  type: string
                  description: Captures the city of the billing address
                  example: Weesp
                state:
                  type: string
                  description: Captures the state of the billing address
                country:
                  type: string
                  description: Captures the country of the billing address in ISO 3166 format
                  example: nl
                vatNumber:
                  type: string
                  description: Captures the VAT number of the organization
                  example: NL123456789B01
                email:
                  type: string
                  description: Captures the email address of the billing contact
                  example: finance@galley.run
                phone:
                  type: string
                  description: Captures the phone number of the billing contact
                  example: +31 123 456 7890
    CharterSummary:
      allOf:
        - $ref: '#/components/schemas/JSONAPIResource'
        - type: object
          description: A simplified representation of a Charter, typically used in list views.
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              format: uuid
              examples:
                - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
            type:
              type: string
              enum:
                - Charter
              description: Resource type
            attributes:
              type: object
              required:
                - name
                - vesselId
              properties:
                name:
                  type: string
                  examples:
                    - Clicqo
                description:
                  type:
                    - string
                    - 'null'
                  examples:
                    - Our company charter for production workloads
                vesselId:
                  type: string
                  format: uuid
                  examples:
                    - 972BE567-D652-4A7E-8967-B59C7E68085E
    CharterCreate:
      type: object
      required:
        - name
      description: Data transfer object for creating a new Charter.
      properties:
        name:
          type: string
          minLength: 1
          examples:
            - Clicqo
        description:
          type:
            - string
            - 'null'
          examples:
            - Our company
    Charter:
      allOf:
        - $ref: '#/components/schemas/JSONAPIResource'
        - type: object
          description: Full Charter entity representation for Single Get.
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              format: uuid
              description: Unique charter identifier
              examples:
                - 27D9B362-0BB3-4F8D-B8E6-CF7FCEE2F327
            type:
              type: string
              enum:
                - Charter
              description: Resource type
            attributes:
              type: object
              required:
                - name
                - description
                - vesselId
              properties:
                vesselId:
                  type: string
                  format: uuid
                  description: Vessel this charter belongs to
                  examples:
                    - 972BE567-D652-4A7E-8967-B59C7E68085E
                name:
                  type: string
                  description: Charter name
                  examples:
                    - Clicqo
                description:
                  type:
                    - string
                    - 'null'
                  description: Charter description
                  examples:
                    - Our company charter for production workloads
    CharterUpdate:
      type: object
      required:
        - name
      description: Data transfer object for updating a Charter.
      properties:
        name:
          type: string
          examples:
            - Clicqo
        description:
          type:
            - string
            - 'null'
          examples:
            - Clicqo
    ProjectSummary:
      allOf:
        - $ref: '#/components/schemas/JSONAPIResource'
        - type: object
          description: Simplified project representation used for listings.
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              format: uuid
              description: Project ID (UUID)
            type:
              type: string
              enum:
                - CharterProject
              description: Resource type
            attributes:
              type: object
              required:
                - name
                - environment
              properties:
                name:
                  type: string
                environment:
                  type: string
                  description: Environment name (e.g. production, staging)
                purpose:
                  type:
                    - string
                    - 'null'
    ProjectCreate:
      type: object
      required:
        - name
        - environment
      description: Data transfer object for creating a new Project.
      properties:
        name:
          type: string
          examples:
            - Clicqo
        environment:
          type: string
          examples:
            - production
        purpose:
          type:
            - string
            - 'null'
          examples:
            - Web application
    Project:
      allOf:
        - $ref: '#/components/schemas/JSONAPIResource'
        - type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              format: uuid
            type:
              type: string
              enum:
                - CharterProject
              description: Resource type
            attributes:
              type: object
              required:
                - name
                - environment
              properties:
                name:
                  type: string
                environment:
                  type: string
                purpose:
                  type:
                    - string
                    - 'null'
    ProjectUpdate:
      type: object
      description: Request body for PATCH /projects/{id}.
      properties:
        name:
          type: string
          description: Project name
          examples:
            - Updated Project
        environment:
          type: string
          description: Environment name
          examples:
            - production
        purpose:
          type:
            - string
            - 'null'
          description: Project purpose
          examples:
            - Updated web application
      additionalProperties: false
    RefreshToken:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
    AccessToken:
      type: object
      required:
        - accessToken
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
    VesselCreate:
      type: object
      required:
        - name
      description: Request body for POST /vessels.
      properties:
        name:
          type: string
          description: Vessel name
          minLength: 1
          maxLength: 255
          examples:
            - My Vessel
      additionalProperties: false
    SignUp:
      type: object
      required:
        - intent
        - user
        - inquiry
        - vessel
      properties:
        intent:
          type: string
          enum:
            - exploring
            - business
            - private
          description: This field let's us know what the user's intent is when signing up.
        user:
          type: object
          required:
            - email
            - firstName
            - lastName
          properties:
            email:
              type: string
              format: email
              description: User's email address
            firstName:
              type: string
              description: User's first name
            lastName:
              type: string
              description: User's last name
        inquiry:
          type: object
          description: This field is used to capture any additional information the user provides about their business and intent.
          properties:
            technicalExperience:
              type: string
              enum:
                - non_tech
                - junior_dev
                - experienced
                - tech_leadership
              description: This field let's us know the technical experience of the user.
            reference:
              type: string
              description: Captures information about how the user discovered Galley
              enum:
                - search_engine
                - social_media
                - word_of_mouth
                - online_community
                - conference_event
                - advertisement
                - partner_referral
                - blog_article
                - other
              example: search_engine
              default: other
            orgRole:
              type: string
              description: Captures information about the role of the user in the organization
              enum:
                - tech_leadership
                - developer
                - operations
                - sales
                - marketing
              example: tech_leadership
            orgIndustry:
              type: string
              description: Captures information about the industry of the user's organization
              enum:
                - finance
                - healthcare
                - insurance
                - manufacturing
                - retail
                - technology
                - other
            orgTeamSize:
              type: string
              description: Captures information about the size of the user's organization
              enum:
                - '1'
                - 2-5
                - 5-10
                - 10-50
                - 50+
              example: '1'
        vesselBillingProfile:
          anyOf:
            - $ref: '#/components/schemas/BillingProfile'
            - type: string
              example: Boaty McBoatface
        vessel:
          $ref: '#/components/schemas/VesselCreate'
        charter:
          $ref: '#/components/schemas/CharterCreate'
        project:
          $ref: '#/components/schemas/ProjectCreate'
    SignIn:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: User's email address
  responses:
    BadRequest:
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - status
                  properties:
                    status:
                      type: string
                    title:
                      type: string
      description: The server could not understand the request due to invalid syntax. The client should modify the request and try again.
    Unauthorized:
      description: Authentication is required to access the requested resource. The client must include the appropriate credentials.
    Forbidden:
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - status
                  properties:
                    status:
                      type: string
                    title:
                      type: string
      description: The server understood the request, but refuses to authorize it. Ensure the client has appropriate permissions.
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the resource.
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - status
                  properties:
                    status:
                      type: string
                    title:
                      type: string
    InternalServerError:
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - status
                  properties:
                    status:
                      type: string
                    title:
                      type: string
      description: The server encountered an unexpected condition that prevented it from fulfilling the request. Report the issue to the support team if it persists.
    NotFound:
      description: The server cannot find the requested resource. The endpoint may be invalid or the resource may no longer exist.
    UnsupportedMediaType:
      description: The request could not be completed due to a conflict with the content type of the request body.
      content:
        application/vnd.galley.v1+json:
          schema:
            type: object
            required:
              - errors
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - title
                    - status
                  properties:
                    status:
                      type: string
                    title:
                      type: string
    NoContent:
      description: The server has successfully fulfilled the request and there is no additional content to send in the response payload body.
