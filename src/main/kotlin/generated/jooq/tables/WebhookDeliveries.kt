/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.enums.DeliveryStatus
import generated.jooq.indexes.IDX_WEBHOOK_DELIVERIES_EVENT
import generated.jooq.indexes.IDX_WEBHOOK_DELIVERIES_STATUS_CREATED
import generated.jooq.indexes.IDX_WEBHOOK_DELIVERIES_SUBSCRIPTION
import generated.jooq.indexes.IDX_WEBHOOK_DELIVERIES_SUB_TIME
import generated.jooq.keys.WEBHOOK_DELIVERIES_PKEY
import generated.jooq.keys.WEBHOOK_DELIVERIES__FK_WD_EVENT
import generated.jooq.keys.WEBHOOK_DELIVERIES__FK_WD_SUBSCRIPTION
import generated.jooq.tables.OutboxEvents.OutboxEventsPath
import generated.jooq.tables.WebhookSubscriptions.WebhookSubscriptionsPath
import generated.jooq.tables.records.WebhookDeliveriesRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class WebhookDeliveries(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, WebhookDeliveriesRecord>?,
    parentPath: InverseForeignKey<out Record, WebhookDeliveriesRecord>?,
    aliased: Table<WebhookDeliveriesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<WebhookDeliveriesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.webhook_deliveries</code>
         */
        val WEBHOOK_DELIVERIES: WebhookDeliveries = WebhookDeliveries()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WebhookDeliveriesRecord> = WebhookDeliveriesRecord::class.java

    /**
     * The column <code>public.webhook_deliveries.id</code>.
     */
    val ID: TableField<WebhookDeliveriesRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.webhook_deliveries.subscription_id</code>.
     */
    val SUBSCRIPTION_ID: TableField<WebhookDeliveriesRecord, UUID?> = createField(DSL.name("subscription_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.webhook_deliveries.outbox_event_id</code>.
     */
    val OUTBOX_EVENT_ID: TableField<WebhookDeliveriesRecord, UUID?> = createField(DSL.name("outbox_event_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.webhook_deliveries.status</code>.
     */
    val STATUS: TableField<WebhookDeliveriesRecord, DeliveryStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'queued'::delivery_status"), SQLDataType.VARCHAR)).asEnumDataType(DeliveryStatus::class.java), this, "")

    /**
     * The column <code>public.webhook_deliveries.http_status</code>.
     */
    val HTTP_STATUS: TableField<WebhookDeliveriesRecord, Int?> = createField(DSL.name("http_status"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.webhook_deliveries.attempt_no</code>.
     */
    val ATTEMPT_NO: TableField<WebhookDeliveriesRecord, Int?> = createField(DSL.name("attempt_no"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.webhook_deliveries.duration_ms</code>.
     */
    val DURATION_MS: TableField<WebhookDeliveriesRecord, Int?> = createField(DSL.name("duration_ms"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.webhook_deliveries.request_headers</code>.
     */
    val REQUEST_HEADERS: TableField<WebhookDeliveriesRecord, JSONB?> = createField(DSL.name("request_headers"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.webhook_deliveries.request_body</code>.
     */
    val REQUEST_BODY: TableField<WebhookDeliveriesRecord, JSONB?> = createField(DSL.name("request_body"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.webhook_deliveries.response_headers</code>.
     */
    val RESPONSE_HEADERS: TableField<WebhookDeliveriesRecord, JSONB?> = createField(DSL.name("response_headers"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.webhook_deliveries.response_body</code>.
     */
    val RESPONSE_BODY: TableField<WebhookDeliveriesRecord, String?> = createField(DSL.name("response_body"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.webhook_deliveries.error</code>.
     */
    val ERROR: TableField<WebhookDeliveriesRecord, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.webhook_deliveries.created_at</code>.
     */
    val CREATED_AT: TableField<WebhookDeliveriesRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<WebhookDeliveriesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<WebhookDeliveriesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<WebhookDeliveriesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.webhook_deliveries</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.webhook_deliveries</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.webhook_deliveries</code> table reference
     */
    constructor(): this(DSL.name("webhook_deliveries"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, WebhookDeliveriesRecord>?, parentPath: InverseForeignKey<out Record, WebhookDeliveriesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, WEBHOOK_DELIVERIES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class WebhookDeliveriesPath : WebhookDeliveries, Path<WebhookDeliveriesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, WebhookDeliveriesRecord>?, parentPath: InverseForeignKey<out Record, WebhookDeliveriesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<WebhookDeliveriesRecord>): super(alias, aliased)
        override fun `as`(alias: String): WebhookDeliveriesPath = WebhookDeliveriesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): WebhookDeliveriesPath = WebhookDeliveriesPath(alias, this)
        override fun `as`(alias: Table<*>): WebhookDeliveriesPath = WebhookDeliveriesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_WEBHOOK_DELIVERIES_EVENT, IDX_WEBHOOK_DELIVERIES_STATUS_CREATED, IDX_WEBHOOK_DELIVERIES_SUB_TIME, IDX_WEBHOOK_DELIVERIES_SUBSCRIPTION)
    override fun getPrimaryKey(): UniqueKey<WebhookDeliveriesRecord> = WEBHOOK_DELIVERIES_PKEY
    override fun getReferences(): List<ForeignKey<WebhookDeliveriesRecord, *>> = listOf(WEBHOOK_DELIVERIES__FK_WD_EVENT, WEBHOOK_DELIVERIES__FK_WD_SUBSCRIPTION)

    /**
     * Get the implicit join path to the <code>public.outbox_events</code>
     * table.
     */
    fun outboxEvents(): OutboxEventsPath = outboxEvents
    val outboxEvents: OutboxEventsPath by lazy { OutboxEventsPath(this, WEBHOOK_DELIVERIES__FK_WD_EVENT, null) }

    /**
     * Get the implicit join path to the
     * <code>public.webhook_subscriptions</code> table.
     */
    fun webhookSubscriptions(): WebhookSubscriptionsPath = webhookSubscriptions
    val webhookSubscriptions: WebhookSubscriptionsPath by lazy { WebhookSubscriptionsPath(this, WEBHOOK_DELIVERIES__FK_WD_SUBSCRIPTION, null) }
    override fun `as`(alias: String): WebhookDeliveries = WebhookDeliveries(DSL.name(alias), this)
    override fun `as`(alias: Name): WebhookDeliveries = WebhookDeliveries(alias, this)
    override fun `as`(alias: Table<*>): WebhookDeliveries = WebhookDeliveries(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WebhookDeliveries = WebhookDeliveries(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WebhookDeliveries = WebhookDeliveries(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WebhookDeliveries = WebhookDeliveries(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): WebhookDeliveries = WebhookDeliveries(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): WebhookDeliveries = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): WebhookDeliveries = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): WebhookDeliveries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): WebhookDeliveries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): WebhookDeliveries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): WebhookDeliveries = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): WebhookDeliveries = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): WebhookDeliveries = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): WebhookDeliveries = where(DSL.notExists(select))
}
