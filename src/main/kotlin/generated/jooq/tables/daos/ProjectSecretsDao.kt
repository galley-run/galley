/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.tables.ProjectSecrets
import generated.jooq.tables.records.ProjectSecretsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectSecretsDao(configuration: Configuration?) : DAOImpl<ProjectSecretsRecord, generated.jooq.tables.pojos.ProjectSecrets, UUID>(ProjectSecrets.PROJECT_SECRETS, generated.jooq.tables.pojos.ProjectSecrets::class.java, configuration) {

    /**
     * Create a new ProjectSecretsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.ProjectSecrets): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.ProjectSecrets? = fetchOne(ProjectSecrets.PROJECT_SECRETS.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>charter_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCharterId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.CHARTER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>charter_id IN (values)</code>
     */
    fun fetchByCharterId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.CHARTER_ID, *values)

    /**
     * Fetch records that have <code>project_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProjectId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.PROJECT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>project_id IN (values)</code>
     */
    fun fetchByProjectId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.PROJECT_ID, *values)

    /**
     * Fetch records that have <code>crew_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCrewId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.CREW_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>crew_id IN (values)</code>
     */
    fun fetchByCrewId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.CREW_ID, *values)

    /**
     * Fetch records that have <code>key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKey(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.KEY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>key IN (values)</code>
     */
    fun fetchByKey(vararg values: String): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.KEY, *values)

    /**
     * Fetch records that have <code>vault_mount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVaultMount(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.VAULT_MOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vault_mount IN (values)</code>
     */
    fun fetchByVaultMount(vararg values: String): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.VAULT_MOUNT, *values)

    /**
     * Fetch records that have <code>vault_path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVaultPath(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.VAULT_PATH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vault_path IN (values)</code>
     */
    fun fetchByVaultPath(vararg values: String): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.VAULT_PATH, *values)

    /**
     * Fetch records that have <code>kv_version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKvVersion(lowerInclusive: Int?, upperInclusive: Int?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.KV_VERSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>kv_version IN (values)</code>
     */
    fun fetchByKvVersion(vararg values: Int): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.KV_VERSION, *values.toTypedArray())

    /**
     * Fetch records that have <code>key_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKeyId(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.KEY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>key_id IN (values)</code>
     */
    fun fetchByKeyId(vararg values: String): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.KEY_ID, *values)

    /**
     * Fetch records that have <code>fingerprint BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFingerprint(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.FINGERPRINT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>fingerprint IN (values)</code>
     */
    fun fetchByFingerprint(vararg values: String): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.FINGERPRINT, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.UPDATED_AT, *values)

    /**
     * Fetch records that have <code>expires_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfExpiresAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.ProjectSecrets> = fetchRange(ProjectSecrets.PROJECT_SECRETS.EXPIRES_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>expires_at IN (values)</code>
     */
    fun fetchByExpiresAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.ProjectSecrets> = fetch(ProjectSecrets.PROJECT_SECRETS.EXPIRES_AT, *values)
}
