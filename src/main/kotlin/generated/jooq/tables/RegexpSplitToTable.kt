/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.tables.records.RegexpSplitToTableRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.postgres.extensions.bindings.CitextBinding


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class RegexpSplitToTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RegexpSplitToTableRecord>?,
    parentPath: InverseForeignKey<out Record, RegexpSplitToTableRecord>?,
    aliased: Table<RegexpSplitToTableRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RegexpSplitToTableRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.regexp_split_to_table</code>
         */
        val REGEXP_SPLIT_TO_TABLE: RegexpSplitToTable = RegexpSplitToTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RegexpSplitToTableRecord> = RegexpSplitToTableRecord::class.java

    /**
     * The column
     * <code>public.regexp_split_to_table.regexp_split_to_table</code>.
     */
    val REGEXP_SPLIT_TO_TABLE_: TableField<RegexpSplitToTableRecord, String?> = createField(DSL.name("regexp_split_to_table"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<RegexpSplitToTableRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, DefaultDataType.getDefaultDataType("\"public\".\"citext\"").asConvertedDataType(CitextBinding())),
        DSL.value(null, DefaultDataType.getDefaultDataType("\"public\".\"citext\"").asConvertedDataType(CitextBinding()))
    ), null)
    private constructor(alias: Name, aliased: Table<RegexpSplitToTableRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>public.regexp_split_to_table</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.regexp_split_to_table</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.regexp_split_to_table</code> table reference
     */
    constructor(): this(DSL.name("regexp_split_to_table"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): RegexpSplitToTable = RegexpSplitToTable(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): RegexpSplitToTable = RegexpSplitToTable(alias, this, parameters)
    override fun `as`(alias: Table<*>): RegexpSplitToTable = RegexpSplitToTable(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): RegexpSplitToTable = RegexpSplitToTable(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RegexpSplitToTable = RegexpSplitToTable(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RegexpSplitToTable = RegexpSplitToTable(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          __1: String?
        , __2: String?
    ): RegexpSplitToTable = RegexpSplitToTable(DSL.name("regexp_split_to_table"), null, arrayOf(
        DSL.value(__1, DefaultDataType.getDefaultDataType("\"public\".\"citext\"").asConvertedDataType(CitextBinding())),
        DSL.value(__2, DefaultDataType.getDefaultDataType("\"public\".\"citext\"").asConvertedDataType(CitextBinding()))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          __1: Field<String?>
        , __2: Field<String?>
    ): RegexpSplitToTable = RegexpSplitToTable(DSL.name("regexp_split_to_table"), null, arrayOf(
        __1,
        __2
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
