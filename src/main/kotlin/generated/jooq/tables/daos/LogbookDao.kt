/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.tables.Logbook
import generated.jooq.tables.records.LogbookRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class LogbookDao(configuration: Configuration?) : DAOImpl<LogbookRecord, generated.jooq.tables.pojos.Logbook, UUID>(Logbook.LOGBOOK, generated.jooq.tables.pojos.Logbook::class.java, configuration) {

    /**
     * Create a new LogbookDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.Logbook): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.Logbook? = fetchOne(Logbook.LOGBOOK.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>charter_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCharterId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.CHARTER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>charter_id IN (values)</code>
     */
    fun fetchByCharterId(vararg values: UUID): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.CHARTER_ID, *values)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: UUID): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.USER_ID, *values)

    /**
     * Fetch records that have <code>action BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAction(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.ACTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>action IN (values)</code>
     */
    fun fetchByAction(vararg values: String): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.ACTION, *values)

    /**
     * Fetch records that have <code>object_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfObjectType(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.OBJECT_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>object_type IN (values)</code>
     */
    fun fetchByObjectType(vararg values: String): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.OBJECT_TYPE, *values)

    /**
     * Fetch records that have <code>object_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfObjectId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.OBJECT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>object_id IN (values)</code>
     */
    fun fetchByObjectId(vararg values: UUID): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.OBJECT_ID, *values)

    /**
     * Fetch records that have <code>details BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDetails(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.DETAILS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>details IN (values)</code>
     */
    fun fetchByDetails(vararg values: JSONB): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.DETAILS, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Logbook> = fetchRange(Logbook.LOGBOOK.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Logbook> = fetch(Logbook.LOGBOOK.CREATED_AT, *values)
}
