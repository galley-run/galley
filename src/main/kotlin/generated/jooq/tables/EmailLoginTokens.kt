/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.indexes.IDX_EMAIL_LOGIN_TOKENS_ACTIVE
import generated.jooq.indexes.IDX_EMAIL_LOGIN_TOKENS_EMAIL
import generated.jooq.indexes.IDX_EMAIL_LOGIN_TOKENS_EXPIRES
import generated.jooq.indexes.IDX_EMAIL_LOGIN_TOKENS_LOOKUP
import generated.jooq.indexes.IDX_EMAIL_LOGIN_TOKENS_USED
import generated.jooq.indexes.IDX_EMAIL_LOGIN_TOKENS_USER
import generated.jooq.keys.EMAIL_LOGIN_TOKENS_PKEY
import generated.jooq.keys.EMAIL_LOGIN_TOKENS_TOKEN_HASH_KEY
import generated.jooq.keys.EMAIL_LOGIN_TOKENS__FK_EMAIL_LOGIN_USER
import generated.jooq.tables.Users.UsersPath
import generated.jooq.tables.records.EmailLoginTokensRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.postgres.extensions.bindings.CitextBinding
import org.jooq.postgres.extensions.bindings.InetBinding
import org.jooq.postgres.extensions.types.Inet
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class EmailLoginTokens(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, EmailLoginTokensRecord>?,
  parentPath: InverseForeignKey<out Record, EmailLoginTokensRecord>?,
  aliased: Table<EmailLoginTokensRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<EmailLoginTokensRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.email_login_tokens</code>
     */
    val EMAIL_LOGIN_TOKENS: EmailLoginTokens = EmailLoginTokens()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<EmailLoginTokensRecord> = EmailLoginTokensRecord::class.java

  /**
   * The column <code>public.email_login_tokens.id</code>.
   */
  val ID: TableField<EmailLoginTokensRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /**
   * The column <code>public.email_login_tokens.user_id</code>.
   */
  val USER_ID: TableField<EmailLoginTokensRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.email_login_tokens.email</code>.
   */
  val EMAIL: TableField<EmailLoginTokensRecord, String?> =
    createField(DSL.name("email"), DefaultDataType.getDefaultDataType("\"public\".\"citext\"").nullable(false), this, "", CitextBinding())

  /**
   * The column <code>public.email_login_tokens.token_hash</code>.
   */
  val TOKEN_HASH: TableField<EmailLoginTokensRecord, ByteArray?> =
    createField(DSL.name("token_hash"), SQLDataType.BLOB.nullable(false), this, "")

  /**
   * The column <code>public.email_login_tokens.purpose</code>.
   */
  val PURPOSE: TableField<EmailLoginTokensRecord, String?> =
    createField(
      DSL.name("purpose"),
      SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'magic_link'::text"), SQLDataType.CLOB)),
      this,
      "",
    )

  /**
   * The column <code>public.email_login_tokens.ip</code>.
   */
  val IP: TableField<EmailLoginTokensRecord, Inet?> =
    createField(DSL.name("ip"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "", InetBinding())

  /**
   * The column <code>public.email_login_tokens.user_agent</code>.
   */
  val USER_AGENT: TableField<EmailLoginTokensRecord, String?> = createField(DSL.name("user_agent"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.email_login_tokens.expires_at</code>.
   */
  val EXPIRES_AT: TableField<EmailLoginTokensRecord, OffsetDateTime?> =
    createField(DSL.name("expires_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

  /**
   * The column <code>public.email_login_tokens.used_at</code>.
   */
  val USED_AT: TableField<EmailLoginTokensRecord, OffsetDateTime?> =
    createField(DSL.name("used_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

  /**
   * The column <code>public.email_login_tokens.created_at</code>.
   */
  val CREATED_AT: TableField<EmailLoginTokensRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  private constructor(alias: Name, aliased: Table<EmailLoginTokensRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<EmailLoginTokensRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<EmailLoginTokensRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.email_login_tokens</code> table reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.email_login_tokens</code> table reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.email_login_tokens</code> table reference
   */
  constructor() : this(DSL.name("email_login_tokens"), null)

  constructor(path: Table<out Record>, childPath: ForeignKey<out Record, EmailLoginTokensRecord>?, parentPath: InverseForeignKey<out Record, EmailLoginTokensRecord>?) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    EMAIL_LOGIN_TOKENS,
    null,
    null,
  )

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  open class EmailLoginTokensPath :
    EmailLoginTokens,
    Path<EmailLoginTokensRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, EmailLoginTokensRecord>?,
      parentPath: InverseForeignKey<out Record, EmailLoginTokensRecord>?,
    ) : super(path, childPath, parentPath)
    private constructor(alias: Name, aliased: Table<EmailLoginTokensRecord>) : super(alias, aliased)

    override fun `as`(alias: String): EmailLoginTokensPath = EmailLoginTokensPath(DSL.name(alias), this)

    override fun `as`(alias: Name): EmailLoginTokensPath = EmailLoginTokensPath(alias, this)

    override fun `as`(alias: Table<*>): EmailLoginTokensPath = EmailLoginTokensPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> =
    listOf(
      IDX_EMAIL_LOGIN_TOKENS_ACTIVE,
      IDX_EMAIL_LOGIN_TOKENS_EMAIL,
      IDX_EMAIL_LOGIN_TOKENS_EXPIRES,
      IDX_EMAIL_LOGIN_TOKENS_LOOKUP,
      IDX_EMAIL_LOGIN_TOKENS_USED,
      IDX_EMAIL_LOGIN_TOKENS_USER,
    )

  override fun getPrimaryKey(): UniqueKey<EmailLoginTokensRecord> = EMAIL_LOGIN_TOKENS_PKEY

  override fun getUniqueKeys(): List<UniqueKey<EmailLoginTokensRecord>> = listOf(EMAIL_LOGIN_TOKENS_TOKEN_HASH_KEY)

  override fun getReferences(): List<ForeignKey<EmailLoginTokensRecord, *>> = listOf(EMAIL_LOGIN_TOKENS__FK_EMAIL_LOGIN_USER)

  /**
   * Get the implicit join path to the <code>public.users</code> table.
   */
  fun users(): UsersPath = users

  val users: UsersPath by lazy { UsersPath(this, EMAIL_LOGIN_TOKENS__FK_EMAIL_LOGIN_USER, null) }

  override fun `as`(alias: String): EmailLoginTokens = EmailLoginTokens(DSL.name(alias), this)

  override fun `as`(alias: Name): EmailLoginTokens = EmailLoginTokens(alias, this)

  override fun `as`(alias: Table<*>): EmailLoginTokens = EmailLoginTokens(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): EmailLoginTokens = EmailLoginTokens(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): EmailLoginTokens = EmailLoginTokens(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): EmailLoginTokens = EmailLoginTokens(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): EmailLoginTokens = EmailLoginTokens(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): EmailLoginTokens = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): EmailLoginTokens = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): EmailLoginTokens = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): EmailLoginTokens = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): EmailLoginTokens = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): EmailLoginTokens = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): EmailLoginTokens = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): EmailLoginTokens = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): EmailLoginTokens = where(DSL.notExists(select))
}
