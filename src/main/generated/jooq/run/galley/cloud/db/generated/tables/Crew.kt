/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.enums.MemberStatus
import run.galley.cloud.db.generated.enums.VesselRole
import run.galley.cloud.db.generated.indexes.IDX_CREW_ACTIVE
import run.galley.cloud.db.generated.indexes.IDX_CREW_STATUS
import run.galley.cloud.db.generated.indexes.IDX_CREW_USER
import run.galley.cloud.db.generated.indexes.IDX_CREW_VESSEL
import run.galley.cloud.db.generated.keys.CREW_CHARTER_MEMBER__FK_CCM_CREW
import run.galley.cloud.db.generated.keys.CREW_PKEY
import run.galley.cloud.db.generated.keys.CREW__FK_CREW_USER
import run.galley.cloud.db.generated.keys.CREW__FK_CREW_VESSEL
import run.galley.cloud.db.generated.keys.LOCKER__FK_LOCKER_CREW
import run.galley.cloud.db.generated.keys.PROJECT_CONFIGS__FK_CONFIGS_CREW
import run.galley.cloud.db.generated.keys.PROJECT_SECRETS__FK_SECRETS_CREW
import run.galley.cloud.db.generated.keys.UQ_CREW_USER_VESSEL
import run.galley.cloud.db.generated.tables.Charters.ChartersPath
import run.galley.cloud.db.generated.tables.CrewCharterMember.CrewCharterMemberPath
import run.galley.cloud.db.generated.tables.Locker.LockerPath
import run.galley.cloud.db.generated.tables.ProjectConfigs.ProjectConfigsPath
import run.galley.cloud.db.generated.tables.ProjectSecrets.ProjectSecretsPath
import run.galley.cloud.db.generated.tables.Users.UsersPath
import run.galley.cloud.db.generated.tables.Vessels.VesselsPath
import run.galley.cloud.db.generated.tables.records.CrewRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Crew(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CrewRecord>?,
    parentPath: InverseForeignKey<out Record, CrewRecord>?,
    aliased: Table<CrewRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CrewRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.crew</code>
         */
        val CREW: Crew = Crew()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CrewRecord> = CrewRecord::class.java

    /**
     * The column <code>public.crew.id</code>.
     */
    val ID: TableField<CrewRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.crew.user_id</code>.
     */
    val USER_ID: TableField<CrewRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.crew.vessel_id</code>.
     */
    val VESSEL_ID: TableField<CrewRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.crew.vessel_role</code>.
     */
    val VESSEL_ROLE: TableField<CrewRecord, VesselRole?> = createField(DSL.name("vessel_role"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'captain'::vessel_role"), SQLDataType.VARCHAR)).asEnumDataType(VesselRole::class.java), this, "")

    /**
     * The column <code>public.crew.status</code>.
     */
    val STATUS: TableField<CrewRecord, MemberStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'invited'::member_status"), SQLDataType.VARCHAR)).asEnumDataType(MemberStatus::class.java), this, "")

    /**
     * The column <code>public.crew.created_at</code>.
     */
    val CREATED_AT: TableField<CrewRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.crew.activated_at</code>.
     */
    val ACTIVATED_AT: TableField<CrewRecord, OffsetDateTime?> = createField(DSL.name("activated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.crew.deleted_at</code>.
     */
    val DELETED_AT: TableField<CrewRecord, OffsetDateTime?> = createField(DSL.name("deleted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<CrewRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CrewRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CrewRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.crew</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.crew</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.crew</code> table reference
     */
    constructor(): this(DSL.name("crew"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CrewRecord>?, parentPath: InverseForeignKey<out Record, CrewRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, CREW, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class CrewPath : Crew, Path<CrewRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CrewRecord>?, parentPath: InverseForeignKey<out Record, CrewRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<CrewRecord>): super(alias, aliased)
        override fun `as`(alias: String): CrewPath = CrewPath(DSL.name(alias), this)
        override fun `as`(alias: Name): CrewPath = CrewPath(alias, this)
        override fun `as`(alias: Table<*>): CrewPath = CrewPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_CREW_ACTIVE, IDX_CREW_STATUS, IDX_CREW_USER, IDX_CREW_VESSEL)
    override fun getPrimaryKey(): UniqueKey<CrewRecord> = CREW_PKEY
    override fun getUniqueKeys(): List<UniqueKey<CrewRecord>> = listOf(UQ_CREW_USER_VESSEL)
    override fun getReferences(): List<ForeignKey<CrewRecord, *>> = listOf(CREW__FK_CREW_USER, CREW__FK_CREW_VESSEL)

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, CREW__FK_CREW_USER, null) }

    /**
     * Get the implicit join path to the <code>public.vessels</code> table.
     */
    fun vessels(): VesselsPath = vessels
    val vessels: VesselsPath by lazy { VesselsPath(this, CREW__FK_CREW_VESSEL, null) }

    private lateinit var _crewCharterMember: CrewCharterMemberPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.crew_charter_member</code> table
     */
    fun crewCharterMember(): CrewCharterMemberPath {
        if (!this::_crewCharterMember.isInitialized)
            _crewCharterMember = CrewCharterMemberPath(this, null, CREW_CHARTER_MEMBER__FK_CCM_CREW.inverseKey)

        return _crewCharterMember;
    }

    val crewCharterMember: CrewCharterMemberPath
        get(): CrewCharterMemberPath = crewCharterMember()

    private lateinit var _projectConfigs: ProjectConfigsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_configs</code> table
     */
    fun projectConfigs(): ProjectConfigsPath {
        if (!this::_projectConfigs.isInitialized)
            _projectConfigs = ProjectConfigsPath(this, null, PROJECT_CONFIGS__FK_CONFIGS_CREW.inverseKey)

        return _projectConfigs;
    }

    val projectConfigs: ProjectConfigsPath
        get(): ProjectConfigsPath = projectConfigs()

    private lateinit var _locker: LockerPath

    /**
     * Get the implicit to-many join path to the <code>public.locker</code>
     * table
     */
    fun locker(): LockerPath {
        if (!this::_locker.isInitialized)
            _locker = LockerPath(this, null, LOCKER__FK_LOCKER_CREW.inverseKey)

        return _locker;
    }

    val locker: LockerPath
        get(): LockerPath = locker()

    private lateinit var _projectSecrets: ProjectSecretsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_secrets</code> table
     */
    fun projectSecrets(): ProjectSecretsPath {
        if (!this::_projectSecrets.isInitialized)
            _projectSecrets = ProjectSecretsPath(this, null, PROJECT_SECRETS__FK_SECRETS_CREW.inverseKey)

        return _projectSecrets;
    }

    val projectSecrets: ProjectSecretsPath
        get(): ProjectSecretsPath = projectSecrets()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.charters</code> table
     */
    val charters: ChartersPath
        get(): ChartersPath = crewCharterMember().charters()
    override fun `as`(alias: String): Crew = Crew(DSL.name(alias), this)
    override fun `as`(alias: Name): Crew = Crew(alias, this)
    override fun `as`(alias: Table<*>): Crew = Crew(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Crew = Crew(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Crew = Crew(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Crew = Crew(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Crew = Crew(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Crew = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Crew = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Crew = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Crew = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Crew = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Crew = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Crew = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Crew = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Crew = where(DSL.notExists(select))
}
