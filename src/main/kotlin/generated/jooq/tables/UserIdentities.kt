/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.indexes.IDX_USER_IDENTITIES_EMAIL
import generated.jooq.indexes.IDX_USER_IDENTITIES_EMAIL_TRGM
import generated.jooq.indexes.IDX_USER_IDENTITIES_PROVIDER_SUBJECT
import generated.jooq.indexes.IDX_USER_IDENTITIES_USER_PROVIDER
import generated.jooq.keys.UQ_USER_IDENTITIES_PROVIDER_SUBJECT
import generated.jooq.keys.USER_IDENTITIES_PKEY
import generated.jooq.keys.USER_IDENTITIES__FK_USER_IDENTITIES_USER
import generated.jooq.tables.Users.UsersPath
import generated.jooq.tables.records.UserIdentitiesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.postgres.extensions.bindings.CitextBinding
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class UserIdentities(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, UserIdentitiesRecord>?,
  parentPath: InverseForeignKey<out Record, UserIdentitiesRecord>?,
  aliased: Table<UserIdentitiesRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<UserIdentitiesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.user_identities</code>
     */
    val USER_IDENTITIES: UserIdentities = UserIdentities()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<UserIdentitiesRecord> = UserIdentitiesRecord::class.java

  /**
   * The column <code>public.user_identities.id</code>.
   */
  val ID: TableField<UserIdentitiesRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /**
   * The column <code>public.user_identities.user_id</code>.
   */
  val USER_ID: TableField<UserIdentitiesRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

  /**
   * The column <code>public.user_identities.provider</code>.
   */
  val PROVIDER: TableField<UserIdentitiesRecord, String?> = createField(DSL.name("provider"), SQLDataType.CLOB.nullable(false), this, "")

  /**
   * The column <code>public.user_identities.subject</code>.
   */
  val SUBJECT: TableField<UserIdentitiesRecord, String?> = createField(DSL.name("subject"), SQLDataType.CLOB.nullable(false), this, "")

  /**
   * The column <code>public.user_identities.email</code>.
   */
  val EMAIL: TableField<UserIdentitiesRecord, String?> =
    createField(DSL.name("email"), DefaultDataType.getDefaultDataType("\"public\".\"citext\""), this, "", CitextBinding())

  /**
   * The column <code>public.user_identities.raw_profile</code>.
   */
  val RAW_PROFILE: TableField<UserIdentitiesRecord, JSONB?> = createField(DSL.name("raw_profile"), SQLDataType.JSONB, this, "")

  /**
   * The column <code>public.user_identities.created_at</code>.
   */
  val CREATED_AT: TableField<UserIdentitiesRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  private constructor(alias: Name, aliased: Table<UserIdentitiesRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<UserIdentitiesRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<UserIdentitiesRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.user_identities</code> table reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.user_identities</code> table reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.user_identities</code> table reference
   */
  constructor() : this(DSL.name("user_identities"), null)

  constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserIdentitiesRecord>?, parentPath: InverseForeignKey<out Record, UserIdentitiesRecord>?) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    USER_IDENTITIES,
    null,
    null,
  )

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  open class UserIdentitiesPath :
    UserIdentities,
    Path<UserIdentitiesRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, UserIdentitiesRecord>?,
      parentPath: InverseForeignKey<out Record, UserIdentitiesRecord>?,
    ) : super(path, childPath, parentPath)
    private constructor(alias: Name, aliased: Table<UserIdentitiesRecord>) : super(alias, aliased)

    override fun `as`(alias: String): UserIdentitiesPath = UserIdentitiesPath(DSL.name(alias), this)

    override fun `as`(alias: Name): UserIdentitiesPath = UserIdentitiesPath(alias, this)

    override fun `as`(alias: Table<*>): UserIdentitiesPath = UserIdentitiesPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> =
    listOf(
      IDX_USER_IDENTITIES_EMAIL,
      IDX_USER_IDENTITIES_EMAIL_TRGM,
      IDX_USER_IDENTITIES_PROVIDER_SUBJECT,
      IDX_USER_IDENTITIES_USER_PROVIDER,
    )

  override fun getPrimaryKey(): UniqueKey<UserIdentitiesRecord> = USER_IDENTITIES_PKEY

  override fun getUniqueKeys(): List<UniqueKey<UserIdentitiesRecord>> = listOf(UQ_USER_IDENTITIES_PROVIDER_SUBJECT)

  override fun getReferences(): List<ForeignKey<UserIdentitiesRecord, *>> = listOf(USER_IDENTITIES__FK_USER_IDENTITIES_USER)

  /**
   * Get the implicit join path to the <code>public.users</code> table.
   */
  fun users(): UsersPath = users

  val users: UsersPath by lazy { UsersPath(this, USER_IDENTITIES__FK_USER_IDENTITIES_USER, null) }

  override fun `as`(alias: String): UserIdentities = UserIdentities(DSL.name(alias), this)

  override fun `as`(alias: Name): UserIdentities = UserIdentities(alias, this)

  override fun `as`(alias: Table<*>): UserIdentities = UserIdentities(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): UserIdentities = UserIdentities(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): UserIdentities = UserIdentities(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): UserIdentities = UserIdentities(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): UserIdentities = UserIdentities(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): UserIdentities = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): UserIdentities = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): UserIdentities = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): UserIdentities = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): UserIdentities = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): UserIdentities = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): UserIdentities = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): UserIdentities = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): UserIdentities = where(DSL.notExists(select))
}
