/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.indexes.IDX_WEBAUTHN_USER
import generated.jooq.keys.WEBAUTHN_CREDENTIALS_CREDENTIAL_ID_KEY
import generated.jooq.keys.WEBAUTHN_CREDENTIALS_PKEY
import generated.jooq.keys.WEBAUTHN_CREDENTIALS__FK_WEBAUTHN_USER
import generated.jooq.tables.Users.UsersPath
import generated.jooq.tables.records.WebauthnCredentialsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class WebauthnCredentials(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, WebauthnCredentialsRecord>?,
  parentPath: InverseForeignKey<out Record, WebauthnCredentialsRecord>?,
  aliased: Table<WebauthnCredentialsRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<WebauthnCredentialsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.webauthn_credentials</code>
     */
    val WEBAUTHN_CREDENTIALS: WebauthnCredentials = WebauthnCredentials()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<WebauthnCredentialsRecord> = WebauthnCredentialsRecord::class.java

  /**
   * The column <code>public.webauthn_credentials.id</code>.
   */
  val ID: TableField<WebauthnCredentialsRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /**
   * The column <code>public.webauthn_credentials.user_id</code>.
   */
  val USER_ID: TableField<WebauthnCredentialsRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

  /**
   * The column <code>public.webauthn_credentials.credential_id</code>.
   */
  val CREDENTIAL_ID: TableField<WebauthnCredentialsRecord, ByteArray?> =
    createField(DSL.name("credential_id"), SQLDataType.BLOB.nullable(false), this, "")

  /**
   * The column <code>public.webauthn_credentials.public_key</code>.
   */
  val PUBLIC_KEY: TableField<WebauthnCredentialsRecord, ByteArray?> =
    createField(DSL.name("public_key"), SQLDataType.BLOB.nullable(false), this, "")

  /**
   * The column <code>public.webauthn_credentials.aaguid</code>.
   */
  val AAGUID: TableField<WebauthnCredentialsRecord, UUID?> = createField(DSL.name("aaguid"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.webauthn_credentials.sign_count</code>.
   */
  val SIGN_COUNT: TableField<WebauthnCredentialsRecord, Long?> =
    createField(
      DSL.name("sign_count"),
      SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)),
      this,
      "",
    )

  /**
   * The column <code>public.webauthn_credentials.transports</code>.
   */
  val TRANSPORTS: TableField<WebauthnCredentialsRecord, Array<String?>?> =
    createField(DSL.name("transports"), SQLDataType.CLOB.array(), this, "")

  /**
   * The column <code>public.webauthn_credentials.is_discoverable</code>.
   */
  val IS_DISCOVERABLE: TableField<WebauthnCredentialsRecord, Boolean?> =
    createField(DSL.name("is_discoverable"), SQLDataType.BOOLEAN, this, "")

  /**
   * The column <code>public.webauthn_credentials.is_backup_eligible</code>.
   */
  val IS_BACKUP_ELIGIBLE: TableField<WebauthnCredentialsRecord, Boolean?> =
    createField(DSL.name("is_backup_eligible"), SQLDataType.BOOLEAN, this, "")

  /**
   * The column <code>public.webauthn_credentials.name</code>.
   */
  val NAME: TableField<WebauthnCredentialsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.webauthn_credentials.last_used_at</code>.
   */
  val LAST_USED_AT: TableField<WebauthnCredentialsRecord, OffsetDateTime?> =
    createField(DSL.name("last_used_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

  /**
   * The column <code>public.webauthn_credentials.created_at</code>.
   */
  val CREATED_AT: TableField<WebauthnCredentialsRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  private constructor(alias: Name, aliased: Table<WebauthnCredentialsRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<WebauthnCredentialsRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<WebauthnCredentialsRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.webauthn_credentials</code> table
   * reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.webauthn_credentials</code> table
   * reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.webauthn_credentials</code> table reference
   */
  constructor() : this(DSL.name("webauthn_credentials"), null)

  constructor(path: Table<out Record>, childPath: ForeignKey<out Record, WebauthnCredentialsRecord>?, parentPath: InverseForeignKey<out Record, WebauthnCredentialsRecord>?) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    WEBAUTHN_CREDENTIALS,
    null,
    null,
  )

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  open class WebauthnCredentialsPath :
    WebauthnCredentials,
    Path<WebauthnCredentialsRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, WebauthnCredentialsRecord>?,
      parentPath: InverseForeignKey<out Record, WebauthnCredentialsRecord>?,
    ) : super(path, childPath, parentPath)
    private constructor(alias: Name, aliased: Table<WebauthnCredentialsRecord>) : super(alias, aliased)

    override fun `as`(alias: String): WebauthnCredentialsPath = WebauthnCredentialsPath(DSL.name(alias), this)

    override fun `as`(alias: Name): WebauthnCredentialsPath = WebauthnCredentialsPath(alias, this)

    override fun `as`(alias: Table<*>): WebauthnCredentialsPath = WebauthnCredentialsPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> = listOf(IDX_WEBAUTHN_USER)

  override fun getPrimaryKey(): UniqueKey<WebauthnCredentialsRecord> = WEBAUTHN_CREDENTIALS_PKEY

  override fun getUniqueKeys(): List<UniqueKey<WebauthnCredentialsRecord>> = listOf(WEBAUTHN_CREDENTIALS_CREDENTIAL_ID_KEY)

  override fun getReferences(): List<ForeignKey<WebauthnCredentialsRecord, *>> = listOf(WEBAUTHN_CREDENTIALS__FK_WEBAUTHN_USER)

  /**
   * Get the implicit join path to the <code>public.users</code> table.
   */
  fun users(): UsersPath = users

  val users: UsersPath by lazy { UsersPath(this, WEBAUTHN_CREDENTIALS__FK_WEBAUTHN_USER, null) }

  override fun `as`(alias: String): WebauthnCredentials = WebauthnCredentials(DSL.name(alias), this)

  override fun `as`(alias: Name): WebauthnCredentials = WebauthnCredentials(alias, this)

  override fun `as`(alias: Table<*>): WebauthnCredentials = WebauthnCredentials(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): WebauthnCredentials = WebauthnCredentials(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): WebauthnCredentials = WebauthnCredentials(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): WebauthnCredentials = WebauthnCredentials(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): WebauthnCredentials =
    WebauthnCredentials(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): WebauthnCredentials = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): WebauthnCredentials = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): WebauthnCredentials = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): WebauthnCredentials = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): WebauthnCredentials = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): WebauthnCredentials = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): WebauthnCredentials = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): WebauthnCredentials = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): WebauthnCredentials = where(DSL.notExists(select))
}
