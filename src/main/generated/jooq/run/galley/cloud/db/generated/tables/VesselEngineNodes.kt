/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.enums.NodeDeployMode
import run.galley.cloud.db.generated.enums.NodeType
import run.galley.cloud.db.generated.indexes.IDX_NODES_ENGINE
import run.galley.cloud.db.generated.indexes.IDX_NODES_PROVISIONING_TIME
import run.galley.cloud.db.generated.indexes.IDX_NODES_REGION
import run.galley.cloud.db.generated.indexes.IDX_NODES_TYPE_MODE
import run.galley.cloud.db.generated.indexes.IDX_NODES_VESSEL
import run.galley.cloud.db.generated.indexes.UQ_NODES_IP
import run.galley.cloud.db.generated.keys.VESSEL_ENGINE_NODES_PKEY
import run.galley.cloud.db.generated.keys.VESSEL_ENGINE_NODES__FK_NODES_ENGINE
import run.galley.cloud.db.generated.keys.VESSEL_ENGINE_NODES__FK_NODES_PROVISIONING_LOCKER
import run.galley.cloud.db.generated.keys.VESSEL_ENGINE_NODES__FK_NODES_REGION
import run.galley.cloud.db.generated.keys.VESSEL_ENGINE_NODES__FK_NODES_VESSEL
import run.galley.cloud.db.generated.tables.Locker.LockerPath
import run.galley.cloud.db.generated.tables.VesselEngineRegions.VesselEngineRegionsPath
import run.galley.cloud.db.generated.tables.VesselEngines.VesselEnginesPath
import run.galley.cloud.db.generated.tables.Vessels.VesselsPath
import run.galley.cloud.db.generated.tables.records.VesselEngineNodesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VesselEngineNodes(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VesselEngineNodesRecord>?,
    parentPath: InverseForeignKey<out Record, VesselEngineNodesRecord>?,
    aliased: Table<VesselEngineNodesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VesselEngineNodesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vessel_engine_nodes</code>
         */
        val VESSEL_ENGINE_NODES: VesselEngineNodes = VesselEngineNodes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VesselEngineNodesRecord> = VesselEngineNodesRecord::class.java

    /**
     * The column <code>public.vessel_engine_nodes.id</code>.
     */
    val ID: TableField<VesselEngineNodesRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.vessel_id</code>.
     */
    val VESSEL_ID: TableField<VesselEngineNodesRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.vessel_engine_id</code>.
     */
    val VESSEL_ENGINE_ID: TableField<VesselEngineNodesRecord, UUID?> = createField(DSL.name("vessel_engine_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>public.vessel_engine_nodes.vessel_engine_region_id</code>.
     */
    val VESSEL_ENGINE_REGION_ID: TableField<VesselEngineNodesRecord, UUID?> = createField(DSL.name("vessel_engine_region_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.node_type</code>.
     */
    val NODE_TYPE: TableField<VesselEngineNodesRecord, NodeType?> = createField(DSL.name("node_type"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'controller'::node_type"), SQLDataType.VARCHAR)).asEnumDataType(NodeType::class.java), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.deploy_mode</code>.
     */
    val DEPLOY_MODE: TableField<VesselEngineNodesRecord, NodeDeployMode?> = createField(DSL.name("deploy_mode"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'applications_databases'::node_deploy_mode"), SQLDataType.VARCHAR)).asEnumDataType(NodeDeployMode::class.java), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.name</code>.
     */
    val NAME: TableField<VesselEngineNodesRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.ip_address</code>.
     */
    val IP_ADDRESS: TableField<VesselEngineNodesRecord, String?> = createField(DSL.name("ip_address"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.vessel_engine_nodes.cpu</code>.
     */
    val CPU: TableField<VesselEngineNodesRecord, String?> = createField(DSL.name("cpu"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.vessel_engine_nodes.memory</code>.
     */
    val MEMORY: TableField<VesselEngineNodesRecord, String?> = createField(DSL.name("memory"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.vessel_engine_nodes.storage</code>.
     */
    val STORAGE: TableField<VesselEngineNodesRecord, String?> = createField(DSL.name("storage"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.vessel_engine_nodes.provisioning</code>.
     */
    val PROVISIONING: TableField<VesselEngineNodesRecord, Boolean?> = createField(DSL.name("provisioning"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column
     * <code>public.vessel_engine_nodes.provisioning_locker_id</code>.
     */
    val PROVISIONING_LOCKER_ID: TableField<VesselEngineNodesRecord, UUID?> = createField(DSL.name("provisioning_locker_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>public.vessel_engine_nodes.provisioning_security_updates</code>.
     */
    val PROVISIONING_SECURITY_UPDATES: TableField<VesselEngineNodesRecord, Boolean?> = createField(DSL.name("provisioning_security_updates"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column
     * <code>public.vessel_engine_nodes.provisioning_security_updates_schedule</code>.
     */
    val PROVISIONING_SECURITY_UPDATES_SCHEDULE: TableField<VesselEngineNodesRecord, String?> = createField(DSL.name("provisioning_security_updates_schedule"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.vessel_engine_nodes.created_at</code>.
     */
    val CREATED_AT: TableField<VesselEngineNodesRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<VesselEngineNodesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VesselEngineNodesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VesselEngineNodesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vessel_engine_nodes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vessel_engine_nodes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vessel_engine_nodes</code> table reference
     */
    constructor(): this(DSL.name("vessel_engine_nodes"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VesselEngineNodesRecord>?, parentPath: InverseForeignKey<out Record, VesselEngineNodesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VESSEL_ENGINE_NODES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VesselEngineNodesPath : VesselEngineNodes, Path<VesselEngineNodesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VesselEngineNodesRecord>?, parentPath: InverseForeignKey<out Record, VesselEngineNodesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VesselEngineNodesRecord>): super(alias, aliased)
        override fun `as`(alias: String): VesselEngineNodesPath = VesselEngineNodesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VesselEngineNodesPath = VesselEngineNodesPath(alias, this)
        override fun `as`(alias: Table<*>): VesselEngineNodesPath = VesselEngineNodesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_NODES_ENGINE, IDX_NODES_PROVISIONING_TIME, IDX_NODES_REGION, IDX_NODES_TYPE_MODE, IDX_NODES_VESSEL, UQ_NODES_IP)
    override fun getPrimaryKey(): UniqueKey<VesselEngineNodesRecord> = VESSEL_ENGINE_NODES_PKEY
    override fun getReferences(): List<ForeignKey<VesselEngineNodesRecord, *>> = listOf(VESSEL_ENGINE_NODES__FK_NODES_ENGINE, VESSEL_ENGINE_NODES__FK_NODES_PROVISIONING_LOCKER, VESSEL_ENGINE_NODES__FK_NODES_REGION, VESSEL_ENGINE_NODES__FK_NODES_VESSEL)

    /**
     * Get the implicit join path to the <code>public.vessel_engines</code>
     * table.
     */
    fun vesselEngines(): VesselEnginesPath = vesselEngines
    val vesselEngines: VesselEnginesPath by lazy { VesselEnginesPath(this, VESSEL_ENGINE_NODES__FK_NODES_ENGINE, null) }

    /**
     * Get the implicit join path to the <code>public.locker</code> table.
     */
    fun locker(): LockerPath = locker
    val locker: LockerPath by lazy { LockerPath(this, VESSEL_ENGINE_NODES__FK_NODES_PROVISIONING_LOCKER, null) }

    /**
     * Get the implicit join path to the
     * <code>public.vessel_engine_regions</code> table.
     */
    fun vesselEngineRegions(): VesselEngineRegionsPath = vesselEngineRegions
    val vesselEngineRegions: VesselEngineRegionsPath by lazy { VesselEngineRegionsPath(this, VESSEL_ENGINE_NODES__FK_NODES_REGION, null) }

    /**
     * Get the implicit join path to the <code>public.vessels</code> table.
     */
    fun vessels(): VesselsPath = vessels
    val vessels: VesselsPath by lazy { VesselsPath(this, VESSEL_ENGINE_NODES__FK_NODES_VESSEL, null) }
    override fun `as`(alias: String): VesselEngineNodes = VesselEngineNodes(DSL.name(alias), this)
    override fun `as`(alias: Name): VesselEngineNodes = VesselEngineNodes(alias, this)
    override fun `as`(alias: Table<*>): VesselEngineNodes = VesselEngineNodes(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VesselEngineNodes = VesselEngineNodes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VesselEngineNodes = VesselEngineNodes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VesselEngineNodes = VesselEngineNodes(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VesselEngineNodes = VesselEngineNodes(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VesselEngineNodes = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VesselEngineNodes = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VesselEngineNodes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VesselEngineNodes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VesselEngineNodes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VesselEngineNodes = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VesselEngineNodes = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VesselEngineNodes = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VesselEngineNodes = where(DSL.notExists(select))
}
