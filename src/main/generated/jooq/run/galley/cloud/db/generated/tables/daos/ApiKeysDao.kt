/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables.daos


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import run.galley.cloud.db.generated.enums.ApiKeyStatus
import run.galley.cloud.db.generated.tables.ApiKeys
import run.galley.cloud.db.generated.tables.records.ApiKeysRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ApiKeysDao(configuration: Configuration?) : DAOImpl<ApiKeysRecord, run.galley.cloud.db.generated.tables.pojos.ApiKeys, UUID>(ApiKeys.API_KEYS, run.galley.cloud.db.generated.tables.pojos.ApiKeys::class.java, configuration) {

    /**
     * Create a new ApiKeysDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: run.galley.cloud.db.generated.tables.pojos.ApiKeys): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): run.galley.cloud.db.generated.tables.pojos.ApiKeys? = fetchOne(ApiKeys.API_KEYS.ID, value)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: UUID?, upperInclusive: UUID?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: UUID): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.USER_ID, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.NAME, *values)

    /**
     * Fetch records that have <code>prefix BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPrefix(lowerInclusive: String?, upperInclusive: String?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.PREFIX, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>prefix IN (values)</code>
     */
    fun fetchByPrefix(vararg values: String): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.PREFIX, *values)

    /**
     * Fetch a unique record that has <code>prefix = value</code>
     */
    fun fetchOneByPrefix(value: String): run.galley.cloud.db.generated.tables.pojos.ApiKeys? = fetchOne(ApiKeys.API_KEYS.PREFIX, value)

    /**
     * Fetch records that have <code>token_hash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTokenHash(lowerInclusive: ByteArray?, upperInclusive: ByteArray?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.TOKEN_HASH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>token_hash IN (values)</code>
     */
    fun fetchByTokenHash(vararg values: ByteArray): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.TOKEN_HASH, *values)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: ApiKeyStatus?, upperInclusive: ApiKeyStatus?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: ApiKeyStatus): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.STATUS, *values)

    /**
     * Fetch records that have <code>last_used_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUsedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.LAST_USED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_used_at IN (values)</code>
     */
    fun fetchByLastUsedAt(vararg values: OffsetDateTime): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.LAST_USED_AT, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetchRange(ApiKeys.API_KEYS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<run.galley.cloud.db.generated.tables.pojos.ApiKeys> = fetch(ApiKeys.API_KEYS.CREATED_AT, *values)
}
