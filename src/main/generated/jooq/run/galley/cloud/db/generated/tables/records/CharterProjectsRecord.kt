/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables.records


import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl

import run.galley.cloud.db.generated.tables.CharterProjects


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class CharterProjectsRecord() : UpdatableRecordImpl<CharterProjectsRecord>(CharterProjects.CHARTER_PROJECTS) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var charterId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var name: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var environment: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var purpose: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var deletedAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised CharterProjectsRecord
     */
    constructor(id: UUID? = null, charterId: UUID? = null, name: String? = null, environment: String? = null, purpose: String? = null, deletedAt: OffsetDateTime? = null): this() {
        this.id = id
        this.charterId = charterId
        this.name = name
        this.environment = environment
        this.purpose = purpose
        this.deletedAt = deletedAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised CharterProjectsRecord
     */
    constructor(value: run.galley.cloud.db.generated.tables.pojos.CharterProjects?): this() {
        if (value != null) {
            this.id = value.id
            this.charterId = value.charterId
            this.name = value.name
            this.environment = value.environment
            this.purpose = value.purpose
            this.deletedAt = value.deletedAt
            resetTouchedOnNotNull()
        }
    }
}
