/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.indexes.IDX_DB_CHARTER
import run.galley.cloud.db.generated.indexes.IDX_DB_ENGINE_PLAN
import run.galley.cloud.db.generated.indexes.IDX_DB_PROJECT
import run.galley.cloud.db.generated.indexes.IDX_DB_VESSEL
import run.galley.cloud.db.generated.keys.PROJECT_DATABASES_PKEY
import run.galley.cloud.db.generated.keys.PROJECT_DATABASES__FK_DB_CHARTER
import run.galley.cloud.db.generated.keys.PROJECT_DATABASES__FK_DB_PROJECT
import run.galley.cloud.db.generated.keys.PROJECT_DATABASES__FK_DB_VESSEL
import run.galley.cloud.db.generated.tables.CharterProjects.CharterProjectsPath
import run.galley.cloud.db.generated.tables.Charters.ChartersPath
import run.galley.cloud.db.generated.tables.Vessels.VesselsPath
import run.galley.cloud.db.generated.tables.records.ProjectDatabasesRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectDatabases(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ProjectDatabasesRecord>?,
    parentPath: InverseForeignKey<out Record, ProjectDatabasesRecord>?,
    aliased: Table<ProjectDatabasesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ProjectDatabasesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.project_databases</code>
         */
        val PROJECT_DATABASES: ProjectDatabases = ProjectDatabases()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProjectDatabasesRecord> = ProjectDatabasesRecord::class.java

    /**
     * The column <code>public.project_databases.id</code>.
     */
    val ID: TableField<ProjectDatabasesRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.project_databases.vessel_id</code>.
     */
    val VESSEL_ID: TableField<ProjectDatabasesRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.project_databases.charter_id</code>.
     */
    val CHARTER_ID: TableField<ProjectDatabasesRecord, UUID?> = createField(DSL.name("charter_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.project_databases.project_id</code>.
     */
    val PROJECT_ID: TableField<ProjectDatabasesRecord, UUID?> = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.project_databases.engine</code>.
     */
    val ENGINE: TableField<ProjectDatabasesRecord, String?> = createField(DSL.name("engine"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.project_databases.plan</code>.
     */
    val PLAN: TableField<ProjectDatabasesRecord, String?> = createField(DSL.name("plan"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.project_databases.created_at</code>.
     */
    val CREATED_AT: TableField<ProjectDatabasesRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.project_databases.deleted_at</code>.
     */
    val DELETED_AT: TableField<ProjectDatabasesRecord, OffsetDateTime?> = createField(DSL.name("deleted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<ProjectDatabasesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ProjectDatabasesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ProjectDatabasesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.project_databases</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.project_databases</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.project_databases</code> table reference
     */
    constructor(): this(DSL.name("project_databases"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectDatabasesRecord>?, parentPath: InverseForeignKey<out Record, ProjectDatabasesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PROJECT_DATABASES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ProjectDatabasesPath : ProjectDatabases, Path<ProjectDatabasesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectDatabasesRecord>?, parentPath: InverseForeignKey<out Record, ProjectDatabasesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ProjectDatabasesRecord>): super(alias, aliased)
        override fun `as`(alias: String): ProjectDatabasesPath = ProjectDatabasesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ProjectDatabasesPath = ProjectDatabasesPath(alias, this)
        override fun `as`(alias: Table<*>): ProjectDatabasesPath = ProjectDatabasesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_DB_CHARTER, IDX_DB_ENGINE_PLAN, IDX_DB_PROJECT, IDX_DB_VESSEL)
    override fun getPrimaryKey(): UniqueKey<ProjectDatabasesRecord> = PROJECT_DATABASES_PKEY
    override fun getReferences(): List<ForeignKey<ProjectDatabasesRecord, *>> = listOf(PROJECT_DATABASES__FK_DB_CHARTER, PROJECT_DATABASES__FK_DB_PROJECT, PROJECT_DATABASES__FK_DB_VESSEL)

    /**
     * Get the implicit join path to the <code>public.charters</code> table.
     */
    fun charters(): ChartersPath = charters
    val charters: ChartersPath by lazy { ChartersPath(this, PROJECT_DATABASES__FK_DB_CHARTER, null) }

    /**
     * Get the implicit join path to the <code>public.charter_projects</code>
     * table.
     */
    fun charterProjects(): CharterProjectsPath = charterProjects
    val charterProjects: CharterProjectsPath by lazy { CharterProjectsPath(this, PROJECT_DATABASES__FK_DB_PROJECT, null) }

    /**
     * Get the implicit join path to the <code>public.vessels</code> table.
     */
    fun vessels(): VesselsPath = vessels
    val vessels: VesselsPath by lazy { VesselsPath(this, PROJECT_DATABASES__FK_DB_VESSEL, null) }
    override fun `as`(alias: String): ProjectDatabases = ProjectDatabases(DSL.name(alias), this)
    override fun `as`(alias: Name): ProjectDatabases = ProjectDatabases(alias, this)
    override fun `as`(alias: Table<*>): ProjectDatabases = ProjectDatabases(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ProjectDatabases = ProjectDatabases(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ProjectDatabases = ProjectDatabases(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ProjectDatabases = ProjectDatabases(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ProjectDatabases = ProjectDatabases(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ProjectDatabases = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ProjectDatabases = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ProjectDatabases = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ProjectDatabases = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ProjectDatabases = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ProjectDatabases = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ProjectDatabases = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ProjectDatabases = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ProjectDatabases = where(DSL.notExists(select))
}
