@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package generated.jooq.keys


import generated.jooq.tables.ApiKeys
import generated.jooq.tables.CharterBillingProfile
import generated.jooq.tables.CharterProjects
import generated.jooq.tables.Charters
import generated.jooq.tables.Crew
import generated.jooq.tables.CrewCharterMember
import generated.jooq.tables.EmailLoginTokens
import generated.jooq.tables.FlywaySchemaHistory
import generated.jooq.tables.Locker
import generated.jooq.tables.Logbook
import generated.jooq.tables.OutboxEvents
import generated.jooq.tables.ProjectApiGateway
import generated.jooq.tables.ProjectApplications
import generated.jooq.tables.ProjectConfigs
import generated.jooq.tables.ProjectDatabases
import generated.jooq.tables.ProjectSecrets
import generated.jooq.tables.Sessions
import generated.jooq.tables.SignUpInquiries
import generated.jooq.tables.UserIdentities
import generated.jooq.tables.Users
import generated.jooq.tables.VesselBillingProfile
import generated.jooq.tables.VesselEngineNodes
import generated.jooq.tables.VesselEngineRegions
import generated.jooq.tables.VesselEngines
import generated.jooq.tables.Vessels
import generated.jooq.tables.WebauthnCredentials
import generated.jooq.tables.WebhookDeliveries
import generated.jooq.tables.WebhookSubscriptions
import generated.jooq.tables.records.ApiKeysRecord
import generated.jooq.tables.records.CharterBillingProfileRecord
import generated.jooq.tables.records.CharterProjectsRecord
import generated.jooq.tables.records.ChartersRecord
import generated.jooq.tables.records.CrewCharterMemberRecord
import generated.jooq.tables.records.CrewRecord
import generated.jooq.tables.records.EmailLoginTokensRecord
import generated.jooq.tables.records.FlywaySchemaHistoryRecord
import generated.jooq.tables.records.LockerRecord
import generated.jooq.tables.records.LogbookRecord
import generated.jooq.tables.records.OutboxEventsRecord
import generated.jooq.tables.records.ProjectApiGatewayRecord
import generated.jooq.tables.records.ProjectApplicationsRecord
import generated.jooq.tables.records.ProjectConfigsRecord
import generated.jooq.tables.records.ProjectDatabasesRecord
import generated.jooq.tables.records.ProjectSecretsRecord
import generated.jooq.tables.records.SessionsRecord
import generated.jooq.tables.records.SignUpInquiriesRecord
import generated.jooq.tables.records.UserIdentitiesRecord
import generated.jooq.tables.records.UsersRecord
import generated.jooq.tables.records.VesselBillingProfileRecord
import generated.jooq.tables.records.VesselEngineNodesRecord
import generated.jooq.tables.records.VesselEngineRegionsRecord
import generated.jooq.tables.records.VesselEnginesRecord
import generated.jooq.tables.records.VesselsRecord
import generated.jooq.tables.records.WebauthnCredentialsRecord
import generated.jooq.tables.records.WebhookDeliveriesRecord
import generated.jooq.tables.records.WebhookSubscriptionsRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val API_KEYS_PKEY: UniqueKey<ApiKeysRecord> = Internal.createUniqueKey(ApiKeys.API_KEYS, DSL.name("api_keys_pkey"), arrayOf(ApiKeys.API_KEYS.ID), true)
val API_KEYS_PREFIX_KEY: UniqueKey<ApiKeysRecord> = Internal.createUniqueKey(ApiKeys.API_KEYS, DSL.name("api_keys_prefix_key"), arrayOf(ApiKeys.API_KEYS.PREFIX), true)
val CHARTER_BILLING_PROFILE_PKEY: UniqueKey<CharterBillingProfileRecord> = Internal.createUniqueKey(CharterBillingProfile.CHARTER_BILLING_PROFILE, DSL.name("charter_billing_profile_pkey"), arrayOf(CharterBillingProfile.CHARTER_BILLING_PROFILE.ID), true)
val UQ_CHARTER_BILLING_CHARTER: UniqueKey<CharterBillingProfileRecord> = Internal.createUniqueKey(CharterBillingProfile.CHARTER_BILLING_PROFILE, DSL.name("uq_charter_billing_charter"), arrayOf(CharterBillingProfile.CHARTER_BILLING_PROFILE.VESSEL_ID, CharterBillingProfile.CHARTER_BILLING_PROFILE.CHARTER_ID), true)
val CHARTER_PROJECTS_PKEY: UniqueKey<CharterProjectsRecord> = Internal.createUniqueKey(CharterProjects.CHARTER_PROJECTS, DSL.name("charter_projects_pkey"), arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true)
val CHARTERS_PKEY: UniqueKey<ChartersRecord> = Internal.createUniqueKey(Charters.CHARTERS, DSL.name("charters_pkey"), arrayOf(Charters.CHARTERS.ID), true)
val CREW_PKEY: UniqueKey<CrewRecord> = Internal.createUniqueKey(Crew.CREW, DSL.name("crew_pkey"), arrayOf(Crew.CREW.ID), true)
val UQ_CREW_USER_VESSEL: UniqueKey<CrewRecord> = Internal.createUniqueKey(Crew.CREW, DSL.name("uq_crew_user_vessel"), arrayOf(Crew.CREW.USER_ID, Crew.CREW.VESSEL_ID), true)
val CREW_CHARTER_MEMBER_PKEY: UniqueKey<CrewCharterMemberRecord> = Internal.createUniqueKey(CrewCharterMember.CREW_CHARTER_MEMBER, DSL.name("crew_charter_member_pkey"), arrayOf(CrewCharterMember.CREW_CHARTER_MEMBER.ID), true)
val UQ_CREW_CHARTER_MEMBER: UniqueKey<CrewCharterMemberRecord> = Internal.createUniqueKey(CrewCharterMember.CREW_CHARTER_MEMBER, DSL.name("uq_crew_charter_member"), arrayOf(CrewCharterMember.CREW_CHARTER_MEMBER.CREW_ID, CrewCharterMember.CREW_CHARTER_MEMBER.CHARTER_ID), true)
val EMAIL_LOGIN_TOKENS_PKEY: UniqueKey<EmailLoginTokensRecord> = Internal.createUniqueKey(EmailLoginTokens.EMAIL_LOGIN_TOKENS, DSL.name("email_login_tokens_pkey"), arrayOf(EmailLoginTokens.EMAIL_LOGIN_TOKENS.ID), true)
val EMAIL_LOGIN_TOKENS_TOKEN_HASH_KEY: UniqueKey<EmailLoginTokensRecord> = Internal.createUniqueKey(EmailLoginTokens.EMAIL_LOGIN_TOKENS, DSL.name("email_login_tokens_token_hash_key"), arrayOf(EmailLoginTokens.EMAIL_LOGIN_TOKENS.TOKEN_HASH), true)
val FLYWAY_SCHEMA_HISTORY_PK: UniqueKey<FlywaySchemaHistoryRecord> = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), arrayOf(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK), true)
val LOCKER_PKEY: UniqueKey<LockerRecord> = Internal.createUniqueKey(Locker.LOCKER, DSL.name("locker_pkey"), arrayOf(Locker.LOCKER.ID), true)
val LOGBOOK_PKEY: UniqueKey<LogbookRecord> = Internal.createUniqueKey(Logbook.LOGBOOK, DSL.name("logbook_pkey"), arrayOf(Logbook.LOGBOOK.ID), true)
val OUTBOX_EVENTS_PKEY: UniqueKey<OutboxEventsRecord> = Internal.createUniqueKey(OutboxEvents.OUTBOX_EVENTS, DSL.name("outbox_events_pkey"), arrayOf(OutboxEvents.OUTBOX_EVENTS.ID), true)
val UQ_OUTBOX_EVENT_KEY: UniqueKey<OutboxEventsRecord> = Internal.createUniqueKey(OutboxEvents.OUTBOX_EVENTS, DSL.name("uq_outbox_event_key"), arrayOf(OutboxEvents.OUTBOX_EVENTS.EVENT_KEY), true)
val PROJECT_API_GATEWAY_PKEY: UniqueKey<ProjectApiGatewayRecord> = Internal.createUniqueKey(ProjectApiGateway.PROJECT_API_GATEWAY, DSL.name("project_api_gateway_pkey"), arrayOf(ProjectApiGateway.PROJECT_API_GATEWAY.ID), true)
val UQ_API_GW_PROJECT: UniqueKey<ProjectApiGatewayRecord> = Internal.createUniqueKey(ProjectApiGateway.PROJECT_API_GATEWAY, DSL.name("uq_api_gw_project"), arrayOf(ProjectApiGateway.PROJECT_API_GATEWAY.PROJECT_ID), true)
val PROJECT_APPLICATIONS_PKEY: UniqueKey<ProjectApplicationsRecord> = Internal.createUniqueKey(ProjectApplications.PROJECT_APPLICATIONS, DSL.name("project_applications_pkey"), arrayOf(ProjectApplications.PROJECT_APPLICATIONS.ID), true)
val UQ_PROJECT_SLUG: UniqueKey<ProjectApplicationsRecord> = Internal.createUniqueKey(ProjectApplications.PROJECT_APPLICATIONS, DSL.name("uq_project_slug"), arrayOf(ProjectApplications.PROJECT_APPLICATIONS.PROJECT_ID, ProjectApplications.PROJECT_APPLICATIONS.SLUG), true)
val PROJECT_CONFIGS_PKEY: UniqueKey<ProjectConfigsRecord> = Internal.createUniqueKey(ProjectConfigs.PROJECT_CONFIGS, DSL.name("project_configs_pkey"), arrayOf(ProjectConfigs.PROJECT_CONFIGS.ID), true)
val PROJECT_DATABASES_PKEY: UniqueKey<ProjectDatabasesRecord> = Internal.createUniqueKey(ProjectDatabases.PROJECT_DATABASES, DSL.name("project_databases_pkey"), arrayOf(ProjectDatabases.PROJECT_DATABASES.ID), true)
val PROJECT_SECRETS_PKEY: UniqueKey<ProjectSecretsRecord> = Internal.createUniqueKey(ProjectSecrets.PROJECT_SECRETS, DSL.name("project_secrets_pkey"), arrayOf(ProjectSecrets.PROJECT_SECRETS.ID), true)
val SESSIONS_PKEY: UniqueKey<SessionsRecord> = Internal.createUniqueKey(Sessions.SESSIONS, DSL.name("sessions_pkey"), arrayOf(Sessions.SESSIONS.ID), true)
val SESSIONS_USER_ID_REFRESH_TOKEN_HASH_KEY: UniqueKey<SessionsRecord> = Internal.createUniqueKey(Sessions.SESSIONS, DSL.name("sessions_user_id_refresh_token_hash_key"), arrayOf(Sessions.SESSIONS.USER_ID, Sessions.SESSIONS.REFRESH_TOKEN_HASH), true)
val SIGN_UP_INQUIRIES_PKEY: UniqueKey<SignUpInquiriesRecord> = Internal.createUniqueKey(SignUpInquiries.SIGN_UP_INQUIRIES, DSL.name("sign_up_inquiries_pkey"), arrayOf(SignUpInquiries.SIGN_UP_INQUIRIES.ID), true)
val UQ_USER_IDENTITIES_PROVIDER_SUBJECT: UniqueKey<UserIdentitiesRecord> = Internal.createUniqueKey(UserIdentities.USER_IDENTITIES, DSL.name("uq_user_identities_provider_subject"), arrayOf(UserIdentities.USER_IDENTITIES.PROVIDER, UserIdentities.USER_IDENTITIES.SUBJECT), true)
val USER_IDENTITIES_PKEY: UniqueKey<UserIdentitiesRecord> = Internal.createUniqueKey(UserIdentities.USER_IDENTITIES, DSL.name("user_identities_pkey"), arrayOf(UserIdentities.USER_IDENTITIES.ID), true)
val USERS_EMAIL_KEY: UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), arrayOf(Users.USERS.EMAIL), true)
val USERS_PKEY: UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), arrayOf(Users.USERS.ID), true)
val UQ_VESSEL_BILLING_VESSEL: UniqueKey<VesselBillingProfileRecord> = Internal.createUniqueKey(VesselBillingProfile.VESSEL_BILLING_PROFILE, DSL.name("uq_vessel_billing_vessel"), arrayOf(VesselBillingProfile.VESSEL_BILLING_PROFILE.VESSEL_ID), true)
val VESSEL_BILLING_PROFILE_PKEY: UniqueKey<VesselBillingProfileRecord> = Internal.createUniqueKey(VesselBillingProfile.VESSEL_BILLING_PROFILE, DSL.name("vessel_billing_profile_pkey"), arrayOf(VesselBillingProfile.VESSEL_BILLING_PROFILE.ID), true)
val VESSEL_ENGINE_NODES_PKEY: UniqueKey<VesselEngineNodesRecord> = Internal.createUniqueKey(VesselEngineNodes.VESSEL_ENGINE_NODES, DSL.name("vessel_engine_nodes_pkey"), arrayOf(VesselEngineNodes.VESSEL_ENGINE_NODES.ID), true)
val UQ_REGIONS_ENGINE_NAME: UniqueKey<VesselEngineRegionsRecord> = Internal.createUniqueKey(VesselEngineRegions.VESSEL_ENGINE_REGIONS, DSL.name("uq_regions_engine_name"), arrayOf(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ENGINE_ID, VesselEngineRegions.VESSEL_ENGINE_REGIONS.NAME), true)
val VESSEL_ENGINE_REGIONS_PKEY: UniqueKey<VesselEngineRegionsRecord> = Internal.createUniqueKey(VesselEngineRegions.VESSEL_ENGINE_REGIONS, DSL.name("vessel_engine_regions_pkey"), arrayOf(VesselEngineRegions.VESSEL_ENGINE_REGIONS.ID), true)
val UQ_ENGINES_VESSEL_NAME: UniqueKey<VesselEnginesRecord> = Internal.createUniqueKey(VesselEngines.VESSEL_ENGINES, DSL.name("uq_engines_vessel_name"), arrayOf(VesselEngines.VESSEL_ENGINES.VESSEL_ID, VesselEngines.VESSEL_ENGINES.NAME), true)
val VESSEL_ENGINES_PKEY: UniqueKey<VesselEnginesRecord> = Internal.createUniqueKey(VesselEngines.VESSEL_ENGINES, DSL.name("vessel_engines_pkey"), arrayOf(VesselEngines.VESSEL_ENGINES.ID), true)
val VESSELS_PKEY: UniqueKey<VesselsRecord> = Internal.createUniqueKey(Vessels.VESSELS, DSL.name("vessels_pkey"), arrayOf(Vessels.VESSELS.ID), true)
val WEBAUTHN_CREDENTIALS_CREDENTIAL_ID_KEY: UniqueKey<WebauthnCredentialsRecord> = Internal.createUniqueKey(WebauthnCredentials.WEBAUTHN_CREDENTIALS, DSL.name("webauthn_credentials_credential_id_key"), arrayOf(WebauthnCredentials.WEBAUTHN_CREDENTIALS.CREDENTIAL_ID), true)
val WEBAUTHN_CREDENTIALS_PKEY: UniqueKey<WebauthnCredentialsRecord> = Internal.createUniqueKey(WebauthnCredentials.WEBAUTHN_CREDENTIALS, DSL.name("webauthn_credentials_pkey"), arrayOf(WebauthnCredentials.WEBAUTHN_CREDENTIALS.ID), true)
val WEBHOOK_DELIVERIES_PKEY: UniqueKey<WebhookDeliveriesRecord> = Internal.createUniqueKey(WebhookDeliveries.WEBHOOK_DELIVERIES, DSL.name("webhook_deliveries_pkey"), arrayOf(WebhookDeliveries.WEBHOOK_DELIVERIES.ID), true)
val WEBHOOK_SUBSCRIPTIONS_PKEY: UniqueKey<WebhookSubscriptionsRecord> = Internal.createUniqueKey(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS, DSL.name("webhook_subscriptions_pkey"), arrayOf(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val API_KEYS__FK_API_KEYS_USER: ForeignKey<ApiKeysRecord, UsersRecord> = Internal.createForeignKey(ApiKeys.API_KEYS, DSL.name("fk_api_keys_user"), arrayOf(ApiKeys.API_KEYS.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val CHARTER_BILLING_PROFILE__FK_CHARTER_BILLING_CHARTER: ForeignKey<CharterBillingProfileRecord, ChartersRecord> = Internal.createForeignKey(CharterBillingProfile.CHARTER_BILLING_PROFILE, DSL.name("fk_charter_billing_charter"), arrayOf(CharterBillingProfile.CHARTER_BILLING_PROFILE.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val CHARTER_BILLING_PROFILE__FK_CHARTER_BILLING_VESSEL: ForeignKey<CharterBillingProfileRecord, VesselsRecord> = Internal.createForeignKey(CharterBillingProfile.CHARTER_BILLING_PROFILE, DSL.name("fk_charter_billing_vessel"), arrayOf(CharterBillingProfile.CHARTER_BILLING_PROFILE.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val CHARTER_PROJECTS__FK_PROJECTS_CHARTER: ForeignKey<CharterProjectsRecord, ChartersRecord> = Internal.createForeignKey(CharterProjects.CHARTER_PROJECTS, DSL.name("fk_projects_charter"), arrayOf(CharterProjects.CHARTER_PROJECTS.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val CHARTERS__FK_CHARTERS_USER: ForeignKey<ChartersRecord, UsersRecord> = Internal.createForeignKey(Charters.CHARTERS, DSL.name("fk_charters_user"), arrayOf(Charters.CHARTERS.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val CHARTERS__FK_CHARTERS_VESSEL: ForeignKey<ChartersRecord, VesselsRecord> = Internal.createForeignKey(Charters.CHARTERS, DSL.name("fk_charters_vessel"), arrayOf(Charters.CHARTERS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val CREW__FK_CREW_USER: ForeignKey<CrewRecord, UsersRecord> = Internal.createForeignKey(Crew.CREW, DSL.name("fk_crew_user"), arrayOf(Crew.CREW.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val CREW__FK_CREW_VESSEL: ForeignKey<CrewRecord, VesselsRecord> = Internal.createForeignKey(Crew.CREW, DSL.name("fk_crew_vessel"), arrayOf(Crew.CREW.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val CREW_CHARTER_MEMBER__FK_CCM_CHARTER: ForeignKey<CrewCharterMemberRecord, ChartersRecord> = Internal.createForeignKey(CrewCharterMember.CREW_CHARTER_MEMBER, DSL.name("fk_ccm_charter"), arrayOf(CrewCharterMember.CREW_CHARTER_MEMBER.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val CREW_CHARTER_MEMBER__FK_CCM_CREW: ForeignKey<CrewCharterMemberRecord, CrewRecord> = Internal.createForeignKey(CrewCharterMember.CREW_CHARTER_MEMBER, DSL.name("fk_ccm_crew"), arrayOf(CrewCharterMember.CREW_CHARTER_MEMBER.CREW_ID), generated.jooq.keys.CREW_PKEY, arrayOf(Crew.CREW.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val EMAIL_LOGIN_TOKENS__FK_EMAIL_LOGIN_USER: ForeignKey<EmailLoginTokensRecord, UsersRecord> = Internal.createForeignKey(EmailLoginTokens.EMAIL_LOGIN_TOKENS, DSL.name("fk_email_login_user"), arrayOf(EmailLoginTokens.EMAIL_LOGIN_TOKENS.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val LOCKER__FK_LOCKER_CREW: ForeignKey<LockerRecord, CrewRecord> = Internal.createForeignKey(Locker.LOCKER, DSL.name("fk_locker_crew"), arrayOf(Locker.LOCKER.CREW_ID), generated.jooq.keys.CREW_PKEY, arrayOf(Crew.CREW.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val LOCKER__FK_LOCKER_VESSEL: ForeignKey<LockerRecord, VesselsRecord> = Internal.createForeignKey(Locker.LOCKER, DSL.name("fk_locker_vessel"), arrayOf(Locker.LOCKER.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val LOGBOOK__FK_LOGBOOK_CHARTER: ForeignKey<LogbookRecord, ChartersRecord> = Internal.createForeignKey(Logbook.LOGBOOK, DSL.name("fk_logbook_charter"), arrayOf(Logbook.LOGBOOK.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val LOGBOOK__FK_LOGBOOK_USER: ForeignKey<LogbookRecord, UsersRecord> = Internal.createForeignKey(Logbook.LOGBOOK, DSL.name("fk_logbook_user"), arrayOf(Logbook.LOGBOOK.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val LOGBOOK__FK_LOGBOOK_VESSEL: ForeignKey<LogbookRecord, VesselsRecord> = Internal.createForeignKey(Logbook.LOGBOOK, DSL.name("fk_logbook_vessel"), arrayOf(Logbook.LOGBOOK.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val OUTBOX_EVENTS__FK_OUTBOX_CHARTER: ForeignKey<OutboxEventsRecord, ChartersRecord> = Internal.createForeignKey(OutboxEvents.OUTBOX_EVENTS, DSL.name("fk_outbox_charter"), arrayOf(OutboxEvents.OUTBOX_EVENTS.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val OUTBOX_EVENTS__FK_OUTBOX_PROJECT: ForeignKey<OutboxEventsRecord, CharterProjectsRecord> = Internal.createForeignKey(OutboxEvents.OUTBOX_EVENTS, DSL.name("fk_outbox_project"), arrayOf(OutboxEvents.OUTBOX_EVENTS.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val OUTBOX_EVENTS__FK_OUTBOX_VESSEL: ForeignKey<OutboxEventsRecord, VesselsRecord> = Internal.createForeignKey(OutboxEvents.OUTBOX_EVENTS, DSL.name("fk_outbox_vessel"), arrayOf(OutboxEvents.OUTBOX_EVENTS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_API_GATEWAY__FK_GW_CHARTER: ForeignKey<ProjectApiGatewayRecord, ChartersRecord> = Internal.createForeignKey(ProjectApiGateway.PROJECT_API_GATEWAY, DSL.name("fk_gw_charter"), arrayOf(ProjectApiGateway.PROJECT_API_GATEWAY.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_API_GATEWAY__FK_GW_PROJECT: ForeignKey<ProjectApiGatewayRecord, CharterProjectsRecord> = Internal.createForeignKey(ProjectApiGateway.PROJECT_API_GATEWAY, DSL.name("fk_gw_project"), arrayOf(ProjectApiGateway.PROJECT_API_GATEWAY.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_API_GATEWAY__FK_GW_VESSEL: ForeignKey<ProjectApiGatewayRecord, VesselsRecord> = Internal.createForeignKey(ProjectApiGateway.PROJECT_API_GATEWAY, DSL.name("fk_gw_vessel"), arrayOf(ProjectApiGateway.PROJECT_API_GATEWAY.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_APPLICATIONS__FK_APP_CHARTER: ForeignKey<ProjectApplicationsRecord, ChartersRecord> = Internal.createForeignKey(ProjectApplications.PROJECT_APPLICATIONS, DSL.name("fk_app_charter"), arrayOf(ProjectApplications.PROJECT_APPLICATIONS.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_APPLICATIONS__FK_APP_PROJECT: ForeignKey<ProjectApplicationsRecord, CharterProjectsRecord> = Internal.createForeignKey(ProjectApplications.PROJECT_APPLICATIONS, DSL.name("fk_app_project"), arrayOf(ProjectApplications.PROJECT_APPLICATIONS.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_APPLICATIONS__FK_APP_VESSEL: ForeignKey<ProjectApplicationsRecord, VesselsRecord> = Internal.createForeignKey(ProjectApplications.PROJECT_APPLICATIONS, DSL.name("fk_app_vessel"), arrayOf(ProjectApplications.PROJECT_APPLICATIONS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_CONFIGS__FK_CONFIGS_CHARTER: ForeignKey<ProjectConfigsRecord, ChartersRecord> = Internal.createForeignKey(ProjectConfigs.PROJECT_CONFIGS, DSL.name("fk_configs_charter"), arrayOf(ProjectConfigs.PROJECT_CONFIGS.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_CONFIGS__FK_CONFIGS_CREW: ForeignKey<ProjectConfigsRecord, CrewRecord> = Internal.createForeignKey(ProjectConfigs.PROJECT_CONFIGS, DSL.name("fk_configs_crew"), arrayOf(ProjectConfigs.PROJECT_CONFIGS.CREW_ID), generated.jooq.keys.CREW_PKEY, arrayOf(Crew.CREW.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_CONFIGS__FK_CONFIGS_PROJECT: ForeignKey<ProjectConfigsRecord, CharterProjectsRecord> = Internal.createForeignKey(ProjectConfigs.PROJECT_CONFIGS, DSL.name("fk_configs_project"), arrayOf(ProjectConfigs.PROJECT_CONFIGS.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_CONFIGS__FK_CONFIGS_VESSEL: ForeignKey<ProjectConfigsRecord, VesselsRecord> = Internal.createForeignKey(ProjectConfigs.PROJECT_CONFIGS, DSL.name("fk_configs_vessel"), arrayOf(ProjectConfigs.PROJECT_CONFIGS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_DATABASES__FK_DB_CHARTER: ForeignKey<ProjectDatabasesRecord, ChartersRecord> = Internal.createForeignKey(ProjectDatabases.PROJECT_DATABASES, DSL.name("fk_db_charter"), arrayOf(ProjectDatabases.PROJECT_DATABASES.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_DATABASES__FK_DB_PROJECT: ForeignKey<ProjectDatabasesRecord, CharterProjectsRecord> = Internal.createForeignKey(ProjectDatabases.PROJECT_DATABASES, DSL.name("fk_db_project"), arrayOf(ProjectDatabases.PROJECT_DATABASES.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_DATABASES__FK_DB_VESSEL: ForeignKey<ProjectDatabasesRecord, VesselsRecord> = Internal.createForeignKey(ProjectDatabases.PROJECT_DATABASES, DSL.name("fk_db_vessel"), arrayOf(ProjectDatabases.PROJECT_DATABASES.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_SECRETS__FK_SECRETS_CHARTER: ForeignKey<ProjectSecretsRecord, ChartersRecord> = Internal.createForeignKey(ProjectSecrets.PROJECT_SECRETS, DSL.name("fk_secrets_charter"), arrayOf(ProjectSecrets.PROJECT_SECRETS.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_SECRETS__FK_SECRETS_CREW: ForeignKey<ProjectSecretsRecord, CrewRecord> = Internal.createForeignKey(ProjectSecrets.PROJECT_SECRETS, DSL.name("fk_secrets_crew"), arrayOf(ProjectSecrets.PROJECT_SECRETS.CREW_ID), generated.jooq.keys.CREW_PKEY, arrayOf(Crew.CREW.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PROJECT_SECRETS__FK_SECRETS_PROJECT: ForeignKey<ProjectSecretsRecord, CharterProjectsRecord> = Internal.createForeignKey(ProjectSecrets.PROJECT_SECRETS, DSL.name("fk_secrets_project"), arrayOf(ProjectSecrets.PROJECT_SECRETS.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val PROJECT_SECRETS__FK_SECRETS_VESSEL: ForeignKey<ProjectSecretsRecord, VesselsRecord> = Internal.createForeignKey(ProjectSecrets.PROJECT_SECRETS, DSL.name("fk_secrets_vessel"), arrayOf(ProjectSecrets.PROJECT_SECRETS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val SESSIONS__SESSIONS_REPLACED_BY_ID_FKEY: ForeignKey<SessionsRecord, SessionsRecord> = Internal.createForeignKey(Sessions.SESSIONS, DSL.name("sessions_replaced_by_id_fkey"), arrayOf(Sessions.SESSIONS.REPLACED_BY_ID), generated.jooq.keys.SESSIONS_PKEY, arrayOf(Sessions.SESSIONS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val SESSIONS__SESSIONS_USER_ID_FKEY: ForeignKey<SessionsRecord, UsersRecord> = Internal.createForeignKey(Sessions.SESSIONS, DSL.name("sessions_user_id_fkey"), arrayOf(Sessions.SESSIONS.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val SIGN_UP_INQUIRIES__FK_SIGNUPS_USER: ForeignKey<SignUpInquiriesRecord, UsersRecord> = Internal.createForeignKey(SignUpInquiries.SIGN_UP_INQUIRIES, DSL.name("fk_signups_user"), arrayOf(SignUpInquiries.SIGN_UP_INQUIRIES.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val SIGN_UP_INQUIRIES__FK_SIGNUPS_VESSEL: ForeignKey<SignUpInquiriesRecord, VesselsRecord> = Internal.createForeignKey(SignUpInquiries.SIGN_UP_INQUIRIES, DSL.name("fk_signups_vessel"), arrayOf(SignUpInquiries.SIGN_UP_INQUIRIES.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val USER_IDENTITIES__FK_USER_IDENTITIES_USER: ForeignKey<UserIdentitiesRecord, UsersRecord> = Internal.createForeignKey(UserIdentities.USER_IDENTITIES, DSL.name("fk_user_identities_user"), arrayOf(UserIdentities.USER_IDENTITIES.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_BILLING_PROFILE__FK_VESSEL_BILLING_VESSEL: ForeignKey<VesselBillingProfileRecord, VesselsRecord> = Internal.createForeignKey(VesselBillingProfile.VESSEL_BILLING_PROFILE, DSL.name("fk_vessel_billing_vessel"), arrayOf(VesselBillingProfile.VESSEL_BILLING_PROFILE.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINE_NODES__FK_NODES_ENGINE: ForeignKey<VesselEngineNodesRecord, VesselEnginesRecord> = Internal.createForeignKey(VesselEngineNodes.VESSEL_ENGINE_NODES, DSL.name("fk_nodes_engine"), arrayOf(VesselEngineNodes.VESSEL_ENGINE_NODES.VESSEL_ENGINE_ID), generated.jooq.keys.VESSEL_ENGINES_PKEY, arrayOf(VesselEngines.VESSEL_ENGINES.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINE_NODES__FK_NODES_PROVISIONING_LOCKER: ForeignKey<VesselEngineNodesRecord, LockerRecord> = Internal.createForeignKey(VesselEngineNodes.VESSEL_ENGINE_NODES, DSL.name("fk_nodes_provisioning_locker"), arrayOf(VesselEngineNodes.VESSEL_ENGINE_NODES.PROVISIONING_LOCKER_ID), generated.jooq.keys.LOCKER_PKEY, arrayOf(Locker.LOCKER.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINE_NODES__FK_NODES_REGION: ForeignKey<VesselEngineNodesRecord, VesselEngineRegionsRecord> = Internal.createForeignKey(VesselEngineNodes.VESSEL_ENGINE_NODES, DSL.name("fk_nodes_region"), arrayOf(VesselEngineNodes.VESSEL_ENGINE_NODES.VESSEL_ENGINE_REGION_ID), generated.jooq.keys.VESSEL_ENGINE_REGIONS_PKEY, arrayOf(VesselEngineRegions.VESSEL_ENGINE_REGIONS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINE_NODES__FK_NODES_VESSEL: ForeignKey<VesselEngineNodesRecord, VesselsRecord> = Internal.createForeignKey(VesselEngineNodes.VESSEL_ENGINE_NODES, DSL.name("fk_nodes_vessel"), arrayOf(VesselEngineNodes.VESSEL_ENGINE_NODES.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINE_REGIONS__FK_REGIONS_ENGINE: ForeignKey<VesselEngineRegionsRecord, VesselEnginesRecord> = Internal.createForeignKey(VesselEngineRegions.VESSEL_ENGINE_REGIONS, DSL.name("fk_regions_engine"), arrayOf(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ENGINE_ID), generated.jooq.keys.VESSEL_ENGINES_PKEY, arrayOf(VesselEngines.VESSEL_ENGINES.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINE_REGIONS__FK_REGIONS_VESSEL: ForeignKey<VesselEngineRegionsRecord, VesselsRecord> = Internal.createForeignKey(VesselEngineRegions.VESSEL_ENGINE_REGIONS, DSL.name("fk_regions_vessel"), arrayOf(VesselEngineRegions.VESSEL_ENGINE_REGIONS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSEL_ENGINES__FK_ENGINES_VESSEL: ForeignKey<VesselEnginesRecord, VesselsRecord> = Internal.createForeignKey(VesselEngines.VESSEL_ENGINES, DSL.name("fk_engines_vessel"), arrayOf(VesselEngines.VESSEL_ENGINES.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val VESSELS__FK_VESSELS_USER: ForeignKey<VesselsRecord, UsersRecord> = Internal.createForeignKey(Vessels.VESSELS, DSL.name("fk_vessels_user"), arrayOf(Vessels.VESSELS.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val WEBAUTHN_CREDENTIALS__FK_WEBAUTHN_USER: ForeignKey<WebauthnCredentialsRecord, UsersRecord> = Internal.createForeignKey(WebauthnCredentials.WEBAUTHN_CREDENTIALS, DSL.name("fk_webauthn_user"), arrayOf(WebauthnCredentials.WEBAUTHN_CREDENTIALS.USER_ID), generated.jooq.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val WEBHOOK_DELIVERIES__FK_WD_EVENT: ForeignKey<WebhookDeliveriesRecord, OutboxEventsRecord> = Internal.createForeignKey(WebhookDeliveries.WEBHOOK_DELIVERIES, DSL.name("fk_wd_event"), arrayOf(WebhookDeliveries.WEBHOOK_DELIVERIES.OUTBOX_EVENT_ID), generated.jooq.keys.OUTBOX_EVENTS_PKEY, arrayOf(OutboxEvents.OUTBOX_EVENTS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val WEBHOOK_DELIVERIES__FK_WD_SUBSCRIPTION: ForeignKey<WebhookDeliveriesRecord, WebhookSubscriptionsRecord> = Internal.createForeignKey(WebhookDeliveries.WEBHOOK_DELIVERIES, DSL.name("fk_wd_subscription"), arrayOf(WebhookDeliveries.WEBHOOK_DELIVERIES.SUBSCRIPTION_ID), generated.jooq.keys.WEBHOOK_SUBSCRIPTIONS_PKEY, arrayOf(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS.ID), true, ForeignKeyRule.CASCADE, ForeignKeyRule.NO_ACTION)
val WEBHOOK_SUBSCRIPTIONS__FK_WS_CHARTER: ForeignKey<WebhookSubscriptionsRecord, ChartersRecord> = Internal.createForeignKey(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS, DSL.name("fk_ws_charter"), arrayOf(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS.CHARTER_ID), generated.jooq.keys.CHARTERS_PKEY, arrayOf(Charters.CHARTERS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val WEBHOOK_SUBSCRIPTIONS__FK_WS_PROJECT: ForeignKey<WebhookSubscriptionsRecord, CharterProjectsRecord> = Internal.createForeignKey(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS, DSL.name("fk_ws_project"), arrayOf(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS.PROJECT_ID), generated.jooq.keys.CHARTER_PROJECTS_PKEY, arrayOf(CharterProjects.CHARTER_PROJECTS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val WEBHOOK_SUBSCRIPTIONS__FK_WS_VESSEL: ForeignKey<WebhookSubscriptionsRecord, VesselsRecord> = Internal.createForeignKey(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS, DSL.name("fk_ws_vessel"), arrayOf(WebhookSubscriptions.WEBHOOK_SUBSCRIPTIONS.VESSEL_ID), generated.jooq.keys.VESSELS_PKEY, arrayOf(Vessels.VESSELS.ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
