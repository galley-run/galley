/*
 * This file is generated by jOOQ.
 */
package generated.jooq.routines


import generated.jooq.Public

import java.util.UUID

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class GalleyHasProjectAccess : AbstractRoutine<Boolean>("galley_has_project_access", Public.PUBLIC, DSL.comment(""), SQLDataType.BOOLEAN) {
    companion object {

        /**
         * The parameter
         * <code>public.galley_has_project_access.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<Boolean?> = Internal.createParameter("RETURN_VALUE", SQLDataType.BOOLEAN, false, false)

        /**
         * The parameter
         * <code>public.galley_has_project_access._project_id</code>.
         */
        val _PROJECT_ID: Parameter<UUID?> = Internal.createParameter("_project_id", SQLDataType.UUID, false, false)
    }

    init {
        returnParameter = GalleyHasProjectAccess.RETURN_VALUE
        addInParameter(GalleyHasProjectAccess._PROJECT_ID)
    }

    /**
     * Set the <code>_project_id</code> parameter IN value to the routine
     */
    fun set_ProjectId(value: UUID?): Unit = setValue(GalleyHasProjectAccess._PROJECT_ID, value)

    /**
     * Set the <code>_project_id</code> parameter to the function to be used
     * with a {@link org.jooq.Select} statement
     */
    fun set_ProjectId(field: Field<UUID?>): Unit {
        setField(GalleyHasProjectAccess._PROJECT_ID, field)
    }
}
