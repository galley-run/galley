/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.records


import generated.jooq.tables.ProjectSecrets

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectSecretsRecord() : UpdatableRecordImpl<ProjectSecretsRecord>(ProjectSecrets.PROJECT_SECRETS) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var vesselId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var charterId: UUID?
        set(value): Unit = set(2, value)
        get(): UUID? = get(2) as UUID?

    open var projectId: UUID?
        set(value): Unit = set(3, value)
        get(): UUID? = get(3) as UUID?

    open var crewId: UUID?
        set(value): Unit = set(4, value)
        get(): UUID? = get(4) as UUID?

    open var key: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var vaultMount: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var vaultPath: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var kvVersion: Int?
        set(value): Unit = set(8, value)
        get(): Int? = get(8) as Int?

    open var keyId: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var fingerprint: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(11, value)
        get(): OffsetDateTime? = get(11) as OffsetDateTime?

    open var updatedAt: OffsetDateTime?
        set(value): Unit = set(12, value)
        get(): OffsetDateTime? = get(12) as OffsetDateTime?

    open var expiresAt: OffsetDateTime?
        set(value): Unit = set(13, value)
        get(): OffsetDateTime? = get(13) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised ProjectSecretsRecord
     */
    constructor(id: UUID? = null, vesselId: UUID? = null, charterId: UUID? = null, projectId: UUID? = null, crewId: UUID? = null, key: String? = null, vaultMount: String? = null, vaultPath: String? = null, kvVersion: Int? = null, keyId: String? = null, fingerprint: String? = null, createdAt: OffsetDateTime? = null, updatedAt: OffsetDateTime? = null, expiresAt: OffsetDateTime? = null): this() {
        this.id = id
        this.vesselId = vesselId
        this.charterId = charterId
        this.projectId = projectId
        this.crewId = crewId
        this.key = key
        this.vaultMount = vaultMount
        this.vaultPath = vaultPath
        this.kvVersion = kvVersion
        this.keyId = keyId
        this.fingerprint = fingerprint
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.expiresAt = expiresAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised ProjectSecretsRecord
     */
    constructor(value: generated.jooq.tables.pojos.ProjectSecrets?): this() {
        if (value != null) {
            this.id = value.id
            this.vesselId = value.vesselId
            this.charterId = value.charterId
            this.projectId = value.projectId
            this.crewId = value.crewId
            this.key = value.key
            this.vaultMount = value.vaultMount
            this.vaultPath = value.vaultPath
            this.kvVersion = value.kvVersion
            this.keyId = value.keyId
            this.fingerprint = value.fingerprint
            this.createdAt = value.createdAt
            this.updatedAt = value.updatedAt
            this.expiresAt = value.expiresAt
            resetTouchedOnNotNull()
        }
    }
}
