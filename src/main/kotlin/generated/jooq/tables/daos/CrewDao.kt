/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.enums.MemberStatus
import generated.jooq.enums.VesselRole
import generated.jooq.tables.Crew
import generated.jooq.tables.records.CrewRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class CrewDao(configuration: Configuration?) : DAOImpl<CrewRecord, generated.jooq.tables.pojos.Crew, UUID>(Crew.CREW, generated.jooq.tables.pojos.Crew::class.java, configuration) {

    /**
     * Create a new CrewDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.Crew): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.Crew? = fetchOne(Crew.CREW.ID, value)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: UUID): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.USER_ID, *values)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>vessel_role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselRole(lowerInclusive: VesselRole?, upperInclusive: VesselRole?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.VESSEL_ROLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_role IN (values)</code>
     */
    fun fetchByVesselRole(vararg values: VesselRole): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.VESSEL_ROLE, *values)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: MemberStatus?, upperInclusive: MemberStatus?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: MemberStatus): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.STATUS, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.CREATED_AT, *values)

    /**
     * Fetch records that have <code>activated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfActivatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.ACTIVATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>activated_at IN (values)</code>
     */
    fun fetchByActivatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.ACTIVATED_AT, *values)

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDeletedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Crew> = fetchRange(Crew.CREW.DELETED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    fun fetchByDeletedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Crew> = fetch(Crew.CREW.DELETED_AT, *values)
}
