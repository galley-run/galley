/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.enums.OutboxStatus
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_AGGREGATE_TIME
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_CHARTER_TIME
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_METADATA_GIN
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_PAYLOAD_GIN
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_PROJECT_TIME
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_STATUS_NEXT
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_TYPE_TIME
import run.galley.cloud.db.generated.indexes.IDX_OUTBOX_VESSEL_TIME
import run.galley.cloud.db.generated.keys.OUTBOX_EVENTS_PKEY
import run.galley.cloud.db.generated.keys.OUTBOX_EVENTS__FK_OUTBOX_CHARTER
import run.galley.cloud.db.generated.keys.OUTBOX_EVENTS__FK_OUTBOX_PROJECT
import run.galley.cloud.db.generated.keys.OUTBOX_EVENTS__FK_OUTBOX_VESSEL
import run.galley.cloud.db.generated.keys.UQ_OUTBOX_EVENT_KEY
import run.galley.cloud.db.generated.keys.WEBHOOK_DELIVERIES__FK_WD_EVENT
import run.galley.cloud.db.generated.tables.CharterProjects.CharterProjectsPath
import run.galley.cloud.db.generated.tables.Charters.ChartersPath
import run.galley.cloud.db.generated.tables.Vessels.VesselsPath
import run.galley.cloud.db.generated.tables.WebhookDeliveries.WebhookDeliveriesPath
import run.galley.cloud.db.generated.tables.records.OutboxEventsRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class OutboxEvents(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, OutboxEventsRecord>?,
    parentPath: InverseForeignKey<out Record, OutboxEventsRecord>?,
    aliased: Table<OutboxEventsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<OutboxEventsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.outbox_events</code>
         */
        val OUTBOX_EVENTS: OutboxEvents = OutboxEvents()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OutboxEventsRecord> = OutboxEventsRecord::class.java

    /**
     * The column <code>public.outbox_events.id</code>.
     */
    val ID: TableField<OutboxEventsRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.outbox_events.vessel_id</code>.
     */
    val VESSEL_ID: TableField<OutboxEventsRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.outbox_events.charter_id</code>.
     */
    val CHARTER_ID: TableField<OutboxEventsRecord, UUID?> = createField(DSL.name("charter_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.outbox_events.project_id</code>.
     */
    val PROJECT_ID: TableField<OutboxEventsRecord, UUID?> = createField(DSL.name("project_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.outbox_events.aggregate_table</code>.
     */
    val AGGREGATE_TABLE: TableField<OutboxEventsRecord, String?> = createField(DSL.name("aggregate_table"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.outbox_events.aggregate_id</code>.
     */
    val AGGREGATE_ID: TableField<OutboxEventsRecord, UUID?> = createField(DSL.name("aggregate_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.outbox_events.event_type</code>.
     */
    val EVENT_TYPE: TableField<OutboxEventsRecord, String?> = createField(DSL.name("event_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.outbox_events.event_key</code>.
     */
    val EVENT_KEY: TableField<OutboxEventsRecord, String?> = createField(DSL.name("event_key"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.outbox_events.event_version</code>.
     */
    val EVENT_VERSION: TableField<OutboxEventsRecord, Int?> = createField(DSL.name("event_version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.outbox_events.payload</code>.
     */
    val PAYLOAD: TableField<OutboxEventsRecord, JSONB?> = createField(DSL.name("payload"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.outbox_events.metadata</code>.
     */
    val METADATA: TableField<OutboxEventsRecord, JSONB?> = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "")

    /**
     * The column <code>public.outbox_events.status</code>.
     */
    val STATUS: TableField<OutboxEventsRecord, OutboxStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'pending'::outbox_status"), SQLDataType.VARCHAR)).asEnumDataType(OutboxStatus::class.java), this, "")

    /**
     * The column <code>public.outbox_events.attempts</code>.
     */
    val ATTEMPTS: TableField<OutboxEventsRecord, Int?> = createField(DSL.name("attempts"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.outbox_events.next_attempt_at</code>.
     */
    val NEXT_ATTEMPT_AT: TableField<OutboxEventsRecord, OffsetDateTime?> = createField(DSL.name("next_attempt_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.outbox_events.processed_at</code>.
     */
    val PROCESSED_AT: TableField<OutboxEventsRecord, OffsetDateTime?> = createField(DSL.name("processed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.outbox_events.error</code>.
     */
    val ERROR: TableField<OutboxEventsRecord, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.outbox_events.created_at</code>.
     */
    val CREATED_AT: TableField<OutboxEventsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<OutboxEventsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<OutboxEventsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<OutboxEventsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.outbox_events</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.outbox_events</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.outbox_events</code> table reference
     */
    constructor(): this(DSL.name("outbox_events"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OutboxEventsRecord>?, parentPath: InverseForeignKey<out Record, OutboxEventsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, OUTBOX_EVENTS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OutboxEventsPath : OutboxEvents, Path<OutboxEventsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OutboxEventsRecord>?, parentPath: InverseForeignKey<out Record, OutboxEventsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<OutboxEventsRecord>): super(alias, aliased)
        override fun `as`(alias: String): OutboxEventsPath = OutboxEventsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): OutboxEventsPath = OutboxEventsPath(alias, this)
        override fun `as`(alias: Table<*>): OutboxEventsPath = OutboxEventsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_OUTBOX_AGGREGATE_TIME, IDX_OUTBOX_CHARTER_TIME, IDX_OUTBOX_METADATA_GIN, IDX_OUTBOX_PAYLOAD_GIN, IDX_OUTBOX_PROJECT_TIME, IDX_OUTBOX_STATUS_NEXT, IDX_OUTBOX_TYPE_TIME, IDX_OUTBOX_VESSEL_TIME)
    override fun getPrimaryKey(): UniqueKey<OutboxEventsRecord> = OUTBOX_EVENTS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<OutboxEventsRecord>> = listOf(UQ_OUTBOX_EVENT_KEY)
    override fun getReferences(): List<ForeignKey<OutboxEventsRecord, *>> = listOf(OUTBOX_EVENTS__FK_OUTBOX_CHARTER, OUTBOX_EVENTS__FK_OUTBOX_PROJECT, OUTBOX_EVENTS__FK_OUTBOX_VESSEL)

    /**
     * Get the implicit join path to the <code>public.charters</code> table.
     */
    fun charters(): ChartersPath = charters
    val charters: ChartersPath by lazy { ChartersPath(this, OUTBOX_EVENTS__FK_OUTBOX_CHARTER, null) }

    /**
     * Get the implicit join path to the <code>public.charter_projects</code>
     * table.
     */
    fun charterProjects(): CharterProjectsPath = charterProjects
    val charterProjects: CharterProjectsPath by lazy { CharterProjectsPath(this, OUTBOX_EVENTS__FK_OUTBOX_PROJECT, null) }

    /**
     * Get the implicit join path to the <code>public.vessels</code> table.
     */
    fun vessels(): VesselsPath = vessels
    val vessels: VesselsPath by lazy { VesselsPath(this, OUTBOX_EVENTS__FK_OUTBOX_VESSEL, null) }

    private lateinit var _webhookDeliveries: WebhookDeliveriesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.webhook_deliveries</code> table
     */
    fun webhookDeliveries(): WebhookDeliveriesPath {
        if (!this::_webhookDeliveries.isInitialized)
            _webhookDeliveries = WebhookDeliveriesPath(this, null, WEBHOOK_DELIVERIES__FK_WD_EVENT.inverseKey)

        return _webhookDeliveries;
    }

    val webhookDeliveries: WebhookDeliveriesPath
        get(): WebhookDeliveriesPath = webhookDeliveries()
    override fun `as`(alias: String): OutboxEvents = OutboxEvents(DSL.name(alias), this)
    override fun `as`(alias: Name): OutboxEvents = OutboxEvents(alias, this)
    override fun `as`(alias: Table<*>): OutboxEvents = OutboxEvents(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OutboxEvents = OutboxEvents(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OutboxEvents = OutboxEvents(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OutboxEvents = OutboxEvents(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): OutboxEvents = OutboxEvents(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): OutboxEvents = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): OutboxEvents = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): OutboxEvents = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): OutboxEvents = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): OutboxEvents = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): OutboxEvents = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): OutboxEvents = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): OutboxEvents = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): OutboxEvents = where(DSL.notExists(select))
}
