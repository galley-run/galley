/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.records

import generated.jooq.tables.Locker
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.OffsetDateTime
import java.util.UUID

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class LockerRecord() : UpdatableRecordImpl<LockerRecord>(Locker.LOCKER) {
  open var id: UUID?
    set(value): Unit = set(0, value)
    get(): UUID? = get(0) as UUID?

  open var vesselId: UUID?
    set(value): Unit = set(1, value)
    get(): UUID? = get(1) as UUID?

  open var crewId: UUID?
    set(value): Unit = set(2, value)
    get(): UUID? = get(2) as UUID?

  open var name: String?
    set(value): Unit = set(3, value)
    get(): String? = get(3) as String?

  open var vaultMount: String?
    set(value): Unit = set(4, value)
    get(): String? = get(4) as String?

  open var vaultPath: String?
    set(value): Unit = set(5, value)
    get(): String? = get(5) as String?

  open var kvVersion: Int?
    set(value): Unit = set(6, value)
    get(): Int? = get(6) as Int?

  open var keyId: String?
    set(value): Unit = set(7, value)
    get(): String? = get(7) as String?

  open var fingerprint: String?
    set(value): Unit = set(8, value)
    get(): String? = get(8) as String?

  open var createdAt: OffsetDateTime?
    set(value): Unit = set(9, value)
    get(): OffsetDateTime? = get(9) as OffsetDateTime?

  open var updatedAt: OffsetDateTime?
    set(value): Unit = set(10, value)
    get(): OffsetDateTime? = get(10) as OffsetDateTime?

  open var expiresAt: OffsetDateTime?
    set(value): Unit = set(11, value)
    get(): OffsetDateTime? = get(11) as OffsetDateTime?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

  /**
   * Create a detached, initialised LockerRecord
   */
  constructor(
    id: UUID? = null,
    vesselId: UUID? = null,
    crewId: UUID? = null,
    name: String? = null,
    vaultMount: String? = null,
    vaultPath: String? = null,
    kvVersion: Int? = null,
    keyId: String? = null,
    fingerprint: String? = null,
    createdAt: OffsetDateTime? = null,
    updatedAt: OffsetDateTime? = null,
    expiresAt: OffsetDateTime? = null,
  ) : this() {
    this.id = id
    this.vesselId = vesselId
    this.crewId = crewId
    this.name = name
    this.vaultMount = vaultMount
    this.vaultPath = vaultPath
    this.kvVersion = kvVersion
    this.keyId = keyId
    this.fingerprint = fingerprint
    this.createdAt = createdAt
    this.updatedAt = updatedAt
    this.expiresAt = expiresAt
    resetTouchedOnNotNull()
  }

  /**
   * Create a detached, initialised LockerRecord
   */
  constructor(value: generated.jooq.tables.pojos.Locker?) : this() {
    if (value != null) {
      this.id = value.id
      this.vesselId = value.vesselId
      this.crewId = value.crewId
      this.name = value.name
      this.vaultMount = value.vaultMount
      this.vaultPath = value.vaultPath
      this.kvVersion = value.kvVersion
      this.keyId = value.keyId
      this.fingerprint = value.fingerprint
      this.createdAt = value.createdAt
      this.updatedAt = value.updatedAt
      this.expiresAt = value.expiresAt
      resetTouchedOnNotNull()
    }
  }
}
