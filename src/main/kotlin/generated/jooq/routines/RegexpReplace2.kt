/*
 * This file is generated by jOOQ.
 */
package generated.jooq.routines


import generated.jooq.Public

import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.postgres.extensions.bindings.CitextBinding


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class RegexpReplace2 : AbstractRoutine<String>("regexp_replace", Public.PUBLIC, DSL.comment(""), SQLDataType.CLOB) {
    companion object {

        /**
         * The parameter <code>public.regexp_replace.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<String?> = Internal.createParameter("RETURN_VALUE", SQLDataType.CLOB, false, false)

        /**
         * The parameter <code>public.regexp_replace._1</code>.
         */
        val _1: Parameter<String?> = Internal.createParameter("_1", DefaultDataType.getDefaultDataType("\"public\".\"citext\""), false, true, CitextBinding())

        /**
         * The parameter <code>public.regexp_replace._2</code>.
         */
        val _2: Parameter<String?> = Internal.createParameter("_2", DefaultDataType.getDefaultDataType("\"public\".\"citext\""), false, true, CitextBinding())

        /**
         * The parameter <code>public.regexp_replace._3</code>.
         */
        val _3: Parameter<String?> = Internal.createParameter("_3", SQLDataType.CLOB, false, true)

        /**
         * The parameter <code>public.regexp_replace._4</code>.
         */
        val _4: Parameter<String?> = Internal.createParameter("_4", SQLDataType.CLOB, false, true)
    }

    init {
        returnParameter = RegexpReplace2.RETURN_VALUE
        addInParameter(RegexpReplace2._1)
        addInParameter(RegexpReplace2._2)
        addInParameter(RegexpReplace2._3)
        addInParameter(RegexpReplace2._4)
        setOverloaded(true)
    }

    /**
     * Set the <code>_1</code> parameter IN value to the routine
     */
    fun set__1(value: String?): Unit = setValue(RegexpReplace2._1, value)

    /**
     * Set the <code>_1</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__1(field: Field<String?>): Unit {
        setField(RegexpReplace2._1, field)
    }

    /**
     * Set the <code>_2</code> parameter IN value to the routine
     */
    fun set__2(value: String?): Unit = setValue(RegexpReplace2._2, value)

    /**
     * Set the <code>_2</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__2(field: Field<String?>): Unit {
        setField(RegexpReplace2._2, field)
    }

    /**
     * Set the <code>_3</code> parameter IN value to the routine
     */
    fun set__3(value: String?): Unit = setValue(RegexpReplace2._3, value)

    /**
     * Set the <code>_3</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__3(field: Field<String?>): Unit {
        setField(RegexpReplace2._3, field)
    }

    /**
     * Set the <code>_4</code> parameter IN value to the routine
     */
    fun set__4(value: String?): Unit = setValue(RegexpReplace2._4, value)

    /**
     * Set the <code>_4</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__4(field: Field<String?>): Unit {
        setField(RegexpReplace2._4, field)
    }
}
