/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.indexes.IDX_CHARTERS_DELETED_AT
import run.galley.cloud.db.generated.indexes.IDX_CHARTERS_VESSEL
import run.galley.cloud.db.generated.indexes.IDX_CHARTERS_VESSEL_CREATED
import run.galley.cloud.db.generated.indexes.UQ_CHARTERS_VESSEL_NAME
import run.galley.cloud.db.generated.keys.CHARTERS_PKEY
import run.galley.cloud.db.generated.keys.CHARTERS__FK_CHARTERS_USER
import run.galley.cloud.db.generated.keys.CHARTERS__FK_CHARTERS_VESSEL
import run.galley.cloud.db.generated.keys.CHARTER_BILLING_PROFILE__FK_CHARTER_BILLING_CHARTER
import run.galley.cloud.db.generated.keys.CHARTER_PROJECTS__FK_PROJECTS_CHARTER
import run.galley.cloud.db.generated.keys.CREW_CHARTER_MEMBER__FK_CCM_CHARTER
import run.galley.cloud.db.generated.keys.LOGBOOK__FK_LOGBOOK_CHARTER
import run.galley.cloud.db.generated.keys.OUTBOX_EVENTS__FK_OUTBOX_CHARTER
import run.galley.cloud.db.generated.keys.PROJECT_API_GATEWAY__FK_GW_CHARTER
import run.galley.cloud.db.generated.keys.PROJECT_APPLICATIONS__FK_APP_CHARTER
import run.galley.cloud.db.generated.keys.PROJECT_CONFIGS__FK_CONFIGS_CHARTER
import run.galley.cloud.db.generated.keys.PROJECT_DATABASES__FK_DB_CHARTER
import run.galley.cloud.db.generated.keys.PROJECT_SECRETS__FK_SECRETS_CHARTER
import run.galley.cloud.db.generated.keys.WEBHOOK_SUBSCRIPTIONS__FK_WS_CHARTER
import run.galley.cloud.db.generated.tables.CharterBillingProfile.CharterBillingProfilePath
import run.galley.cloud.db.generated.tables.CharterProjects.CharterProjectsPath
import run.galley.cloud.db.generated.tables.Crew.CrewPath
import run.galley.cloud.db.generated.tables.CrewCharterMember.CrewCharterMemberPath
import run.galley.cloud.db.generated.tables.Logbook.LogbookPath
import run.galley.cloud.db.generated.tables.OutboxEvents.OutboxEventsPath
import run.galley.cloud.db.generated.tables.ProjectApiGateway.ProjectApiGatewayPath
import run.galley.cloud.db.generated.tables.ProjectApplications.ProjectApplicationsPath
import run.galley.cloud.db.generated.tables.ProjectConfigs.ProjectConfigsPath
import run.galley.cloud.db.generated.tables.ProjectDatabases.ProjectDatabasesPath
import run.galley.cloud.db.generated.tables.ProjectSecrets.ProjectSecretsPath
import run.galley.cloud.db.generated.tables.Users.UsersPath
import run.galley.cloud.db.generated.tables.Vessels.VesselsPath
import run.galley.cloud.db.generated.tables.WebhookSubscriptions.WebhookSubscriptionsPath
import run.galley.cloud.db.generated.tables.records.ChartersRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Charters(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ChartersRecord>?,
    parentPath: InverseForeignKey<out Record, ChartersRecord>?,
    aliased: Table<ChartersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ChartersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.charters</code>
         */
        val CHARTERS: Charters = Charters()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ChartersRecord> = ChartersRecord::class.java

    /**
     * The column <code>public.charters.id</code>.
     */
    val ID: TableField<ChartersRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.charters.vessel_id</code>.
     */
    val VESSEL_ID: TableField<ChartersRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.charters.user_id</code>.
     */
    val USER_ID: TableField<ChartersRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.charters.name</code>.
     */
    val NAME: TableField<ChartersRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.charters.description</code>.
     */
    val DESCRIPTION: TableField<ChartersRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.charters.created_at</code>.
     */
    val CREATED_AT: TableField<ChartersRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.charters.deleted_at</code>.
     */
    val DELETED_AT: TableField<ChartersRecord, OffsetDateTime?> = createField(DSL.name("deleted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<ChartersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ChartersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ChartersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.charters</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.charters</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.charters</code> table reference
     */
    constructor(): this(DSL.name("charters"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ChartersRecord>?, parentPath: InverseForeignKey<out Record, ChartersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, CHARTERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ChartersPath : Charters, Path<ChartersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ChartersRecord>?, parentPath: InverseForeignKey<out Record, ChartersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ChartersRecord>): super(alias, aliased)
        override fun `as`(alias: String): ChartersPath = ChartersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ChartersPath = ChartersPath(alias, this)
        override fun `as`(alias: Table<*>): ChartersPath = ChartersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_CHARTERS_DELETED_AT, IDX_CHARTERS_VESSEL, IDX_CHARTERS_VESSEL_CREATED, UQ_CHARTERS_VESSEL_NAME)
    override fun getPrimaryKey(): UniqueKey<ChartersRecord> = CHARTERS_PKEY
    override fun getReferences(): List<ForeignKey<ChartersRecord, *>> = listOf(CHARTERS__FK_CHARTERS_USER, CHARTERS__FK_CHARTERS_VESSEL)

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, CHARTERS__FK_CHARTERS_USER, null) }

    /**
     * Get the implicit join path to the <code>public.vessels</code> table.
     */
    fun vessels(): VesselsPath = vessels
    val vessels: VesselsPath by lazy { VesselsPath(this, CHARTERS__FK_CHARTERS_VESSEL, null) }

    private lateinit var _projectApplications: ProjectApplicationsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_applications</code> table
     */
    fun projectApplications(): ProjectApplicationsPath {
        if (!this::_projectApplications.isInitialized)
            _projectApplications = ProjectApplicationsPath(this, null, PROJECT_APPLICATIONS__FK_APP_CHARTER.inverseKey)

        return _projectApplications;
    }

    val projectApplications: ProjectApplicationsPath
        get(): ProjectApplicationsPath = projectApplications()

    private lateinit var _crewCharterMember: CrewCharterMemberPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.crew_charter_member</code> table
     */
    fun crewCharterMember(): CrewCharterMemberPath {
        if (!this::_crewCharterMember.isInitialized)
            _crewCharterMember = CrewCharterMemberPath(this, null, CREW_CHARTER_MEMBER__FK_CCM_CHARTER.inverseKey)

        return _crewCharterMember;
    }

    val crewCharterMember: CrewCharterMemberPath
        get(): CrewCharterMemberPath = crewCharterMember()

    private lateinit var _charterBillingProfile: CharterBillingProfilePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.charter_billing_profile</code> table
     */
    fun charterBillingProfile(): CharterBillingProfilePath {
        if (!this::_charterBillingProfile.isInitialized)
            _charterBillingProfile = CharterBillingProfilePath(this, null, CHARTER_BILLING_PROFILE__FK_CHARTER_BILLING_CHARTER.inverseKey)

        return _charterBillingProfile;
    }

    val charterBillingProfile: CharterBillingProfilePath
        get(): CharterBillingProfilePath = charterBillingProfile()

    private lateinit var _projectConfigs: ProjectConfigsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_configs</code> table
     */
    fun projectConfigs(): ProjectConfigsPath {
        if (!this::_projectConfigs.isInitialized)
            _projectConfigs = ProjectConfigsPath(this, null, PROJECT_CONFIGS__FK_CONFIGS_CHARTER.inverseKey)

        return _projectConfigs;
    }

    val projectConfigs: ProjectConfigsPath
        get(): ProjectConfigsPath = projectConfigs()

    private lateinit var _projectDatabases: ProjectDatabasesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_databases</code> table
     */
    fun projectDatabases(): ProjectDatabasesPath {
        if (!this::_projectDatabases.isInitialized)
            _projectDatabases = ProjectDatabasesPath(this, null, PROJECT_DATABASES__FK_DB_CHARTER.inverseKey)

        return _projectDatabases;
    }

    val projectDatabases: ProjectDatabasesPath
        get(): ProjectDatabasesPath = projectDatabases()

    private lateinit var _projectApiGateway: ProjectApiGatewayPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_api_gateway</code> table
     */
    fun projectApiGateway(): ProjectApiGatewayPath {
        if (!this::_projectApiGateway.isInitialized)
            _projectApiGateway = ProjectApiGatewayPath(this, null, PROJECT_API_GATEWAY__FK_GW_CHARTER.inverseKey)

        return _projectApiGateway;
    }

    val projectApiGateway: ProjectApiGatewayPath
        get(): ProjectApiGatewayPath = projectApiGateway()

    private lateinit var _logbook: LogbookPath

    /**
     * Get the implicit to-many join path to the <code>public.logbook</code>
     * table
     */
    fun logbook(): LogbookPath {
        if (!this::_logbook.isInitialized)
            _logbook = LogbookPath(this, null, LOGBOOK__FK_LOGBOOK_CHARTER.inverseKey)

        return _logbook;
    }

    val logbook: LogbookPath
        get(): LogbookPath = logbook()

    private lateinit var _outboxEvents: OutboxEventsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.outbox_events</code> table
     */
    fun outboxEvents(): OutboxEventsPath {
        if (!this::_outboxEvents.isInitialized)
            _outboxEvents = OutboxEventsPath(this, null, OUTBOX_EVENTS__FK_OUTBOX_CHARTER.inverseKey)

        return _outboxEvents;
    }

    val outboxEvents: OutboxEventsPath
        get(): OutboxEventsPath = outboxEvents()

    private lateinit var _charterProjects: CharterProjectsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.charter_projects</code> table
     */
    fun charterProjects(): CharterProjectsPath {
        if (!this::_charterProjects.isInitialized)
            _charterProjects = CharterProjectsPath(this, null, CHARTER_PROJECTS__FK_PROJECTS_CHARTER.inverseKey)

        return _charterProjects;
    }

    val charterProjects: CharterProjectsPath
        get(): CharterProjectsPath = charterProjects()

    private lateinit var _projectSecrets: ProjectSecretsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_secrets</code> table
     */
    fun projectSecrets(): ProjectSecretsPath {
        if (!this::_projectSecrets.isInitialized)
            _projectSecrets = ProjectSecretsPath(this, null, PROJECT_SECRETS__FK_SECRETS_CHARTER.inverseKey)

        return _projectSecrets;
    }

    val projectSecrets: ProjectSecretsPath
        get(): ProjectSecretsPath = projectSecrets()

    private lateinit var _webhookSubscriptions: WebhookSubscriptionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.webhook_subscriptions</code> table
     */
    fun webhookSubscriptions(): WebhookSubscriptionsPath {
        if (!this::_webhookSubscriptions.isInitialized)
            _webhookSubscriptions = WebhookSubscriptionsPath(this, null, WEBHOOK_SUBSCRIPTIONS__FK_WS_CHARTER.inverseKey)

        return _webhookSubscriptions;
    }

    val webhookSubscriptions: WebhookSubscriptionsPath
        get(): WebhookSubscriptionsPath = webhookSubscriptions()

    /**
     * Get the implicit many-to-many join path to the <code>public.crew</code>
     * table
     */
    val crew: CrewPath
        get(): CrewPath = crewCharterMember().crew()
    override fun `as`(alias: String): Charters = Charters(DSL.name(alias), this)
    override fun `as`(alias: Name): Charters = Charters(alias, this)
    override fun `as`(alias: Table<*>): Charters = Charters(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Charters = Charters(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Charters = Charters(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Charters = Charters(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Charters = Charters(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Charters = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Charters = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Charters = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Charters = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Charters = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Charters = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Charters = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Charters = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Charters = where(DSL.notExists(select))
}
