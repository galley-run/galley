/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.records

import generated.jooq.tables.Sessions
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.postgres.extensions.types.Inet
import java.time.OffsetDateTime
import java.util.UUID

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class SessionsRecord() : UpdatableRecordImpl<SessionsRecord>(Sessions.SESSIONS) {
  open var id: UUID?
    set(value): Unit = set(0, value)
    get(): UUID? = get(0) as UUID?

  open var userId: UUID?
    set(value): Unit = set(1, value)
    get(): UUID? = get(1) as UUID?

  open var refreshTokenHash: ByteArray?
    set(value): Unit = set(2, value)
    get(): ByteArray? = get(2) as ByteArray?

  open var deviceName: String?
    set(value): Unit = set(3, value)
    get(): String? = get(3) as String?

  open var userAgent: String?
    set(value): Unit = set(4, value)
    get(): String? = get(4) as String?

  open var ipAddress: Inet?
    set(value): Unit = set(5, value)
    get(): Inet? = get(5) as Inet?

  open var issuedAt: OffsetDateTime?
    set(value): Unit = set(6, value)
    get(): OffsetDateTime? = get(6) as OffsetDateTime?

  open var lastUsedAt: OffsetDateTime?
    set(value): Unit = set(7, value)
    get(): OffsetDateTime? = get(7) as OffsetDateTime?

  open var expiresAt: OffsetDateTime?
    set(value): Unit = set(8, value)
    get(): OffsetDateTime? = get(8) as OffsetDateTime?

  open var revokedAt: OffsetDateTime?
    set(value): Unit = set(9, value)
    get(): OffsetDateTime? = get(9) as OffsetDateTime?

  open var replacedById: UUID?
    set(value): Unit = set(10, value)
    get(): UUID? = get(10) as UUID?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

  /**
   * Create a detached, initialised SessionsRecord
   */
  constructor(
    id: UUID? = null,
    userId: UUID? = null,
    refreshTokenHash: ByteArray? = null,
    deviceName: String? = null,
    userAgent: String? = null,
    ipAddress: Inet? = null,
    issuedAt: OffsetDateTime? = null,
    lastUsedAt: OffsetDateTime? = null,
    expiresAt: OffsetDateTime? = null,
    revokedAt: OffsetDateTime? = null,
    replacedById: UUID? = null,
  ) : this() {
    this.id = id
    this.userId = userId
    this.refreshTokenHash = refreshTokenHash
    this.deviceName = deviceName
    this.userAgent = userAgent
    this.ipAddress = ipAddress
    this.issuedAt = issuedAt
    this.lastUsedAt = lastUsedAt
    this.expiresAt = expiresAt
    this.revokedAt = revokedAt
    this.replacedById = replacedById
    resetTouchedOnNotNull()
  }

  /**
   * Create a detached, initialised SessionsRecord
   */
  constructor(value: generated.jooq.tables.pojos.Sessions?) : this() {
    if (value != null) {
      this.id = value.id
      this.userId = value.userId
      this.refreshTokenHash = value.refreshTokenHash
      this.deviceName = value.deviceName
      this.userAgent = value.userAgent
      this.ipAddress = value.ipAddress
      this.issuedAt = value.issuedAt
      this.lastUsedAt = value.lastUsedAt
      this.expiresAt = value.expiresAt
      this.revokedAt = value.revokedAt
      this.replacedById = value.replacedById
      resetTouchedOnNotNull()
    }
  }
}
