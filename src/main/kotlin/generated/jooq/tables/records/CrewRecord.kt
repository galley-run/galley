/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.records

import generated.jooq.enums.MemberStatus
import generated.jooq.enums.VesselRole
import generated.jooq.tables.Crew
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.OffsetDateTime
import java.util.UUID

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class CrewRecord() : UpdatableRecordImpl<CrewRecord>(Crew.CREW) {
  open var id: UUID?
    set(value): Unit = set(0, value)
    get(): UUID? = get(0) as UUID?

  open var userId: UUID?
    set(value): Unit = set(1, value)
    get(): UUID? = get(1) as UUID?

  open var vesselId: UUID?
    set(value): Unit = set(2, value)
    get(): UUID? = get(2) as UUID?

  open var vesselRole: VesselRole?
    set(value): Unit = set(3, value)
    get(): VesselRole? = get(3) as VesselRole?

  open var status: MemberStatus?
    set(value): Unit = set(4, value)
    get(): MemberStatus? = get(4) as MemberStatus?

  open var createdAt: OffsetDateTime?
    set(value): Unit = set(5, value)
    get(): OffsetDateTime? = get(5) as OffsetDateTime?

  open var activatedAt: OffsetDateTime?
    set(value): Unit = set(6, value)
    get(): OffsetDateTime? = get(6) as OffsetDateTime?

  open var deletedAt: OffsetDateTime?
    set(value): Unit = set(7, value)
    get(): OffsetDateTime? = get(7) as OffsetDateTime?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

  /**
   * Create a detached, initialised CrewRecord
   */
  constructor(
    id: UUID? = null,
    userId: UUID? = null,
    vesselId: UUID? = null,
    vesselRole: VesselRole? = null,
    status: MemberStatus? = null,
    createdAt: OffsetDateTime? = null,
    activatedAt: OffsetDateTime? = null,
    deletedAt: OffsetDateTime? = null,
  ) : this() {
    this.id = id
    this.userId = userId
    this.vesselId = vesselId
    this.vesselRole = vesselRole
    this.status = status
    this.createdAt = createdAt
    this.activatedAt = activatedAt
    this.deletedAt = deletedAt
    resetTouchedOnNotNull()
  }

  /**
   * Create a detached, initialised CrewRecord
   */
  constructor(value: generated.jooq.tables.pojos.Crew?) : this() {
    if (value != null) {
      this.id = value.id
      this.userId = value.userId
      this.vesselId = value.vesselId
      this.vesselRole = value.vesselRole
      this.status = value.status
      this.createdAt = value.createdAt
      this.activatedAt = value.activatedAt
      this.deletedAt = value.deletedAt
      resetTouchedOnNotNull()
    }
  }
}
