/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.indexes.SESSIONS_EXPIRES_AT_IDX
import generated.jooq.indexes.SESSIONS_REVOKED_AT_IDX
import generated.jooq.indexes.SESSIONS_USER_ID_IDX
import generated.jooq.keys.SESSIONS_PKEY
import generated.jooq.keys.SESSIONS_USER_ID_REFRESH_TOKEN_HASH_KEY
import generated.jooq.keys.SESSIONS__SESSIONS_REPLACED_BY_ID_FKEY
import generated.jooq.keys.SESSIONS__SESSIONS_USER_ID_FKEY
import generated.jooq.tables.Sessions.SessionsPath
import generated.jooq.tables.Users.UsersPath
import generated.jooq.tables.records.SessionsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.postgres.extensions.bindings.InetBinding
import org.jooq.postgres.extensions.types.Inet
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Sessions(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, SessionsRecord>?,
  parentPath: InverseForeignKey<out Record, SessionsRecord>?,
  aliased: Table<SessionsRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<SessionsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.sessions</code>
     */
    val SESSIONS: Sessions = Sessions()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<SessionsRecord> = SessionsRecord::class.java

  /**
   * The column <code>public.sessions.id</code>.
   */
  val ID: TableField<SessionsRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /**
   * The column <code>public.sessions.user_id</code>.
   */
  val USER_ID: TableField<SessionsRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

  /**
   * The column <code>public.sessions.refresh_token_hash</code>.
   */
  val REFRESH_TOKEN_HASH: TableField<SessionsRecord, ByteArray?> =
    createField(DSL.name("refresh_token_hash"), SQLDataType.BLOB.nullable(false), this, "")

  /**
   * The column <code>public.sessions.device_name</code>.
   */
  val DEVICE_NAME: TableField<SessionsRecord, String?> = createField(DSL.name("device_name"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.sessions.user_agent</code>.
   */
  val USER_AGENT: TableField<SessionsRecord, String?> = createField(DSL.name("user_agent"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.sessions.ip_address</code>.
   */
  val IP_ADDRESS: TableField<SessionsRecord, Inet?> =
    createField(DSL.name("ip_address"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "", InetBinding())

  /**
   * The column <code>public.sessions.issued_at</code>.
   */
  val ISSUED_AT: TableField<SessionsRecord, OffsetDateTime?> =
    createField(
      DSL.name("issued_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  /**
   * The column <code>public.sessions.last_used_at</code>.
   */
  val LAST_USED_AT: TableField<SessionsRecord, OffsetDateTime?> =
    createField(
      DSL.name("last_used_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  /**
   * The column <code>public.sessions.expires_at</code>.
   */
  val EXPIRES_AT: TableField<SessionsRecord, OffsetDateTime?> =
    createField(DSL.name("expires_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "")

  /**
   * The column <code>public.sessions.revoked_at</code>.
   */
  val REVOKED_AT: TableField<SessionsRecord, OffsetDateTime?> =
    createField(DSL.name("revoked_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

  /**
   * The column <code>public.sessions.replaced_by_id</code>.
   */
  val REPLACED_BY_ID: TableField<SessionsRecord, UUID?> = createField(DSL.name("replaced_by_id"), SQLDataType.UUID, this, "")

  private constructor(alias: Name, aliased: Table<SessionsRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<SessionsRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<SessionsRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.sessions</code> table reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.sessions</code> table reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.sessions</code> table reference
   */
  constructor() : this(DSL.name("sessions"), null)

  constructor(path: Table<out Record>, childPath: ForeignKey<out Record, SessionsRecord>?, parentPath: InverseForeignKey<out Record, SessionsRecord>?) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    SESSIONS,
    null,
    null,
  )

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  open class SessionsPath :
    Sessions,
    Path<SessionsRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, SessionsRecord>?,
      parentPath: InverseForeignKey<out Record, SessionsRecord>?,
    ) : super(path, childPath, parentPath)
    private constructor(alias: Name, aliased: Table<SessionsRecord>) : super(alias, aliased)

    override fun `as`(alias: String): SessionsPath = SessionsPath(DSL.name(alias), this)

    override fun `as`(alias: Name): SessionsPath = SessionsPath(alias, this)

    override fun `as`(alias: Table<*>): SessionsPath = SessionsPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> = listOf(SESSIONS_EXPIRES_AT_IDX, SESSIONS_REVOKED_AT_IDX, SESSIONS_USER_ID_IDX)

  override fun getPrimaryKey(): UniqueKey<SessionsRecord> = SESSIONS_PKEY

  override fun getUniqueKeys(): List<UniqueKey<SessionsRecord>> = listOf(SESSIONS_USER_ID_REFRESH_TOKEN_HASH_KEY)

  override fun getReferences(): List<ForeignKey<SessionsRecord, *>> =
    listOf(SESSIONS__SESSIONS_REPLACED_BY_ID_FKEY, SESSIONS__SESSIONS_USER_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.sessions</code> table.
   */
  fun sessions(): SessionsPath = sessions

  val sessions: SessionsPath by lazy { SessionsPath(this, SESSIONS__SESSIONS_REPLACED_BY_ID_FKEY, null) }

  /**
   * Get the implicit join path to the <code>public.users</code> table.
   */
  fun users(): UsersPath = users

  val users: UsersPath by lazy { UsersPath(this, SESSIONS__SESSIONS_USER_ID_FKEY, null) }

  override fun `as`(alias: String): Sessions = Sessions(DSL.name(alias), this)

  override fun `as`(alias: Name): Sessions = Sessions(alias, this)

  override fun `as`(alias: Table<*>): Sessions = Sessions(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): Sessions = Sessions(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): Sessions = Sessions(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): Sessions = Sessions(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): Sessions = Sessions(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): Sessions = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): Sessions = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): Sessions = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): Sessions = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): Sessions = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): Sessions = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): Sessions = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): Sessions = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): Sessions = where(DSL.notExists(select))
}
