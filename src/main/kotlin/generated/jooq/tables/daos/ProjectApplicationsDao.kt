/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.tables.ProjectApplications
import generated.jooq.tables.records.ProjectApplicationsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectApplicationsDao(configuration: Configuration?) : DAOImpl<ProjectApplicationsRecord, generated.jooq.tables.pojos.ProjectApplications, UUID>(ProjectApplications.PROJECT_APPLICATIONS, generated.jooq.tables.pojos.ProjectApplications::class.java, configuration) {

    /**
     * Create a new ProjectApplicationsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.ProjectApplications): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.ProjectApplications? = fetchOne(ProjectApplications.PROJECT_APPLICATIONS.ID, value)

    /**
     * Fetch records that have <code>vessel_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVesselId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.VESSEL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vessel_id IN (values)</code>
     */
    fun fetchByVesselId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.VESSEL_ID, *values)

    /**
     * Fetch records that have <code>charter_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCharterId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.CHARTER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>charter_id IN (values)</code>
     */
    fun fetchByCharterId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.CHARTER_ID, *values)

    /**
     * Fetch records that have <code>project_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProjectId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.PROJECT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>project_id IN (values)</code>
     */
    fun fetchByProjectId(vararg values: UUID): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.PROJECT_ID, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.NAME, *values)

    /**
     * Fetch records that have <code>slug BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSlug(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.SLUG, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>slug IN (values)</code>
     */
    fun fetchBySlug(vararg values: String): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.SLUG, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>deleted_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDeletedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.ProjectApplications> = fetchRange(ProjectApplications.PROJECT_APPLICATIONS.DELETED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>deleted_at IN (values)</code>
     */
    fun fetchByDeletedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.ProjectApplications> = fetch(ProjectApplications.PROJECT_APPLICATIONS.DELETED_AT, *values)
}
