/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.indexes.IDX_VESSELS_USER
import generated.jooq.keys.CHARTERS__FK_CHARTERS_VESSEL
import generated.jooq.keys.CHARTER_BILLING_PROFILE__FK_CHARTER_BILLING_VESSEL
import generated.jooq.keys.CHARTER_PROJECTS__FK_CHARTER_PROJECTS_VESSEL
import generated.jooq.keys.CREW__FK_CREW_VESSEL
import generated.jooq.keys.LOCKER__FK_LOCKER_VESSEL
import generated.jooq.keys.LOGBOOK__FK_LOGBOOK_VESSEL
import generated.jooq.keys.OUTBOX_EVENTS__FK_OUTBOX_VESSEL
import generated.jooq.keys.PROJECT_API_GATEWAY__FK_GW_VESSEL
import generated.jooq.keys.PROJECT_APPLICATIONS__FK_APP_VESSEL
import generated.jooq.keys.PROJECT_CONFIGS__FK_CONFIGS_VESSEL
import generated.jooq.keys.PROJECT_DATABASES__FK_DB_VESSEL
import generated.jooq.keys.PROJECT_SECRETS__FK_SECRETS_VESSEL
import generated.jooq.keys.SIGN_UP_INQUIRIES__FK_SIGNUPS_VESSEL
import generated.jooq.keys.VESSELS_PKEY
import generated.jooq.keys.VESSELS__FK_VESSELS_USER
import generated.jooq.keys.VESSEL_BILLING_PROFILE__FK_VESSEL_BILLING_VESSEL
import generated.jooq.keys.VESSEL_ENGINES__FK_ENGINES_VESSEL
import generated.jooq.keys.VESSEL_ENGINE_NODES__FK_NODES_VESSEL
import generated.jooq.keys.VESSEL_ENGINE_REGIONS__FK_REGIONS_VESSEL
import generated.jooq.keys.WEBHOOK_SUBSCRIPTIONS__FK_WS_VESSEL
import generated.jooq.tables.CharterBillingProfile.CharterBillingProfilePath
import generated.jooq.tables.CharterProjects.CharterProjectsPath
import generated.jooq.tables.Charters.ChartersPath
import generated.jooq.tables.Crew.CrewPath
import generated.jooq.tables.Locker.LockerPath
import generated.jooq.tables.Logbook.LogbookPath
import generated.jooq.tables.OutboxEvents.OutboxEventsPath
import generated.jooq.tables.ProjectApiGateway.ProjectApiGatewayPath
import generated.jooq.tables.ProjectApplications.ProjectApplicationsPath
import generated.jooq.tables.ProjectConfigs.ProjectConfigsPath
import generated.jooq.tables.ProjectDatabases.ProjectDatabasesPath
import generated.jooq.tables.ProjectSecrets.ProjectSecretsPath
import generated.jooq.tables.SignUpInquiries.SignUpInquiriesPath
import generated.jooq.tables.Users.UsersPath
import generated.jooq.tables.VesselBillingProfile.VesselBillingProfilePath
import generated.jooq.tables.VesselEngineNodes.VesselEngineNodesPath
import generated.jooq.tables.VesselEngineRegions.VesselEngineRegionsPath
import generated.jooq.tables.VesselEngines.VesselEnginesPath
import generated.jooq.tables.WebhookSubscriptions.WebhookSubscriptionsPath
import generated.jooq.tables.records.VesselsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Vessels(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VesselsRecord>?,
    parentPath: InverseForeignKey<out Record, VesselsRecord>?,
    aliased: Table<VesselsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VesselsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vessels</code>
         */
        val VESSELS: Vessels = Vessels()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VesselsRecord> = VesselsRecord::class.java

    /**
     * The column <code>public.vessels.id</code>.
     */
    val ID: TableField<VesselsRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.vessels.name</code>.
     */
    val NAME: TableField<VesselsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.vessels.user_id</code>.
     */
    val USER_ID: TableField<VesselsRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.vessels.created_at</code>.
     */
    val CREATED_AT: TableField<VesselsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<VesselsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VesselsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VesselsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vessels</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vessels</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vessels</code> table reference
     */
    constructor(): this(DSL.name("vessels"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VesselsRecord>?, parentPath: InverseForeignKey<out Record, VesselsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VESSELS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VesselsPath : Vessels, Path<VesselsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VesselsRecord>?, parentPath: InverseForeignKey<out Record, VesselsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VesselsRecord>): super(alias, aliased)
        override fun `as`(alias: String): VesselsPath = VesselsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VesselsPath = VesselsPath(alias, this)
        override fun `as`(alias: Table<*>): VesselsPath = VesselsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_VESSELS_USER)
    override fun getPrimaryKey(): UniqueKey<VesselsRecord> = VESSELS_PKEY
    override fun getReferences(): List<ForeignKey<VesselsRecord, *>> = listOf(VESSELS__FK_VESSELS_USER)

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, VESSELS__FK_VESSELS_USER, null) }

    private lateinit var _projectApplications: ProjectApplicationsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_applications</code> table
     */
    fun projectApplications(): ProjectApplicationsPath {
        if (!this::_projectApplications.isInitialized)
            _projectApplications = ProjectApplicationsPath(this, null, PROJECT_APPLICATIONS__FK_APP_VESSEL.inverseKey)

        return _projectApplications;
    }

    val projectApplications: ProjectApplicationsPath
        get(): ProjectApplicationsPath = projectApplications()

    private lateinit var _charterBillingProfile: CharterBillingProfilePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.charter_billing_profile</code> table
     */
    fun charterBillingProfile(): CharterBillingProfilePath {
        if (!this::_charterBillingProfile.isInitialized)
            _charterBillingProfile = CharterBillingProfilePath(this, null, CHARTER_BILLING_PROFILE__FK_CHARTER_BILLING_VESSEL.inverseKey)

        return _charterBillingProfile;
    }

    val charterBillingProfile: CharterBillingProfilePath
        get(): CharterBillingProfilePath = charterBillingProfile()

    private lateinit var _charterProjects: CharterProjectsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.charter_projects</code> table
     */
    fun charterProjects(): CharterProjectsPath {
        if (!this::_charterProjects.isInitialized)
            _charterProjects = CharterProjectsPath(this, null, CHARTER_PROJECTS__FK_CHARTER_PROJECTS_VESSEL.inverseKey)

        return _charterProjects;
    }

    val charterProjects: CharterProjectsPath
        get(): CharterProjectsPath = charterProjects()

    private lateinit var _charters: ChartersPath

    /**
     * Get the implicit to-many join path to the <code>public.charters</code>
     * table
     */
    fun charters(): ChartersPath {
        if (!this::_charters.isInitialized)
            _charters = ChartersPath(this, null, CHARTERS__FK_CHARTERS_VESSEL.inverseKey)

        return _charters;
    }

    val charters: ChartersPath
        get(): ChartersPath = charters()

    private lateinit var _projectConfigs: ProjectConfigsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_configs</code> table
     */
    fun projectConfigs(): ProjectConfigsPath {
        if (!this::_projectConfigs.isInitialized)
            _projectConfigs = ProjectConfigsPath(this, null, PROJECT_CONFIGS__FK_CONFIGS_VESSEL.inverseKey)

        return _projectConfigs;
    }

    val projectConfigs: ProjectConfigsPath
        get(): ProjectConfigsPath = projectConfigs()

    private lateinit var _crew: CrewPath

    /**
     * Get the implicit to-many join path to the <code>public.crew</code> table
     */
    fun crew(): CrewPath {
        if (!this::_crew.isInitialized)
            _crew = CrewPath(this, null, CREW__FK_CREW_VESSEL.inverseKey)

        return _crew;
    }

    val crew: CrewPath
        get(): CrewPath = crew()

    private lateinit var _projectDatabases: ProjectDatabasesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_databases</code> table
     */
    fun projectDatabases(): ProjectDatabasesPath {
        if (!this::_projectDatabases.isInitialized)
            _projectDatabases = ProjectDatabasesPath(this, null, PROJECT_DATABASES__FK_DB_VESSEL.inverseKey)

        return _projectDatabases;
    }

    val projectDatabases: ProjectDatabasesPath
        get(): ProjectDatabasesPath = projectDatabases()

    private lateinit var _vesselEngines: VesselEnginesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vessel_engines</code> table
     */
    fun vesselEngines(): VesselEnginesPath {
        if (!this::_vesselEngines.isInitialized)
            _vesselEngines = VesselEnginesPath(this, null, VESSEL_ENGINES__FK_ENGINES_VESSEL.inverseKey)

        return _vesselEngines;
    }

    val vesselEngines: VesselEnginesPath
        get(): VesselEnginesPath = vesselEngines()

    private lateinit var _projectApiGateway: ProjectApiGatewayPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_api_gateway</code> table
     */
    fun projectApiGateway(): ProjectApiGatewayPath {
        if (!this::_projectApiGateway.isInitialized)
            _projectApiGateway = ProjectApiGatewayPath(this, null, PROJECT_API_GATEWAY__FK_GW_VESSEL.inverseKey)

        return _projectApiGateway;
    }

    val projectApiGateway: ProjectApiGatewayPath
        get(): ProjectApiGatewayPath = projectApiGateway()

    private lateinit var _locker: LockerPath

    /**
     * Get the implicit to-many join path to the <code>public.locker</code>
     * table
     */
    fun locker(): LockerPath {
        if (!this::_locker.isInitialized)
            _locker = LockerPath(this, null, LOCKER__FK_LOCKER_VESSEL.inverseKey)

        return _locker;
    }

    val locker: LockerPath
        get(): LockerPath = locker()

    private lateinit var _logbook: LogbookPath

    /**
     * Get the implicit to-many join path to the <code>public.logbook</code>
     * table
     */
    fun logbook(): LogbookPath {
        if (!this::_logbook.isInitialized)
            _logbook = LogbookPath(this, null, LOGBOOK__FK_LOGBOOK_VESSEL.inverseKey)

        return _logbook;
    }

    val logbook: LogbookPath
        get(): LogbookPath = logbook()

    private lateinit var _vesselEngineNodes: VesselEngineNodesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vessel_engine_nodes</code> table
     */
    fun vesselEngineNodes(): VesselEngineNodesPath {
        if (!this::_vesselEngineNodes.isInitialized)
            _vesselEngineNodes = VesselEngineNodesPath(this, null, VESSEL_ENGINE_NODES__FK_NODES_VESSEL.inverseKey)

        return _vesselEngineNodes;
    }

    val vesselEngineNodes: VesselEngineNodesPath
        get(): VesselEngineNodesPath = vesselEngineNodes()

    private lateinit var _outboxEvents: OutboxEventsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.outbox_events</code> table
     */
    fun outboxEvents(): OutboxEventsPath {
        if (!this::_outboxEvents.isInitialized)
            _outboxEvents = OutboxEventsPath(this, null, OUTBOX_EVENTS__FK_OUTBOX_VESSEL.inverseKey)

        return _outboxEvents;
    }

    val outboxEvents: OutboxEventsPath
        get(): OutboxEventsPath = outboxEvents()

    private lateinit var _vesselEngineRegions: VesselEngineRegionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vessel_engine_regions</code> table
     */
    fun vesselEngineRegions(): VesselEngineRegionsPath {
        if (!this::_vesselEngineRegions.isInitialized)
            _vesselEngineRegions = VesselEngineRegionsPath(this, null, VESSEL_ENGINE_REGIONS__FK_REGIONS_VESSEL.inverseKey)

        return _vesselEngineRegions;
    }

    val vesselEngineRegions: VesselEngineRegionsPath
        get(): VesselEngineRegionsPath = vesselEngineRegions()

    private lateinit var _projectSecrets: ProjectSecretsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_secrets</code> table
     */
    fun projectSecrets(): ProjectSecretsPath {
        if (!this::_projectSecrets.isInitialized)
            _projectSecrets = ProjectSecretsPath(this, null, PROJECT_SECRETS__FK_SECRETS_VESSEL.inverseKey)

        return _projectSecrets;
    }

    val projectSecrets: ProjectSecretsPath
        get(): ProjectSecretsPath = projectSecrets()

    private lateinit var _signUpInquiries: SignUpInquiriesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.sign_up_inquiries</code> table
     */
    fun signUpInquiries(): SignUpInquiriesPath {
        if (!this::_signUpInquiries.isInitialized)
            _signUpInquiries = SignUpInquiriesPath(this, null, SIGN_UP_INQUIRIES__FK_SIGNUPS_VESSEL.inverseKey)

        return _signUpInquiries;
    }

    val signUpInquiries: SignUpInquiriesPath
        get(): SignUpInquiriesPath = signUpInquiries()

    private lateinit var _vesselBillingProfile: VesselBillingProfilePath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vessel_billing_profile</code> table
     */
    fun vesselBillingProfile(): VesselBillingProfilePath {
        if (!this::_vesselBillingProfile.isInitialized)
            _vesselBillingProfile = VesselBillingProfilePath(this, null, VESSEL_BILLING_PROFILE__FK_VESSEL_BILLING_VESSEL.inverseKey)

        return _vesselBillingProfile;
    }

    val vesselBillingProfile: VesselBillingProfilePath
        get(): VesselBillingProfilePath = vesselBillingProfile()

    private lateinit var _webhookSubscriptions: WebhookSubscriptionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.webhook_subscriptions</code> table
     */
    fun webhookSubscriptions(): WebhookSubscriptionsPath {
        if (!this::_webhookSubscriptions.isInitialized)
            _webhookSubscriptions = WebhookSubscriptionsPath(this, null, WEBHOOK_SUBSCRIPTIONS__FK_WS_VESSEL.inverseKey)

        return _webhookSubscriptions;
    }

    val webhookSubscriptions: WebhookSubscriptionsPath
        get(): WebhookSubscriptionsPath = webhookSubscriptions()
    override fun `as`(alias: String): Vessels = Vessels(DSL.name(alias), this)
    override fun `as`(alias: Name): Vessels = Vessels(alias, this)
    override fun `as`(alias: Table<*>): Vessels = Vessels(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Vessels = Vessels(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Vessels = Vessels(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Vessels = Vessels(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Vessels = Vessels(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Vessels = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Vessels = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Vessels = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Vessels = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Vessels = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Vessels = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Vessels = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Vessels = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Vessels = where(DSL.notExists(select))
}
