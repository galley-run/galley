/*
 * This file is generated by jOOQ.
 */
package run.galley.cloud.db.generated.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import run.galley.cloud.db.generated.Public
import run.galley.cloud.db.generated.enums.ApiKeyStatus
import run.galley.cloud.db.generated.indexes.IDX_API_KEYS_LAST_USED
import run.galley.cloud.db.generated.indexes.IDX_API_KEYS_USER_STATUS
import run.galley.cloud.db.generated.keys.API_KEYS_PKEY
import run.galley.cloud.db.generated.keys.API_KEYS_PREFIX_KEY
import run.galley.cloud.db.generated.keys.API_KEYS__FK_API_KEYS_USER
import run.galley.cloud.db.generated.tables.Users.UsersPath
import run.galley.cloud.db.generated.tables.records.ApiKeysRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ApiKeys(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ApiKeysRecord>?,
    parentPath: InverseForeignKey<out Record, ApiKeysRecord>?,
    aliased: Table<ApiKeysRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ApiKeysRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.api_keys</code>
         */
        val API_KEYS: ApiKeys = ApiKeys()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ApiKeysRecord> = ApiKeysRecord::class.java

    /**
     * The column <code>public.api_keys.id</code>.
     */
    val ID: TableField<ApiKeysRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.api_keys.user_id</code>.
     */
    val USER_ID: TableField<ApiKeysRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.api_keys.name</code>.
     */
    val NAME: TableField<ApiKeysRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.api_keys.prefix</code>.
     */
    val PREFIX: TableField<ApiKeysRecord, String?> = createField(DSL.name("prefix"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.api_keys.token_hash</code>.
     */
    val TOKEN_HASH: TableField<ApiKeysRecord, ByteArray?> = createField(DSL.name("token_hash"), SQLDataType.BLOB.nullable(false), this, "")

    /**
     * The column <code>public.api_keys.status</code>.
     */
    val STATUS: TableField<ApiKeysRecord, ApiKeyStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'active'::api_key_status"), SQLDataType.VARCHAR)).asEnumDataType(ApiKeyStatus::class.java), this, "")

    /**
     * The column <code>public.api_keys.last_used_at</code>.
     */
    val LAST_USED_AT: TableField<ApiKeysRecord, OffsetDateTime?> = createField(DSL.name("last_used_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.api_keys.created_at</code>.
     */
    val CREATED_AT: TableField<ApiKeysRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<ApiKeysRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ApiKeysRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ApiKeysRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.api_keys</code> table reference
     */
    constructor(): this(DSL.name("api_keys"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ApiKeysRecord>?, parentPath: InverseForeignKey<out Record, ApiKeysRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, API_KEYS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ApiKeysPath : ApiKeys, Path<ApiKeysRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ApiKeysRecord>?, parentPath: InverseForeignKey<out Record, ApiKeysRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ApiKeysRecord>): super(alias, aliased)
        override fun `as`(alias: String): ApiKeysPath = ApiKeysPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ApiKeysPath = ApiKeysPath(alias, this)
        override fun `as`(alias: Table<*>): ApiKeysPath = ApiKeysPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_API_KEYS_LAST_USED, IDX_API_KEYS_USER_STATUS)
    override fun getPrimaryKey(): UniqueKey<ApiKeysRecord> = API_KEYS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ApiKeysRecord>> = listOf(API_KEYS_PREFIX_KEY)
    override fun getReferences(): List<ForeignKey<ApiKeysRecord, *>> = listOf(API_KEYS__FK_API_KEYS_USER)

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, API_KEYS__FK_API_KEYS_USER, null) }
    override fun `as`(alias: String): ApiKeys = ApiKeys(DSL.name(alias), this)
    override fun `as`(alias: Name): ApiKeys = ApiKeys(alias, this)
    override fun `as`(alias: Table<*>): ApiKeys = ApiKeys(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ApiKeys = ApiKeys(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ApiKeys = ApiKeys(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ApiKeys = ApiKeys(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ApiKeys = ApiKeys(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ApiKeys = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ApiKeys = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ApiKeys = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ApiKeys = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ApiKeys = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ApiKeys = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ApiKeys = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ApiKeys = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ApiKeys = where(DSL.notExists(select))
}
