/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.enums.OutboxStatus
import generated.jooq.indexes.IDX_MV_OUTBOX_READY_NEXT
import generated.jooq.tables.records.MvOutboxReadyRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class MvOutboxReady(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, MvOutboxReadyRecord>?,
  parentPath: InverseForeignKey<out Record, MvOutboxReadyRecord>?,
  aliased: Table<MvOutboxReadyRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<MvOutboxReadyRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.materializedView(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.mv_outbox_ready</code>
     */
    val MV_OUTBOX_READY: MvOutboxReady = MvOutboxReady()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<MvOutboxReadyRecord> = MvOutboxReadyRecord::class.java

  /**
   * The column <code>public.mv_outbox_ready.id</code>.
   */
  val ID: TableField<MvOutboxReadyRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.mv_outbox_ready.vessel_id</code>.
   */
  val VESSEL_ID: TableField<MvOutboxReadyRecord, UUID?> = createField(DSL.name("vessel_id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.mv_outbox_ready.charter_id</code>.
   */
  val CHARTER_ID: TableField<MvOutboxReadyRecord, UUID?> = createField(DSL.name("charter_id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.mv_outbox_ready.project_id</code>.
   */
  val PROJECT_ID: TableField<MvOutboxReadyRecord, UUID?> = createField(DSL.name("project_id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.mv_outbox_ready.aggregate_table</code>.
   */
  val AGGREGATE_TABLE: TableField<MvOutboxReadyRecord, String?> = createField(DSL.name("aggregate_table"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.mv_outbox_ready.aggregate_id</code>.
   */
  val AGGREGATE_ID: TableField<MvOutboxReadyRecord, UUID?> = createField(DSL.name("aggregate_id"), SQLDataType.UUID, this, "")

  /**
   * The column <code>public.mv_outbox_ready.event_type</code>.
   */
  val EVENT_TYPE: TableField<MvOutboxReadyRecord, String?> = createField(DSL.name("event_type"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.mv_outbox_ready.event_key</code>.
   */
  val EVENT_KEY: TableField<MvOutboxReadyRecord, String?> = createField(DSL.name("event_key"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.mv_outbox_ready.event_version</code>.
   */
  val EVENT_VERSION: TableField<MvOutboxReadyRecord, Int?> = createField(DSL.name("event_version"), SQLDataType.INTEGER, this, "")

  /**
   * The column <code>public.mv_outbox_ready.payload</code>.
   */
  val PAYLOAD: TableField<MvOutboxReadyRecord, JSONB?> = createField(DSL.name("payload"), SQLDataType.JSONB, this, "")

  /**
   * The column <code>public.mv_outbox_ready.metadata</code>.
   */
  val METADATA: TableField<MvOutboxReadyRecord, JSONB?> = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "")

  /**
   * The column <code>public.mv_outbox_ready.status</code>.
   */
  val STATUS: TableField<MvOutboxReadyRecord, OutboxStatus?> =
    createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(OutboxStatus::class.java), this, "")

  /**
   * The column <code>public.mv_outbox_ready.attempts</code>.
   */
  val ATTEMPTS: TableField<MvOutboxReadyRecord, Int?> = createField(DSL.name("attempts"), SQLDataType.INTEGER, this, "")

  /**
   * The column <code>public.mv_outbox_ready.next_attempt_at</code>.
   */
  val NEXT_ATTEMPT_AT: TableField<MvOutboxReadyRecord, OffsetDateTime?> =
    createField(DSL.name("next_attempt_at"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "")

  /**
   * The column <code>public.mv_outbox_ready.processed_at</code>.
   */
  val PROCESSED_AT: TableField<MvOutboxReadyRecord, OffsetDateTime?> =
    createField(DSL.name("processed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "")

  /**
   * The column <code>public.mv_outbox_ready.error</code>.
   */
  val ERROR: TableField<MvOutboxReadyRecord, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

  /**
   * The column <code>public.mv_outbox_ready.created_at</code>.
   */
  val CREATED_AT: TableField<MvOutboxReadyRecord, OffsetDateTime?> =
    createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "")

  private constructor(alias: Name, aliased: Table<MvOutboxReadyRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<MvOutboxReadyRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<MvOutboxReadyRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.mv_outbox_ready</code> table reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.mv_outbox_ready</code> table reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.mv_outbox_ready</code> table reference
   */
  constructor() : this(DSL.name("mv_outbox_ready"), null)

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> = listOf(IDX_MV_OUTBOX_READY_NEXT)

  override fun `as`(alias: String): MvOutboxReady = MvOutboxReady(DSL.name(alias), this)

  override fun `as`(alias: Name): MvOutboxReady = MvOutboxReady(alias, this)

  override fun `as`(alias: Table<*>): MvOutboxReady = MvOutboxReady(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): MvOutboxReady = MvOutboxReady(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): MvOutboxReady = MvOutboxReady(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): MvOutboxReady = MvOutboxReady(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): MvOutboxReady = MvOutboxReady(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): MvOutboxReady = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): MvOutboxReady = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): MvOutboxReady = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): MvOutboxReady = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): MvOutboxReady = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): MvOutboxReady = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): MvOutboxReady = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): MvOutboxReady = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): MvOutboxReady = where(DSL.notExists(select))
}
