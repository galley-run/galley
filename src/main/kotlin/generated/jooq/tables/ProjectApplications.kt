/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables

import generated.jooq.Public
import generated.jooq.indexes.IDX_APP_CHARTER
import generated.jooq.indexes.IDX_APP_DELETED
import generated.jooq.indexes.IDX_APP_PROJECT
import generated.jooq.indexes.IDX_APP_VESSEL
import generated.jooq.keys.PROJECT_APPLICATIONS_PKEY
import generated.jooq.keys.PROJECT_APPLICATIONS__FK_APP_CHARTER
import generated.jooq.keys.PROJECT_APPLICATIONS__FK_APP_PROJECT
import generated.jooq.keys.PROJECT_APPLICATIONS__FK_APP_VESSEL
import generated.jooq.keys.UQ_PROJECT_SLUG
import generated.jooq.tables.CharterProjects.CharterProjectsPath
import generated.jooq.tables.Charters.ChartersPath
import generated.jooq.tables.Vessels.VesselsPath
import generated.jooq.tables.records.ProjectApplicationsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ProjectApplications(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, ProjectApplicationsRecord>?,
  parentPath: InverseForeignKey<out Record, ProjectApplicationsRecord>?,
  aliased: Table<ProjectApplicationsRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) : TableImpl<ProjectApplicationsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {
    /**
     * The reference instance of <code>public.project_applications</code>
     */
    val PROJECT_APPLICATIONS: ProjectApplications = ProjectApplications()
  }

  /**
   * The class holding records for this type
   */
  override fun getRecordType(): Class<ProjectApplicationsRecord> = ProjectApplicationsRecord::class.java

  /**
   * The column <code>public.project_applications.id</code>.
   */
  val ID: TableField<ProjectApplicationsRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /**
   * The column <code>public.project_applications.vessel_id</code>.
   */
  val VESSEL_ID: TableField<ProjectApplicationsRecord, UUID?> =
    createField(DSL.name("vessel_id"), SQLDataType.UUID.nullable(false), this, "")

  /**
   * The column <code>public.project_applications.charter_id</code>.
   */
  val CHARTER_ID: TableField<ProjectApplicationsRecord, UUID?> =
    createField(DSL.name("charter_id"), SQLDataType.UUID.nullable(false), this, "")

  /**
   * The column <code>public.project_applications.project_id</code>.
   */
  val PROJECT_ID: TableField<ProjectApplicationsRecord, UUID?> =
    createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "")

  /**
   * The column <code>public.project_applications.name</code>.
   */
  val NAME: TableField<ProjectApplicationsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

  /**
   * The column <code>public.project_applications.slug</code>.
   */
  val SLUG: TableField<ProjectApplicationsRecord, String?> = createField(DSL.name("slug"), SQLDataType.CLOB.nullable(false), this, "")

  /**
   * The column <code>public.project_applications.created_at</code>.
   */
  val CREATED_AT: TableField<ProjectApplicationsRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  /**
   * The column <code>public.project_applications.deleted_at</code>.
   */
  val DELETED_AT: TableField<ProjectApplicationsRecord, OffsetDateTime?> =
    createField(DSL.name("deleted_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

  private constructor(alias: Name, aliased: Table<ProjectApplicationsRecord>?) : this(alias, null, null, null, aliased, null, null)
  private constructor(
    alias: Name,
    aliased: Table<ProjectApplicationsRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)
  private constructor(
    alias: Name,
    aliased: Table<ProjectApplicationsRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.project_applications</code> table
   * reference
   */
  constructor(alias: String) : this(DSL.name(alias))

  /**
   * Create an aliased <code>public.project_applications</code> table
   * reference
   */
  constructor(alias: Name) : this(alias, null)

  /**
   * Create a <code>public.project_applications</code> table reference
   */
  constructor() : this(DSL.name("project_applications"), null)

  constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ProjectApplicationsRecord>?, parentPath: InverseForeignKey<out Record, ProjectApplicationsRecord>?) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    PROJECT_APPLICATIONS,
    null,
    null,
  )

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  open class ProjectApplicationsPath :
    ProjectApplications,
    Path<ProjectApplicationsRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, ProjectApplicationsRecord>?,
      parentPath: InverseForeignKey<out Record, ProjectApplicationsRecord>?,
    ) : super(path, childPath, parentPath)
    private constructor(alias: Name, aliased: Table<ProjectApplicationsRecord>) : super(alias, aliased)

    override fun `as`(alias: String): ProjectApplicationsPath = ProjectApplicationsPath(DSL.name(alias), this)

    override fun `as`(alias: Name): ProjectApplicationsPath = ProjectApplicationsPath(alias, this)

    override fun `as`(alias: Table<*>): ProjectApplicationsPath = ProjectApplicationsPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> = listOf(IDX_APP_CHARTER, IDX_APP_DELETED, IDX_APP_PROJECT, IDX_APP_VESSEL)

  override fun getPrimaryKey(): UniqueKey<ProjectApplicationsRecord> = PROJECT_APPLICATIONS_PKEY

  override fun getUniqueKeys(): List<UniqueKey<ProjectApplicationsRecord>> = listOf(UQ_PROJECT_SLUG)

  override fun getReferences(): List<ForeignKey<ProjectApplicationsRecord, *>> =
    listOf(PROJECT_APPLICATIONS__FK_APP_CHARTER, PROJECT_APPLICATIONS__FK_APP_PROJECT, PROJECT_APPLICATIONS__FK_APP_VESSEL)

  /**
   * Get the implicit join path to the <code>public.charters</code> table.
   */
  fun charters(): ChartersPath = charters

  val charters: ChartersPath by lazy { ChartersPath(this, PROJECT_APPLICATIONS__FK_APP_CHARTER, null) }

  /**
   * Get the implicit join path to the <code>public.charter_projects</code>
   * table.
   */
  fun charterProjects(): CharterProjectsPath = charterProjects

  val charterProjects: CharterProjectsPath by lazy { CharterProjectsPath(this, PROJECT_APPLICATIONS__FK_APP_PROJECT, null) }

  /**
   * Get the implicit join path to the <code>public.vessels</code> table.
   */
  fun vessels(): VesselsPath = vessels

  val vessels: VesselsPath by lazy { VesselsPath(this, PROJECT_APPLICATIONS__FK_APP_VESSEL, null) }

  override fun `as`(alias: String): ProjectApplications = ProjectApplications(DSL.name(alias), this)

  override fun `as`(alias: Name): ProjectApplications = ProjectApplications(alias, this)

  override fun `as`(alias: Table<*>): ProjectApplications = ProjectApplications(alias.qualifiedName, this)

  /**
   * Rename this table
   */
  override fun rename(name: String): ProjectApplications = ProjectApplications(DSL.name(name), null)

  /**
   * Rename this table
   */
  override fun rename(name: Name): ProjectApplications = ProjectApplications(name, null)

  /**
   * Rename this table
   */
  override fun rename(name: Table<*>): ProjectApplications = ProjectApplications(name.qualifiedName, null)

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Condition?): ProjectApplications =
    ProjectApplications(qualifiedName, if (aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override fun where(conditions: Collection<Condition>): ProjectApplications = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(vararg conditions: Condition?): ProjectApplications = where(DSL.and(*conditions))

  /**
   * Create an inline derived table from this table
   */
  override fun where(condition: Field<Boolean?>?): ProjectApplications = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(condition: SQL): ProjectApplications = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
  ): ProjectApplications = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg binds: Any?,
  ): ProjectApplications = where(DSL.condition(condition, *binds))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): ProjectApplications = where(DSL.condition(condition, *parts))

  /**
   * Create an inline derived table from this table
   */
  override fun whereExists(select: Select<*>): ProjectApplications = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override fun whereNotExists(select: Select<*>): ProjectApplications = where(DSL.notExists(select))
}
