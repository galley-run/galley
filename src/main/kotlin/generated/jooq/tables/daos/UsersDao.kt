/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.tables.Users
import generated.jooq.tables.records.UsersRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class UsersDao(configuration: Configuration?) : DAOImpl<UsersRecord, generated.jooq.tables.pojos.Users, UUID>(Users.USERS, generated.jooq.tables.pojos.Users::class.java, configuration) {

    /**
     * Create a new UsersDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.Users): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<generated.jooq.tables.pojos.Users> = fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<generated.jooq.tables.pojos.Users> = fetch(Users.USERS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): generated.jooq.tables.pojos.Users? = fetchOne(Users.USERS.ID, value)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Users> = fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<generated.jooq.tables.pojos.Users> = fetch(Users.USERS.EMAIL, *values)

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    fun fetchOneByEmail(value: String): generated.jooq.tables.pojos.Users? = fetchOne(Users.USERS.EMAIL, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Users> = fetchRange(Users.USERS.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<generated.jooq.tables.pojos.Users> = fetch(Users.USERS.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Users> = fetchRange(Users.USERS.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<generated.jooq.tables.pojos.Users> = fetch(Users.USERS.LAST_NAME, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Users> = fetchRange(Users.USERS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Users> = fetch(Users.USERS.CREATED_AT, *values)
}
